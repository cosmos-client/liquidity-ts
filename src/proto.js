/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
import * as $protobuf from "protobufjs/minimal";

// Common aliases
const $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

// Exported root namespace
const $root = $protobuf.roots["@cosmos-client/liquidity"] || ($protobuf.roots["@cosmos-client/liquidity"] = {});

export const tendermint = $root.tendermint = (() => {

    /**
     * Namespace tendermint.
     * @exports tendermint
     * @namespace
     */
    const tendermint = {};

    tendermint.liquidity = (function() {

        /**
         * Namespace liquidity.
         * @memberof tendermint
         * @namespace
         */
        const liquidity = {};

        liquidity.v1beta1 = (function() {

            /**
             * Namespace v1beta1.
             * @memberof tendermint.liquidity
             * @namespace
             */
            const v1beta1 = {};

            v1beta1.QueryLiquidityPoolRequest = (function() {

                /**
                 * Properties of a QueryLiquidityPoolRequest.
                 * @memberof tendermint.liquidity.v1beta1
                 * @interface IQueryLiquidityPoolRequest
                 * @property {Long|null} [pool_id] QueryLiquidityPoolRequest pool_id
                 */

                /**
                 * Constructs a new QueryLiquidityPoolRequest.
                 * @memberof tendermint.liquidity.v1beta1
                 * @classdesc Represents a QueryLiquidityPoolRequest.
                 * @implements IQueryLiquidityPoolRequest
                 * @constructor
                 * @param {tendermint.liquidity.v1beta1.IQueryLiquidityPoolRequest=} [properties] Properties to set
                 */
                function QueryLiquidityPoolRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryLiquidityPoolRequest pool_id.
                 * @member {Long} pool_id
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolRequest
                 * @instance
                 */
                QueryLiquidityPoolRequest.prototype.pool_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * Encodes the specified QueryLiquidityPoolRequest message. Does not implicitly {@link tendermint.liquidity.v1beta1.QueryLiquidityPoolRequest.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolRequest
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IQueryLiquidityPoolRequest} message QueryLiquidityPoolRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryLiquidityPoolRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.pool_id != null && Object.hasOwnProperty.call(message, "pool_id"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.pool_id);
                    return writer;
                };

                /**
                 * Encodes the specified QueryLiquidityPoolRequest message, length delimited. Does not implicitly {@link tendermint.liquidity.v1beta1.QueryLiquidityPoolRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolRequest
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IQueryLiquidityPoolRequest} message QueryLiquidityPoolRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryLiquidityPoolRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryLiquidityPoolRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.liquidity.v1beta1.QueryLiquidityPoolRequest} QueryLiquidityPoolRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryLiquidityPoolRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.liquidity.v1beta1.QueryLiquidityPoolRequest();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.pool_id = reader.uint64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryLiquidityPoolRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.liquidity.v1beta1.QueryLiquidityPoolRequest} QueryLiquidityPoolRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryLiquidityPoolRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryLiquidityPoolRequest message.
                 * @function verify
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryLiquidityPoolRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.pool_id != null && message.hasOwnProperty("pool_id"))
                        if (!$util.isInteger(message.pool_id) && !(message.pool_id && $util.isInteger(message.pool_id.low) && $util.isInteger(message.pool_id.high)))
                            return "pool_id: integer|Long expected";
                    return null;
                };

                /**
                 * Creates a QueryLiquidityPoolRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.liquidity.v1beta1.QueryLiquidityPoolRequest} QueryLiquidityPoolRequest
                 */
                QueryLiquidityPoolRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.liquidity.v1beta1.QueryLiquidityPoolRequest)
                        return object;
                    let message = new $root.tendermint.liquidity.v1beta1.QueryLiquidityPoolRequest();
                    if (object.pool_id != null)
                        if ($util.Long)
                            (message.pool_id = $util.Long.fromValue(object.pool_id)).unsigned = true;
                        else if (typeof object.pool_id === "string")
                            message.pool_id = parseInt(object.pool_id, 10);
                        else if (typeof object.pool_id === "number")
                            message.pool_id = object.pool_id;
                        else if (typeof object.pool_id === "object")
                            message.pool_id = new $util.LongBits(object.pool_id.low >>> 0, object.pool_id.high >>> 0).toNumber(true);
                    return message;
                };

                /**
                 * Creates a plain object from a QueryLiquidityPoolRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolRequest
                 * @static
                 * @param {tendermint.liquidity.v1beta1.QueryLiquidityPoolRequest} message QueryLiquidityPoolRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryLiquidityPoolRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.pool_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.pool_id = options.longs === String ? "0" : 0;
                    if (message.pool_id != null && message.hasOwnProperty("pool_id"))
                        if (typeof message.pool_id === "number")
                            object.pool_id = options.longs === String ? String(message.pool_id) : message.pool_id;
                        else
                            object.pool_id = options.longs === String ? $util.Long.prototype.toString.call(message.pool_id) : options.longs === Number ? new $util.LongBits(message.pool_id.low >>> 0, message.pool_id.high >>> 0).toNumber(true) : message.pool_id;
                    return object;
                };

                /**
                 * Converts this QueryLiquidityPoolRequest to JSON.
                 * @function toJSON
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryLiquidityPoolRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryLiquidityPoolRequest;
            })();

            v1beta1.QueryLiquidityPoolResponse = (function() {

                /**
                 * Properties of a QueryLiquidityPoolResponse.
                 * @memberof tendermint.liquidity.v1beta1
                 * @interface IQueryLiquidityPoolResponse
                 * @property {tendermint.liquidity.v1beta1.IPool|null} [pool] QueryLiquidityPoolResponse pool
                 */

                /**
                 * Constructs a new QueryLiquidityPoolResponse.
                 * @memberof tendermint.liquidity.v1beta1
                 * @classdesc Represents a QueryLiquidityPoolResponse.
                 * @implements IQueryLiquidityPoolResponse
                 * @constructor
                 * @param {tendermint.liquidity.v1beta1.IQueryLiquidityPoolResponse=} [properties] Properties to set
                 */
                function QueryLiquidityPoolResponse(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryLiquidityPoolResponse pool.
                 * @member {tendermint.liquidity.v1beta1.IPool|null|undefined} pool
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolResponse
                 * @instance
                 */
                QueryLiquidityPoolResponse.prototype.pool = null;

                /**
                 * Encodes the specified QueryLiquidityPoolResponse message. Does not implicitly {@link tendermint.liquidity.v1beta1.QueryLiquidityPoolResponse.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolResponse
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IQueryLiquidityPoolResponse} message QueryLiquidityPoolResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryLiquidityPoolResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.pool != null && Object.hasOwnProperty.call(message, "pool"))
                        $root.tendermint.liquidity.v1beta1.Pool.encode(message.pool, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified QueryLiquidityPoolResponse message, length delimited. Does not implicitly {@link tendermint.liquidity.v1beta1.QueryLiquidityPoolResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolResponse
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IQueryLiquidityPoolResponse} message QueryLiquidityPoolResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryLiquidityPoolResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryLiquidityPoolResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.liquidity.v1beta1.QueryLiquidityPoolResponse} QueryLiquidityPoolResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryLiquidityPoolResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.liquidity.v1beta1.QueryLiquidityPoolResponse();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.pool = $root.tendermint.liquidity.v1beta1.Pool.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryLiquidityPoolResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.liquidity.v1beta1.QueryLiquidityPoolResponse} QueryLiquidityPoolResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryLiquidityPoolResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryLiquidityPoolResponse message.
                 * @function verify
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryLiquidityPoolResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.pool != null && message.hasOwnProperty("pool")) {
                        let error = $root.tendermint.liquidity.v1beta1.Pool.verify(message.pool);
                        if (error)
                            return "pool." + error;
                    }
                    return null;
                };

                /**
                 * Creates a QueryLiquidityPoolResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.liquidity.v1beta1.QueryLiquidityPoolResponse} QueryLiquidityPoolResponse
                 */
                QueryLiquidityPoolResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.liquidity.v1beta1.QueryLiquidityPoolResponse)
                        return object;
                    let message = new $root.tendermint.liquidity.v1beta1.QueryLiquidityPoolResponse();
                    if (object.pool != null) {
                        if (typeof object.pool !== "object")
                            throw TypeError(".tendermint.liquidity.v1beta1.QueryLiquidityPoolResponse.pool: object expected");
                        message.pool = $root.tendermint.liquidity.v1beta1.Pool.fromObject(object.pool);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a QueryLiquidityPoolResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolResponse
                 * @static
                 * @param {tendermint.liquidity.v1beta1.QueryLiquidityPoolResponse} message QueryLiquidityPoolResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryLiquidityPoolResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.pool = null;
                    if (message.pool != null && message.hasOwnProperty("pool"))
                        object.pool = $root.tendermint.liquidity.v1beta1.Pool.toObject(message.pool, options);
                    return object;
                };

                /**
                 * Converts this QueryLiquidityPoolResponse to JSON.
                 * @function toJSON
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryLiquidityPoolResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryLiquidityPoolResponse;
            })();

            v1beta1.QueryLiquidityPoolByPoolCoinDenomRequest = (function() {

                /**
                 * Properties of a QueryLiquidityPoolByPoolCoinDenomRequest.
                 * @memberof tendermint.liquidity.v1beta1
                 * @interface IQueryLiquidityPoolByPoolCoinDenomRequest
                 * @property {string|null} [pool_coin_denom] QueryLiquidityPoolByPoolCoinDenomRequest pool_coin_denom
                 */

                /**
                 * Constructs a new QueryLiquidityPoolByPoolCoinDenomRequest.
                 * @memberof tendermint.liquidity.v1beta1
                 * @classdesc Represents a QueryLiquidityPoolByPoolCoinDenomRequest.
                 * @implements IQueryLiquidityPoolByPoolCoinDenomRequest
                 * @constructor
                 * @param {tendermint.liquidity.v1beta1.IQueryLiquidityPoolByPoolCoinDenomRequest=} [properties] Properties to set
                 */
                function QueryLiquidityPoolByPoolCoinDenomRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryLiquidityPoolByPoolCoinDenomRequest pool_coin_denom.
                 * @member {string} pool_coin_denom
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolByPoolCoinDenomRequest
                 * @instance
                 */
                QueryLiquidityPoolByPoolCoinDenomRequest.prototype.pool_coin_denom = "";

                /**
                 * Encodes the specified QueryLiquidityPoolByPoolCoinDenomRequest message. Does not implicitly {@link tendermint.liquidity.v1beta1.QueryLiquidityPoolByPoolCoinDenomRequest.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolByPoolCoinDenomRequest
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IQueryLiquidityPoolByPoolCoinDenomRequest} message QueryLiquidityPoolByPoolCoinDenomRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryLiquidityPoolByPoolCoinDenomRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.pool_coin_denom != null && Object.hasOwnProperty.call(message, "pool_coin_denom"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.pool_coin_denom);
                    return writer;
                };

                /**
                 * Encodes the specified QueryLiquidityPoolByPoolCoinDenomRequest message, length delimited. Does not implicitly {@link tendermint.liquidity.v1beta1.QueryLiquidityPoolByPoolCoinDenomRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolByPoolCoinDenomRequest
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IQueryLiquidityPoolByPoolCoinDenomRequest} message QueryLiquidityPoolByPoolCoinDenomRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryLiquidityPoolByPoolCoinDenomRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryLiquidityPoolByPoolCoinDenomRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolByPoolCoinDenomRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.liquidity.v1beta1.QueryLiquidityPoolByPoolCoinDenomRequest} QueryLiquidityPoolByPoolCoinDenomRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryLiquidityPoolByPoolCoinDenomRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.liquidity.v1beta1.QueryLiquidityPoolByPoolCoinDenomRequest();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.pool_coin_denom = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryLiquidityPoolByPoolCoinDenomRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolByPoolCoinDenomRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.liquidity.v1beta1.QueryLiquidityPoolByPoolCoinDenomRequest} QueryLiquidityPoolByPoolCoinDenomRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryLiquidityPoolByPoolCoinDenomRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryLiquidityPoolByPoolCoinDenomRequest message.
                 * @function verify
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolByPoolCoinDenomRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryLiquidityPoolByPoolCoinDenomRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.pool_coin_denom != null && message.hasOwnProperty("pool_coin_denom"))
                        if (!$util.isString(message.pool_coin_denom))
                            return "pool_coin_denom: string expected";
                    return null;
                };

                /**
                 * Creates a QueryLiquidityPoolByPoolCoinDenomRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolByPoolCoinDenomRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.liquidity.v1beta1.QueryLiquidityPoolByPoolCoinDenomRequest} QueryLiquidityPoolByPoolCoinDenomRequest
                 */
                QueryLiquidityPoolByPoolCoinDenomRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.liquidity.v1beta1.QueryLiquidityPoolByPoolCoinDenomRequest)
                        return object;
                    let message = new $root.tendermint.liquidity.v1beta1.QueryLiquidityPoolByPoolCoinDenomRequest();
                    if (object.pool_coin_denom != null)
                        message.pool_coin_denom = String(object.pool_coin_denom);
                    return message;
                };

                /**
                 * Creates a plain object from a QueryLiquidityPoolByPoolCoinDenomRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolByPoolCoinDenomRequest
                 * @static
                 * @param {tendermint.liquidity.v1beta1.QueryLiquidityPoolByPoolCoinDenomRequest} message QueryLiquidityPoolByPoolCoinDenomRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryLiquidityPoolByPoolCoinDenomRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.pool_coin_denom = "";
                    if (message.pool_coin_denom != null && message.hasOwnProperty("pool_coin_denom"))
                        object.pool_coin_denom = message.pool_coin_denom;
                    return object;
                };

                /**
                 * Converts this QueryLiquidityPoolByPoolCoinDenomRequest to JSON.
                 * @function toJSON
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolByPoolCoinDenomRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryLiquidityPoolByPoolCoinDenomRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryLiquidityPoolByPoolCoinDenomRequest;
            })();

            v1beta1.QueryLiquidityPoolByReserveAccRequest = (function() {

                /**
                 * Properties of a QueryLiquidityPoolByReserveAccRequest.
                 * @memberof tendermint.liquidity.v1beta1
                 * @interface IQueryLiquidityPoolByReserveAccRequest
                 * @property {string|null} [reserve_acc] QueryLiquidityPoolByReserveAccRequest reserve_acc
                 */

                /**
                 * Constructs a new QueryLiquidityPoolByReserveAccRequest.
                 * @memberof tendermint.liquidity.v1beta1
                 * @classdesc Represents a QueryLiquidityPoolByReserveAccRequest.
                 * @implements IQueryLiquidityPoolByReserveAccRequest
                 * @constructor
                 * @param {tendermint.liquidity.v1beta1.IQueryLiquidityPoolByReserveAccRequest=} [properties] Properties to set
                 */
                function QueryLiquidityPoolByReserveAccRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryLiquidityPoolByReserveAccRequest reserve_acc.
                 * @member {string} reserve_acc
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolByReserveAccRequest
                 * @instance
                 */
                QueryLiquidityPoolByReserveAccRequest.prototype.reserve_acc = "";

                /**
                 * Encodes the specified QueryLiquidityPoolByReserveAccRequest message. Does not implicitly {@link tendermint.liquidity.v1beta1.QueryLiquidityPoolByReserveAccRequest.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolByReserveAccRequest
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IQueryLiquidityPoolByReserveAccRequest} message QueryLiquidityPoolByReserveAccRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryLiquidityPoolByReserveAccRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.reserve_acc != null && Object.hasOwnProperty.call(message, "reserve_acc"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.reserve_acc);
                    return writer;
                };

                /**
                 * Encodes the specified QueryLiquidityPoolByReserveAccRequest message, length delimited. Does not implicitly {@link tendermint.liquidity.v1beta1.QueryLiquidityPoolByReserveAccRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolByReserveAccRequest
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IQueryLiquidityPoolByReserveAccRequest} message QueryLiquidityPoolByReserveAccRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryLiquidityPoolByReserveAccRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryLiquidityPoolByReserveAccRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolByReserveAccRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.liquidity.v1beta1.QueryLiquidityPoolByReserveAccRequest} QueryLiquidityPoolByReserveAccRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryLiquidityPoolByReserveAccRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.liquidity.v1beta1.QueryLiquidityPoolByReserveAccRequest();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.reserve_acc = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryLiquidityPoolByReserveAccRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolByReserveAccRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.liquidity.v1beta1.QueryLiquidityPoolByReserveAccRequest} QueryLiquidityPoolByReserveAccRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryLiquidityPoolByReserveAccRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryLiquidityPoolByReserveAccRequest message.
                 * @function verify
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolByReserveAccRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryLiquidityPoolByReserveAccRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.reserve_acc != null && message.hasOwnProperty("reserve_acc"))
                        if (!$util.isString(message.reserve_acc))
                            return "reserve_acc: string expected";
                    return null;
                };

                /**
                 * Creates a QueryLiquidityPoolByReserveAccRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolByReserveAccRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.liquidity.v1beta1.QueryLiquidityPoolByReserveAccRequest} QueryLiquidityPoolByReserveAccRequest
                 */
                QueryLiquidityPoolByReserveAccRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.liquidity.v1beta1.QueryLiquidityPoolByReserveAccRequest)
                        return object;
                    let message = new $root.tendermint.liquidity.v1beta1.QueryLiquidityPoolByReserveAccRequest();
                    if (object.reserve_acc != null)
                        message.reserve_acc = String(object.reserve_acc);
                    return message;
                };

                /**
                 * Creates a plain object from a QueryLiquidityPoolByReserveAccRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolByReserveAccRequest
                 * @static
                 * @param {tendermint.liquidity.v1beta1.QueryLiquidityPoolByReserveAccRequest} message QueryLiquidityPoolByReserveAccRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryLiquidityPoolByReserveAccRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.reserve_acc = "";
                    if (message.reserve_acc != null && message.hasOwnProperty("reserve_acc"))
                        object.reserve_acc = message.reserve_acc;
                    return object;
                };

                /**
                 * Converts this QueryLiquidityPoolByReserveAccRequest to JSON.
                 * @function toJSON
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolByReserveAccRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryLiquidityPoolByReserveAccRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryLiquidityPoolByReserveAccRequest;
            })();

            v1beta1.QueryLiquidityPoolBatchRequest = (function() {

                /**
                 * Properties of a QueryLiquidityPoolBatchRequest.
                 * @memberof tendermint.liquidity.v1beta1
                 * @interface IQueryLiquidityPoolBatchRequest
                 * @property {Long|null} [pool_id] QueryLiquidityPoolBatchRequest pool_id
                 */

                /**
                 * Constructs a new QueryLiquidityPoolBatchRequest.
                 * @memberof tendermint.liquidity.v1beta1
                 * @classdesc Represents a QueryLiquidityPoolBatchRequest.
                 * @implements IQueryLiquidityPoolBatchRequest
                 * @constructor
                 * @param {tendermint.liquidity.v1beta1.IQueryLiquidityPoolBatchRequest=} [properties] Properties to set
                 */
                function QueryLiquidityPoolBatchRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryLiquidityPoolBatchRequest pool_id.
                 * @member {Long} pool_id
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolBatchRequest
                 * @instance
                 */
                QueryLiquidityPoolBatchRequest.prototype.pool_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * Encodes the specified QueryLiquidityPoolBatchRequest message. Does not implicitly {@link tendermint.liquidity.v1beta1.QueryLiquidityPoolBatchRequest.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolBatchRequest
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IQueryLiquidityPoolBatchRequest} message QueryLiquidityPoolBatchRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryLiquidityPoolBatchRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.pool_id != null && Object.hasOwnProperty.call(message, "pool_id"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.pool_id);
                    return writer;
                };

                /**
                 * Encodes the specified QueryLiquidityPoolBatchRequest message, length delimited. Does not implicitly {@link tendermint.liquidity.v1beta1.QueryLiquidityPoolBatchRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolBatchRequest
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IQueryLiquidityPoolBatchRequest} message QueryLiquidityPoolBatchRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryLiquidityPoolBatchRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryLiquidityPoolBatchRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolBatchRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.liquidity.v1beta1.QueryLiquidityPoolBatchRequest} QueryLiquidityPoolBatchRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryLiquidityPoolBatchRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.liquidity.v1beta1.QueryLiquidityPoolBatchRequest();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.pool_id = reader.uint64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryLiquidityPoolBatchRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolBatchRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.liquidity.v1beta1.QueryLiquidityPoolBatchRequest} QueryLiquidityPoolBatchRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryLiquidityPoolBatchRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryLiquidityPoolBatchRequest message.
                 * @function verify
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolBatchRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryLiquidityPoolBatchRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.pool_id != null && message.hasOwnProperty("pool_id"))
                        if (!$util.isInteger(message.pool_id) && !(message.pool_id && $util.isInteger(message.pool_id.low) && $util.isInteger(message.pool_id.high)))
                            return "pool_id: integer|Long expected";
                    return null;
                };

                /**
                 * Creates a QueryLiquidityPoolBatchRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolBatchRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.liquidity.v1beta1.QueryLiquidityPoolBatchRequest} QueryLiquidityPoolBatchRequest
                 */
                QueryLiquidityPoolBatchRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.liquidity.v1beta1.QueryLiquidityPoolBatchRequest)
                        return object;
                    let message = new $root.tendermint.liquidity.v1beta1.QueryLiquidityPoolBatchRequest();
                    if (object.pool_id != null)
                        if ($util.Long)
                            (message.pool_id = $util.Long.fromValue(object.pool_id)).unsigned = true;
                        else if (typeof object.pool_id === "string")
                            message.pool_id = parseInt(object.pool_id, 10);
                        else if (typeof object.pool_id === "number")
                            message.pool_id = object.pool_id;
                        else if (typeof object.pool_id === "object")
                            message.pool_id = new $util.LongBits(object.pool_id.low >>> 0, object.pool_id.high >>> 0).toNumber(true);
                    return message;
                };

                /**
                 * Creates a plain object from a QueryLiquidityPoolBatchRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolBatchRequest
                 * @static
                 * @param {tendermint.liquidity.v1beta1.QueryLiquidityPoolBatchRequest} message QueryLiquidityPoolBatchRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryLiquidityPoolBatchRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.pool_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.pool_id = options.longs === String ? "0" : 0;
                    if (message.pool_id != null && message.hasOwnProperty("pool_id"))
                        if (typeof message.pool_id === "number")
                            object.pool_id = options.longs === String ? String(message.pool_id) : message.pool_id;
                        else
                            object.pool_id = options.longs === String ? $util.Long.prototype.toString.call(message.pool_id) : options.longs === Number ? new $util.LongBits(message.pool_id.low >>> 0, message.pool_id.high >>> 0).toNumber(true) : message.pool_id;
                    return object;
                };

                /**
                 * Converts this QueryLiquidityPoolBatchRequest to JSON.
                 * @function toJSON
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolBatchRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryLiquidityPoolBatchRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryLiquidityPoolBatchRequest;
            })();

            v1beta1.QueryLiquidityPoolBatchResponse = (function() {

                /**
                 * Properties of a QueryLiquidityPoolBatchResponse.
                 * @memberof tendermint.liquidity.v1beta1
                 * @interface IQueryLiquidityPoolBatchResponse
                 * @property {tendermint.liquidity.v1beta1.IPoolBatch|null} [batch] QueryLiquidityPoolBatchResponse batch
                 */

                /**
                 * Constructs a new QueryLiquidityPoolBatchResponse.
                 * @memberof tendermint.liquidity.v1beta1
                 * @classdesc Represents a QueryLiquidityPoolBatchResponse.
                 * @implements IQueryLiquidityPoolBatchResponse
                 * @constructor
                 * @param {tendermint.liquidity.v1beta1.IQueryLiquidityPoolBatchResponse=} [properties] Properties to set
                 */
                function QueryLiquidityPoolBatchResponse(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryLiquidityPoolBatchResponse batch.
                 * @member {tendermint.liquidity.v1beta1.IPoolBatch|null|undefined} batch
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolBatchResponse
                 * @instance
                 */
                QueryLiquidityPoolBatchResponse.prototype.batch = null;

                /**
                 * Encodes the specified QueryLiquidityPoolBatchResponse message. Does not implicitly {@link tendermint.liquidity.v1beta1.QueryLiquidityPoolBatchResponse.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolBatchResponse
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IQueryLiquidityPoolBatchResponse} message QueryLiquidityPoolBatchResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryLiquidityPoolBatchResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.batch != null && Object.hasOwnProperty.call(message, "batch"))
                        $root.tendermint.liquidity.v1beta1.PoolBatch.encode(message.batch, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified QueryLiquidityPoolBatchResponse message, length delimited. Does not implicitly {@link tendermint.liquidity.v1beta1.QueryLiquidityPoolBatchResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolBatchResponse
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IQueryLiquidityPoolBatchResponse} message QueryLiquidityPoolBatchResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryLiquidityPoolBatchResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryLiquidityPoolBatchResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolBatchResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.liquidity.v1beta1.QueryLiquidityPoolBatchResponse} QueryLiquidityPoolBatchResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryLiquidityPoolBatchResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.liquidity.v1beta1.QueryLiquidityPoolBatchResponse();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.batch = $root.tendermint.liquidity.v1beta1.PoolBatch.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryLiquidityPoolBatchResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolBatchResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.liquidity.v1beta1.QueryLiquidityPoolBatchResponse} QueryLiquidityPoolBatchResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryLiquidityPoolBatchResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryLiquidityPoolBatchResponse message.
                 * @function verify
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolBatchResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryLiquidityPoolBatchResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.batch != null && message.hasOwnProperty("batch")) {
                        let error = $root.tendermint.liquidity.v1beta1.PoolBatch.verify(message.batch);
                        if (error)
                            return "batch." + error;
                    }
                    return null;
                };

                /**
                 * Creates a QueryLiquidityPoolBatchResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolBatchResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.liquidity.v1beta1.QueryLiquidityPoolBatchResponse} QueryLiquidityPoolBatchResponse
                 */
                QueryLiquidityPoolBatchResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.liquidity.v1beta1.QueryLiquidityPoolBatchResponse)
                        return object;
                    let message = new $root.tendermint.liquidity.v1beta1.QueryLiquidityPoolBatchResponse();
                    if (object.batch != null) {
                        if (typeof object.batch !== "object")
                            throw TypeError(".tendermint.liquidity.v1beta1.QueryLiquidityPoolBatchResponse.batch: object expected");
                        message.batch = $root.tendermint.liquidity.v1beta1.PoolBatch.fromObject(object.batch);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a QueryLiquidityPoolBatchResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolBatchResponse
                 * @static
                 * @param {tendermint.liquidity.v1beta1.QueryLiquidityPoolBatchResponse} message QueryLiquidityPoolBatchResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryLiquidityPoolBatchResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.batch = null;
                    if (message.batch != null && message.hasOwnProperty("batch"))
                        object.batch = $root.tendermint.liquidity.v1beta1.PoolBatch.toObject(message.batch, options);
                    return object;
                };

                /**
                 * Converts this QueryLiquidityPoolBatchResponse to JSON.
                 * @function toJSON
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolBatchResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryLiquidityPoolBatchResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryLiquidityPoolBatchResponse;
            })();

            v1beta1.QueryLiquidityPoolsRequest = (function() {

                /**
                 * Properties of a QueryLiquidityPoolsRequest.
                 * @memberof tendermint.liquidity.v1beta1
                 * @interface IQueryLiquidityPoolsRequest
                 * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QueryLiquidityPoolsRequest pagination
                 */

                /**
                 * Constructs a new QueryLiquidityPoolsRequest.
                 * @memberof tendermint.liquidity.v1beta1
                 * @classdesc Represents a QueryLiquidityPoolsRequest.
                 * @implements IQueryLiquidityPoolsRequest
                 * @constructor
                 * @param {tendermint.liquidity.v1beta1.IQueryLiquidityPoolsRequest=} [properties] Properties to set
                 */
                function QueryLiquidityPoolsRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryLiquidityPoolsRequest pagination.
                 * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolsRequest
                 * @instance
                 */
                QueryLiquidityPoolsRequest.prototype.pagination = null;

                /**
                 * Encodes the specified QueryLiquidityPoolsRequest message. Does not implicitly {@link tendermint.liquidity.v1beta1.QueryLiquidityPoolsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolsRequest
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IQueryLiquidityPoolsRequest} message QueryLiquidityPoolsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryLiquidityPoolsRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageRequest.encode(message.pagination, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified QueryLiquidityPoolsRequest message, length delimited. Does not implicitly {@link tendermint.liquidity.v1beta1.QueryLiquidityPoolsRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolsRequest
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IQueryLiquidityPoolsRequest} message QueryLiquidityPoolsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryLiquidityPoolsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryLiquidityPoolsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.liquidity.v1beta1.QueryLiquidityPoolsRequest} QueryLiquidityPoolsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryLiquidityPoolsRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.liquidity.v1beta1.QueryLiquidityPoolsRequest();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryLiquidityPoolsRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.liquidity.v1beta1.QueryLiquidityPoolsRequest} QueryLiquidityPoolsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryLiquidityPoolsRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryLiquidityPoolsRequest message.
                 * @function verify
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolsRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryLiquidityPoolsRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.pagination != null && message.hasOwnProperty("pagination")) {
                        let error = $root.cosmos.base.query.v1beta1.PageRequest.verify(message.pagination);
                        if (error)
                            return "pagination." + error;
                    }
                    return null;
                };

                /**
                 * Creates a QueryLiquidityPoolsRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolsRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.liquidity.v1beta1.QueryLiquidityPoolsRequest} QueryLiquidityPoolsRequest
                 */
                QueryLiquidityPoolsRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.liquidity.v1beta1.QueryLiquidityPoolsRequest)
                        return object;
                    let message = new $root.tendermint.liquidity.v1beta1.QueryLiquidityPoolsRequest();
                    if (object.pagination != null) {
                        if (typeof object.pagination !== "object")
                            throw TypeError(".tendermint.liquidity.v1beta1.QueryLiquidityPoolsRequest.pagination: object expected");
                        message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.fromObject(object.pagination);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a QueryLiquidityPoolsRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolsRequest
                 * @static
                 * @param {tendermint.liquidity.v1beta1.QueryLiquidityPoolsRequest} message QueryLiquidityPoolsRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryLiquidityPoolsRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.pagination = null;
                    if (message.pagination != null && message.hasOwnProperty("pagination"))
                        object.pagination = $root.cosmos.base.query.v1beta1.PageRequest.toObject(message.pagination, options);
                    return object;
                };

                /**
                 * Converts this QueryLiquidityPoolsRequest to JSON.
                 * @function toJSON
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolsRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryLiquidityPoolsRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryLiquidityPoolsRequest;
            })();

            v1beta1.QueryLiquidityPoolsResponse = (function() {

                /**
                 * Properties of a QueryLiquidityPoolsResponse.
                 * @memberof tendermint.liquidity.v1beta1
                 * @interface IQueryLiquidityPoolsResponse
                 * @property {Array.<tendermint.liquidity.v1beta1.IPool>|null} [pools] QueryLiquidityPoolsResponse pools
                 * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QueryLiquidityPoolsResponse pagination
                 */

                /**
                 * Constructs a new QueryLiquidityPoolsResponse.
                 * @memberof tendermint.liquidity.v1beta1
                 * @classdesc Represents a QueryLiquidityPoolsResponse.
                 * @implements IQueryLiquidityPoolsResponse
                 * @constructor
                 * @param {tendermint.liquidity.v1beta1.IQueryLiquidityPoolsResponse=} [properties] Properties to set
                 */
                function QueryLiquidityPoolsResponse(properties) {
                    this.pools = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryLiquidityPoolsResponse pools.
                 * @member {Array.<tendermint.liquidity.v1beta1.IPool>} pools
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolsResponse
                 * @instance
                 */
                QueryLiquidityPoolsResponse.prototype.pools = $util.emptyArray;

                /**
                 * QueryLiquidityPoolsResponse pagination.
                 * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolsResponse
                 * @instance
                 */
                QueryLiquidityPoolsResponse.prototype.pagination = null;

                /**
                 * Encodes the specified QueryLiquidityPoolsResponse message. Does not implicitly {@link tendermint.liquidity.v1beta1.QueryLiquidityPoolsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolsResponse
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IQueryLiquidityPoolsResponse} message QueryLiquidityPoolsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryLiquidityPoolsResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.pools != null && message.pools.length)
                        for (let i = 0; i < message.pools.length; ++i)
                            $root.tendermint.liquidity.v1beta1.Pool.encode(message.pools[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageResponse.encode(message.pagination, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified QueryLiquidityPoolsResponse message, length delimited. Does not implicitly {@link tendermint.liquidity.v1beta1.QueryLiquidityPoolsResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolsResponse
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IQueryLiquidityPoolsResponse} message QueryLiquidityPoolsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryLiquidityPoolsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryLiquidityPoolsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.liquidity.v1beta1.QueryLiquidityPoolsResponse} QueryLiquidityPoolsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryLiquidityPoolsResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.liquidity.v1beta1.QueryLiquidityPoolsResponse();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.pools && message.pools.length))
                                message.pools = [];
                            message.pools.push($root.tendermint.liquidity.v1beta1.Pool.decode(reader, reader.uint32()));
                            break;
                        case 2:
                            message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryLiquidityPoolsResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.liquidity.v1beta1.QueryLiquidityPoolsResponse} QueryLiquidityPoolsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryLiquidityPoolsResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryLiquidityPoolsResponse message.
                 * @function verify
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolsResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryLiquidityPoolsResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.pools != null && message.hasOwnProperty("pools")) {
                        if (!Array.isArray(message.pools))
                            return "pools: array expected";
                        for (let i = 0; i < message.pools.length; ++i) {
                            let error = $root.tendermint.liquidity.v1beta1.Pool.verify(message.pools[i]);
                            if (error)
                                return "pools." + error;
                        }
                    }
                    if (message.pagination != null && message.hasOwnProperty("pagination")) {
                        let error = $root.cosmos.base.query.v1beta1.PageResponse.verify(message.pagination);
                        if (error)
                            return "pagination." + error;
                    }
                    return null;
                };

                /**
                 * Creates a QueryLiquidityPoolsResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolsResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.liquidity.v1beta1.QueryLiquidityPoolsResponse} QueryLiquidityPoolsResponse
                 */
                QueryLiquidityPoolsResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.liquidity.v1beta1.QueryLiquidityPoolsResponse)
                        return object;
                    let message = new $root.tendermint.liquidity.v1beta1.QueryLiquidityPoolsResponse();
                    if (object.pools) {
                        if (!Array.isArray(object.pools))
                            throw TypeError(".tendermint.liquidity.v1beta1.QueryLiquidityPoolsResponse.pools: array expected");
                        message.pools = [];
                        for (let i = 0; i < object.pools.length; ++i) {
                            if (typeof object.pools[i] !== "object")
                                throw TypeError(".tendermint.liquidity.v1beta1.QueryLiquidityPoolsResponse.pools: object expected");
                            message.pools[i] = $root.tendermint.liquidity.v1beta1.Pool.fromObject(object.pools[i]);
                        }
                    }
                    if (object.pagination != null) {
                        if (typeof object.pagination !== "object")
                            throw TypeError(".tendermint.liquidity.v1beta1.QueryLiquidityPoolsResponse.pagination: object expected");
                        message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.fromObject(object.pagination);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a QueryLiquidityPoolsResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolsResponse
                 * @static
                 * @param {tendermint.liquidity.v1beta1.QueryLiquidityPoolsResponse} message QueryLiquidityPoolsResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryLiquidityPoolsResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.pools = [];
                    if (options.defaults)
                        object.pagination = null;
                    if (message.pools && message.pools.length) {
                        object.pools = [];
                        for (let j = 0; j < message.pools.length; ++j)
                            object.pools[j] = $root.tendermint.liquidity.v1beta1.Pool.toObject(message.pools[j], options);
                    }
                    if (message.pagination != null && message.hasOwnProperty("pagination"))
                        object.pagination = $root.cosmos.base.query.v1beta1.PageResponse.toObject(message.pagination, options);
                    return object;
                };

                /**
                 * Converts this QueryLiquidityPoolsResponse to JSON.
                 * @function toJSON
                 * @memberof tendermint.liquidity.v1beta1.QueryLiquidityPoolsResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryLiquidityPoolsResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryLiquidityPoolsResponse;
            })();

            v1beta1.QueryParamsRequest = (function() {

                /**
                 * Properties of a QueryParamsRequest.
                 * @memberof tendermint.liquidity.v1beta1
                 * @interface IQueryParamsRequest
                 */

                /**
                 * Constructs a new QueryParamsRequest.
                 * @memberof tendermint.liquidity.v1beta1
                 * @classdesc Represents a QueryParamsRequest.
                 * @implements IQueryParamsRequest
                 * @constructor
                 * @param {tendermint.liquidity.v1beta1.IQueryParamsRequest=} [properties] Properties to set
                 */
                function QueryParamsRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Encodes the specified QueryParamsRequest message. Does not implicitly {@link tendermint.liquidity.v1beta1.QueryParamsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.liquidity.v1beta1.QueryParamsRequest
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IQueryParamsRequest} message QueryParamsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };

                /**
                 * Encodes the specified QueryParamsRequest message, length delimited. Does not implicitly {@link tendermint.liquidity.v1beta1.QueryParamsRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.QueryParamsRequest
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IQueryParamsRequest} message QueryParamsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryParamsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.liquidity.v1beta1.QueryParamsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.liquidity.v1beta1.QueryParamsRequest} QueryParamsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.liquidity.v1beta1.QueryParamsRequest();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryParamsRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.QueryParamsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.liquidity.v1beta1.QueryParamsRequest} QueryParamsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryParamsRequest message.
                 * @function verify
                 * @memberof tendermint.liquidity.v1beta1.QueryParamsRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryParamsRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };

                /**
                 * Creates a QueryParamsRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.liquidity.v1beta1.QueryParamsRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.liquidity.v1beta1.QueryParamsRequest} QueryParamsRequest
                 */
                QueryParamsRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.liquidity.v1beta1.QueryParamsRequest)
                        return object;
                    return new $root.tendermint.liquidity.v1beta1.QueryParamsRequest();
                };

                /**
                 * Creates a plain object from a QueryParamsRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.liquidity.v1beta1.QueryParamsRequest
                 * @static
                 * @param {tendermint.liquidity.v1beta1.QueryParamsRequest} message QueryParamsRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryParamsRequest.toObject = function toObject() {
                    return {};
                };

                /**
                 * Converts this QueryParamsRequest to JSON.
                 * @function toJSON
                 * @memberof tendermint.liquidity.v1beta1.QueryParamsRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryParamsRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryParamsRequest;
            })();

            v1beta1.QueryParamsResponse = (function() {

                /**
                 * Properties of a QueryParamsResponse.
                 * @memberof tendermint.liquidity.v1beta1
                 * @interface IQueryParamsResponse
                 * @property {tendermint.liquidity.v1beta1.IParams|null} [params] QueryParamsResponse params
                 */

                /**
                 * Constructs a new QueryParamsResponse.
                 * @memberof tendermint.liquidity.v1beta1
                 * @classdesc Represents a QueryParamsResponse.
                 * @implements IQueryParamsResponse
                 * @constructor
                 * @param {tendermint.liquidity.v1beta1.IQueryParamsResponse=} [properties] Properties to set
                 */
                function QueryParamsResponse(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryParamsResponse params.
                 * @member {tendermint.liquidity.v1beta1.IParams|null|undefined} params
                 * @memberof tendermint.liquidity.v1beta1.QueryParamsResponse
                 * @instance
                 */
                QueryParamsResponse.prototype.params = null;

                /**
                 * Encodes the specified QueryParamsResponse message. Does not implicitly {@link tendermint.liquidity.v1beta1.QueryParamsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.liquidity.v1beta1.QueryParamsResponse
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IQueryParamsResponse} message QueryParamsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.params != null && Object.hasOwnProperty.call(message, "params"))
                        $root.tendermint.liquidity.v1beta1.Params.encode(message.params, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified QueryParamsResponse message, length delimited. Does not implicitly {@link tendermint.liquidity.v1beta1.QueryParamsResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.QueryParamsResponse
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IQueryParamsResponse} message QueryParamsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryParamsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.liquidity.v1beta1.QueryParamsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.liquidity.v1beta1.QueryParamsResponse} QueryParamsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.liquidity.v1beta1.QueryParamsResponse();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.params = $root.tendermint.liquidity.v1beta1.Params.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryParamsResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.QueryParamsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.liquidity.v1beta1.QueryParamsResponse} QueryParamsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryParamsResponse message.
                 * @function verify
                 * @memberof tendermint.liquidity.v1beta1.QueryParamsResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryParamsResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.params != null && message.hasOwnProperty("params")) {
                        let error = $root.tendermint.liquidity.v1beta1.Params.verify(message.params);
                        if (error)
                            return "params." + error;
                    }
                    return null;
                };

                /**
                 * Creates a QueryParamsResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.liquidity.v1beta1.QueryParamsResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.liquidity.v1beta1.QueryParamsResponse} QueryParamsResponse
                 */
                QueryParamsResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.liquidity.v1beta1.QueryParamsResponse)
                        return object;
                    let message = new $root.tendermint.liquidity.v1beta1.QueryParamsResponse();
                    if (object.params != null) {
                        if (typeof object.params !== "object")
                            throw TypeError(".tendermint.liquidity.v1beta1.QueryParamsResponse.params: object expected");
                        message.params = $root.tendermint.liquidity.v1beta1.Params.fromObject(object.params);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a QueryParamsResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.liquidity.v1beta1.QueryParamsResponse
                 * @static
                 * @param {tendermint.liquidity.v1beta1.QueryParamsResponse} message QueryParamsResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryParamsResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.params = null;
                    if (message.params != null && message.hasOwnProperty("params"))
                        object.params = $root.tendermint.liquidity.v1beta1.Params.toObject(message.params, options);
                    return object;
                };

                /**
                 * Converts this QueryParamsResponse to JSON.
                 * @function toJSON
                 * @memberof tendermint.liquidity.v1beta1.QueryParamsResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryParamsResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryParamsResponse;
            })();

            v1beta1.QueryPoolBatchSwapMsgsRequest = (function() {

                /**
                 * Properties of a QueryPoolBatchSwapMsgsRequest.
                 * @memberof tendermint.liquidity.v1beta1
                 * @interface IQueryPoolBatchSwapMsgsRequest
                 * @property {Long|null} [pool_id] QueryPoolBatchSwapMsgsRequest pool_id
                 * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QueryPoolBatchSwapMsgsRequest pagination
                 */

                /**
                 * Constructs a new QueryPoolBatchSwapMsgsRequest.
                 * @memberof tendermint.liquidity.v1beta1
                 * @classdesc Represents a QueryPoolBatchSwapMsgsRequest.
                 * @implements IQueryPoolBatchSwapMsgsRequest
                 * @constructor
                 * @param {tendermint.liquidity.v1beta1.IQueryPoolBatchSwapMsgsRequest=} [properties] Properties to set
                 */
                function QueryPoolBatchSwapMsgsRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryPoolBatchSwapMsgsRequest pool_id.
                 * @member {Long} pool_id
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgsRequest
                 * @instance
                 */
                QueryPoolBatchSwapMsgsRequest.prototype.pool_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * QueryPoolBatchSwapMsgsRequest pagination.
                 * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgsRequest
                 * @instance
                 */
                QueryPoolBatchSwapMsgsRequest.prototype.pagination = null;

                /**
                 * Encodes the specified QueryPoolBatchSwapMsgsRequest message. Does not implicitly {@link tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgsRequest
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IQueryPoolBatchSwapMsgsRequest} message QueryPoolBatchSwapMsgsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryPoolBatchSwapMsgsRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.pool_id != null && Object.hasOwnProperty.call(message, "pool_id"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.pool_id);
                    if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageRequest.encode(message.pagination, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified QueryPoolBatchSwapMsgsRequest message, length delimited. Does not implicitly {@link tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgsRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgsRequest
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IQueryPoolBatchSwapMsgsRequest} message QueryPoolBatchSwapMsgsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryPoolBatchSwapMsgsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryPoolBatchSwapMsgsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgsRequest} QueryPoolBatchSwapMsgsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryPoolBatchSwapMsgsRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgsRequest();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.pool_id = reader.uint64();
                            break;
                        case 2:
                            message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryPoolBatchSwapMsgsRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgsRequest} QueryPoolBatchSwapMsgsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryPoolBatchSwapMsgsRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryPoolBatchSwapMsgsRequest message.
                 * @function verify
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgsRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryPoolBatchSwapMsgsRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.pool_id != null && message.hasOwnProperty("pool_id"))
                        if (!$util.isInteger(message.pool_id) && !(message.pool_id && $util.isInteger(message.pool_id.low) && $util.isInteger(message.pool_id.high)))
                            return "pool_id: integer|Long expected";
                    if (message.pagination != null && message.hasOwnProperty("pagination")) {
                        let error = $root.cosmos.base.query.v1beta1.PageRequest.verify(message.pagination);
                        if (error)
                            return "pagination." + error;
                    }
                    return null;
                };

                /**
                 * Creates a QueryPoolBatchSwapMsgsRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgsRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgsRequest} QueryPoolBatchSwapMsgsRequest
                 */
                QueryPoolBatchSwapMsgsRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgsRequest)
                        return object;
                    let message = new $root.tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgsRequest();
                    if (object.pool_id != null)
                        if ($util.Long)
                            (message.pool_id = $util.Long.fromValue(object.pool_id)).unsigned = true;
                        else if (typeof object.pool_id === "string")
                            message.pool_id = parseInt(object.pool_id, 10);
                        else if (typeof object.pool_id === "number")
                            message.pool_id = object.pool_id;
                        else if (typeof object.pool_id === "object")
                            message.pool_id = new $util.LongBits(object.pool_id.low >>> 0, object.pool_id.high >>> 0).toNumber(true);
                    if (object.pagination != null) {
                        if (typeof object.pagination !== "object")
                            throw TypeError(".tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgsRequest.pagination: object expected");
                        message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.fromObject(object.pagination);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a QueryPoolBatchSwapMsgsRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgsRequest
                 * @static
                 * @param {tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgsRequest} message QueryPoolBatchSwapMsgsRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryPoolBatchSwapMsgsRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.pool_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.pool_id = options.longs === String ? "0" : 0;
                        object.pagination = null;
                    }
                    if (message.pool_id != null && message.hasOwnProperty("pool_id"))
                        if (typeof message.pool_id === "number")
                            object.pool_id = options.longs === String ? String(message.pool_id) : message.pool_id;
                        else
                            object.pool_id = options.longs === String ? $util.Long.prototype.toString.call(message.pool_id) : options.longs === Number ? new $util.LongBits(message.pool_id.low >>> 0, message.pool_id.high >>> 0).toNumber(true) : message.pool_id;
                    if (message.pagination != null && message.hasOwnProperty("pagination"))
                        object.pagination = $root.cosmos.base.query.v1beta1.PageRequest.toObject(message.pagination, options);
                    return object;
                };

                /**
                 * Converts this QueryPoolBatchSwapMsgsRequest to JSON.
                 * @function toJSON
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgsRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryPoolBatchSwapMsgsRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryPoolBatchSwapMsgsRequest;
            })();

            v1beta1.QueryPoolBatchSwapMsgRequest = (function() {

                /**
                 * Properties of a QueryPoolBatchSwapMsgRequest.
                 * @memberof tendermint.liquidity.v1beta1
                 * @interface IQueryPoolBatchSwapMsgRequest
                 * @property {Long|null} [pool_id] QueryPoolBatchSwapMsgRequest pool_id
                 * @property {Long|null} [msg_index] QueryPoolBatchSwapMsgRequest msg_index
                 */

                /**
                 * Constructs a new QueryPoolBatchSwapMsgRequest.
                 * @memberof tendermint.liquidity.v1beta1
                 * @classdesc Represents a QueryPoolBatchSwapMsgRequest.
                 * @implements IQueryPoolBatchSwapMsgRequest
                 * @constructor
                 * @param {tendermint.liquidity.v1beta1.IQueryPoolBatchSwapMsgRequest=} [properties] Properties to set
                 */
                function QueryPoolBatchSwapMsgRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryPoolBatchSwapMsgRequest pool_id.
                 * @member {Long} pool_id
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgRequest
                 * @instance
                 */
                QueryPoolBatchSwapMsgRequest.prototype.pool_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * QueryPoolBatchSwapMsgRequest msg_index.
                 * @member {Long} msg_index
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgRequest
                 * @instance
                 */
                QueryPoolBatchSwapMsgRequest.prototype.msg_index = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * Encodes the specified QueryPoolBatchSwapMsgRequest message. Does not implicitly {@link tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgRequest.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgRequest
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IQueryPoolBatchSwapMsgRequest} message QueryPoolBatchSwapMsgRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryPoolBatchSwapMsgRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.pool_id != null && Object.hasOwnProperty.call(message, "pool_id"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.pool_id);
                    if (message.msg_index != null && Object.hasOwnProperty.call(message, "msg_index"))
                        writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.msg_index);
                    return writer;
                };

                /**
                 * Encodes the specified QueryPoolBatchSwapMsgRequest message, length delimited. Does not implicitly {@link tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgRequest
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IQueryPoolBatchSwapMsgRequest} message QueryPoolBatchSwapMsgRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryPoolBatchSwapMsgRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryPoolBatchSwapMsgRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgRequest} QueryPoolBatchSwapMsgRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryPoolBatchSwapMsgRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgRequest();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.pool_id = reader.uint64();
                            break;
                        case 2:
                            message.msg_index = reader.uint64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryPoolBatchSwapMsgRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgRequest} QueryPoolBatchSwapMsgRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryPoolBatchSwapMsgRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryPoolBatchSwapMsgRequest message.
                 * @function verify
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryPoolBatchSwapMsgRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.pool_id != null && message.hasOwnProperty("pool_id"))
                        if (!$util.isInteger(message.pool_id) && !(message.pool_id && $util.isInteger(message.pool_id.low) && $util.isInteger(message.pool_id.high)))
                            return "pool_id: integer|Long expected";
                    if (message.msg_index != null && message.hasOwnProperty("msg_index"))
                        if (!$util.isInteger(message.msg_index) && !(message.msg_index && $util.isInteger(message.msg_index.low) && $util.isInteger(message.msg_index.high)))
                            return "msg_index: integer|Long expected";
                    return null;
                };

                /**
                 * Creates a QueryPoolBatchSwapMsgRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgRequest} QueryPoolBatchSwapMsgRequest
                 */
                QueryPoolBatchSwapMsgRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgRequest)
                        return object;
                    let message = new $root.tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgRequest();
                    if (object.pool_id != null)
                        if ($util.Long)
                            (message.pool_id = $util.Long.fromValue(object.pool_id)).unsigned = true;
                        else if (typeof object.pool_id === "string")
                            message.pool_id = parseInt(object.pool_id, 10);
                        else if (typeof object.pool_id === "number")
                            message.pool_id = object.pool_id;
                        else if (typeof object.pool_id === "object")
                            message.pool_id = new $util.LongBits(object.pool_id.low >>> 0, object.pool_id.high >>> 0).toNumber(true);
                    if (object.msg_index != null)
                        if ($util.Long)
                            (message.msg_index = $util.Long.fromValue(object.msg_index)).unsigned = true;
                        else if (typeof object.msg_index === "string")
                            message.msg_index = parseInt(object.msg_index, 10);
                        else if (typeof object.msg_index === "number")
                            message.msg_index = object.msg_index;
                        else if (typeof object.msg_index === "object")
                            message.msg_index = new $util.LongBits(object.msg_index.low >>> 0, object.msg_index.high >>> 0).toNumber(true);
                    return message;
                };

                /**
                 * Creates a plain object from a QueryPoolBatchSwapMsgRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgRequest
                 * @static
                 * @param {tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgRequest} message QueryPoolBatchSwapMsgRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryPoolBatchSwapMsgRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.pool_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.pool_id = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.msg_index = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.msg_index = options.longs === String ? "0" : 0;
                    }
                    if (message.pool_id != null && message.hasOwnProperty("pool_id"))
                        if (typeof message.pool_id === "number")
                            object.pool_id = options.longs === String ? String(message.pool_id) : message.pool_id;
                        else
                            object.pool_id = options.longs === String ? $util.Long.prototype.toString.call(message.pool_id) : options.longs === Number ? new $util.LongBits(message.pool_id.low >>> 0, message.pool_id.high >>> 0).toNumber(true) : message.pool_id;
                    if (message.msg_index != null && message.hasOwnProperty("msg_index"))
                        if (typeof message.msg_index === "number")
                            object.msg_index = options.longs === String ? String(message.msg_index) : message.msg_index;
                        else
                            object.msg_index = options.longs === String ? $util.Long.prototype.toString.call(message.msg_index) : options.longs === Number ? new $util.LongBits(message.msg_index.low >>> 0, message.msg_index.high >>> 0).toNumber(true) : message.msg_index;
                    return object;
                };

                /**
                 * Converts this QueryPoolBatchSwapMsgRequest to JSON.
                 * @function toJSON
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryPoolBatchSwapMsgRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryPoolBatchSwapMsgRequest;
            })();

            v1beta1.QueryPoolBatchSwapMsgsResponse = (function() {

                /**
                 * Properties of a QueryPoolBatchSwapMsgsResponse.
                 * @memberof tendermint.liquidity.v1beta1
                 * @interface IQueryPoolBatchSwapMsgsResponse
                 * @property {Array.<tendermint.liquidity.v1beta1.ISwapMsgState>|null} [swaps] QueryPoolBatchSwapMsgsResponse swaps
                 * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QueryPoolBatchSwapMsgsResponse pagination
                 */

                /**
                 * Constructs a new QueryPoolBatchSwapMsgsResponse.
                 * @memberof tendermint.liquidity.v1beta1
                 * @classdesc Represents a QueryPoolBatchSwapMsgsResponse.
                 * @implements IQueryPoolBatchSwapMsgsResponse
                 * @constructor
                 * @param {tendermint.liquidity.v1beta1.IQueryPoolBatchSwapMsgsResponse=} [properties] Properties to set
                 */
                function QueryPoolBatchSwapMsgsResponse(properties) {
                    this.swaps = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryPoolBatchSwapMsgsResponse swaps.
                 * @member {Array.<tendermint.liquidity.v1beta1.ISwapMsgState>} swaps
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgsResponse
                 * @instance
                 */
                QueryPoolBatchSwapMsgsResponse.prototype.swaps = $util.emptyArray;

                /**
                 * QueryPoolBatchSwapMsgsResponse pagination.
                 * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgsResponse
                 * @instance
                 */
                QueryPoolBatchSwapMsgsResponse.prototype.pagination = null;

                /**
                 * Encodes the specified QueryPoolBatchSwapMsgsResponse message. Does not implicitly {@link tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgsResponse
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IQueryPoolBatchSwapMsgsResponse} message QueryPoolBatchSwapMsgsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryPoolBatchSwapMsgsResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.swaps != null && message.swaps.length)
                        for (let i = 0; i < message.swaps.length; ++i)
                            $root.tendermint.liquidity.v1beta1.SwapMsgState.encode(message.swaps[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageResponse.encode(message.pagination, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified QueryPoolBatchSwapMsgsResponse message, length delimited. Does not implicitly {@link tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgsResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgsResponse
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IQueryPoolBatchSwapMsgsResponse} message QueryPoolBatchSwapMsgsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryPoolBatchSwapMsgsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryPoolBatchSwapMsgsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgsResponse} QueryPoolBatchSwapMsgsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryPoolBatchSwapMsgsResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgsResponse();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.swaps && message.swaps.length))
                                message.swaps = [];
                            message.swaps.push($root.tendermint.liquidity.v1beta1.SwapMsgState.decode(reader, reader.uint32()));
                            break;
                        case 2:
                            message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryPoolBatchSwapMsgsResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgsResponse} QueryPoolBatchSwapMsgsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryPoolBatchSwapMsgsResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryPoolBatchSwapMsgsResponse message.
                 * @function verify
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgsResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryPoolBatchSwapMsgsResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.swaps != null && message.hasOwnProperty("swaps")) {
                        if (!Array.isArray(message.swaps))
                            return "swaps: array expected";
                        for (let i = 0; i < message.swaps.length; ++i) {
                            let error = $root.tendermint.liquidity.v1beta1.SwapMsgState.verify(message.swaps[i]);
                            if (error)
                                return "swaps." + error;
                        }
                    }
                    if (message.pagination != null && message.hasOwnProperty("pagination")) {
                        let error = $root.cosmos.base.query.v1beta1.PageResponse.verify(message.pagination);
                        if (error)
                            return "pagination." + error;
                    }
                    return null;
                };

                /**
                 * Creates a QueryPoolBatchSwapMsgsResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgsResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgsResponse} QueryPoolBatchSwapMsgsResponse
                 */
                QueryPoolBatchSwapMsgsResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgsResponse)
                        return object;
                    let message = new $root.tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgsResponse();
                    if (object.swaps) {
                        if (!Array.isArray(object.swaps))
                            throw TypeError(".tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgsResponse.swaps: array expected");
                        message.swaps = [];
                        for (let i = 0; i < object.swaps.length; ++i) {
                            if (typeof object.swaps[i] !== "object")
                                throw TypeError(".tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgsResponse.swaps: object expected");
                            message.swaps[i] = $root.tendermint.liquidity.v1beta1.SwapMsgState.fromObject(object.swaps[i]);
                        }
                    }
                    if (object.pagination != null) {
                        if (typeof object.pagination !== "object")
                            throw TypeError(".tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgsResponse.pagination: object expected");
                        message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.fromObject(object.pagination);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a QueryPoolBatchSwapMsgsResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgsResponse
                 * @static
                 * @param {tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgsResponse} message QueryPoolBatchSwapMsgsResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryPoolBatchSwapMsgsResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.swaps = [];
                    if (options.defaults)
                        object.pagination = null;
                    if (message.swaps && message.swaps.length) {
                        object.swaps = [];
                        for (let j = 0; j < message.swaps.length; ++j)
                            object.swaps[j] = $root.tendermint.liquidity.v1beta1.SwapMsgState.toObject(message.swaps[j], options);
                    }
                    if (message.pagination != null && message.hasOwnProperty("pagination"))
                        object.pagination = $root.cosmos.base.query.v1beta1.PageResponse.toObject(message.pagination, options);
                    return object;
                };

                /**
                 * Converts this QueryPoolBatchSwapMsgsResponse to JSON.
                 * @function toJSON
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgsResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryPoolBatchSwapMsgsResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryPoolBatchSwapMsgsResponse;
            })();

            v1beta1.QueryPoolBatchSwapMsgResponse = (function() {

                /**
                 * Properties of a QueryPoolBatchSwapMsgResponse.
                 * @memberof tendermint.liquidity.v1beta1
                 * @interface IQueryPoolBatchSwapMsgResponse
                 * @property {tendermint.liquidity.v1beta1.ISwapMsgState|null} [swap] QueryPoolBatchSwapMsgResponse swap
                 */

                /**
                 * Constructs a new QueryPoolBatchSwapMsgResponse.
                 * @memberof tendermint.liquidity.v1beta1
                 * @classdesc Represents a QueryPoolBatchSwapMsgResponse.
                 * @implements IQueryPoolBatchSwapMsgResponse
                 * @constructor
                 * @param {tendermint.liquidity.v1beta1.IQueryPoolBatchSwapMsgResponse=} [properties] Properties to set
                 */
                function QueryPoolBatchSwapMsgResponse(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryPoolBatchSwapMsgResponse swap.
                 * @member {tendermint.liquidity.v1beta1.ISwapMsgState|null|undefined} swap
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgResponse
                 * @instance
                 */
                QueryPoolBatchSwapMsgResponse.prototype.swap = null;

                /**
                 * Encodes the specified QueryPoolBatchSwapMsgResponse message. Does not implicitly {@link tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgResponse.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgResponse
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IQueryPoolBatchSwapMsgResponse} message QueryPoolBatchSwapMsgResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryPoolBatchSwapMsgResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.swap != null && Object.hasOwnProperty.call(message, "swap"))
                        $root.tendermint.liquidity.v1beta1.SwapMsgState.encode(message.swap, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified QueryPoolBatchSwapMsgResponse message, length delimited. Does not implicitly {@link tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgResponse
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IQueryPoolBatchSwapMsgResponse} message QueryPoolBatchSwapMsgResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryPoolBatchSwapMsgResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryPoolBatchSwapMsgResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgResponse} QueryPoolBatchSwapMsgResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryPoolBatchSwapMsgResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgResponse();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.swap = $root.tendermint.liquidity.v1beta1.SwapMsgState.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryPoolBatchSwapMsgResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgResponse} QueryPoolBatchSwapMsgResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryPoolBatchSwapMsgResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryPoolBatchSwapMsgResponse message.
                 * @function verify
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryPoolBatchSwapMsgResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.swap != null && message.hasOwnProperty("swap")) {
                        let error = $root.tendermint.liquidity.v1beta1.SwapMsgState.verify(message.swap);
                        if (error)
                            return "swap." + error;
                    }
                    return null;
                };

                /**
                 * Creates a QueryPoolBatchSwapMsgResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgResponse} QueryPoolBatchSwapMsgResponse
                 */
                QueryPoolBatchSwapMsgResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgResponse)
                        return object;
                    let message = new $root.tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgResponse();
                    if (object.swap != null) {
                        if (typeof object.swap !== "object")
                            throw TypeError(".tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgResponse.swap: object expected");
                        message.swap = $root.tendermint.liquidity.v1beta1.SwapMsgState.fromObject(object.swap);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a QueryPoolBatchSwapMsgResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgResponse
                 * @static
                 * @param {tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgResponse} message QueryPoolBatchSwapMsgResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryPoolBatchSwapMsgResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.swap = null;
                    if (message.swap != null && message.hasOwnProperty("swap"))
                        object.swap = $root.tendermint.liquidity.v1beta1.SwapMsgState.toObject(message.swap, options);
                    return object;
                };

                /**
                 * Converts this QueryPoolBatchSwapMsgResponse to JSON.
                 * @function toJSON
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryPoolBatchSwapMsgResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryPoolBatchSwapMsgResponse;
            })();

            v1beta1.QueryPoolBatchDepositMsgsRequest = (function() {

                /**
                 * Properties of a QueryPoolBatchDepositMsgsRequest.
                 * @memberof tendermint.liquidity.v1beta1
                 * @interface IQueryPoolBatchDepositMsgsRequest
                 * @property {Long|null} [pool_id] QueryPoolBatchDepositMsgsRequest pool_id
                 * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QueryPoolBatchDepositMsgsRequest pagination
                 */

                /**
                 * Constructs a new QueryPoolBatchDepositMsgsRequest.
                 * @memberof tendermint.liquidity.v1beta1
                 * @classdesc Represents a QueryPoolBatchDepositMsgsRequest.
                 * @implements IQueryPoolBatchDepositMsgsRequest
                 * @constructor
                 * @param {tendermint.liquidity.v1beta1.IQueryPoolBatchDepositMsgsRequest=} [properties] Properties to set
                 */
                function QueryPoolBatchDepositMsgsRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryPoolBatchDepositMsgsRequest pool_id.
                 * @member {Long} pool_id
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgsRequest
                 * @instance
                 */
                QueryPoolBatchDepositMsgsRequest.prototype.pool_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * QueryPoolBatchDepositMsgsRequest pagination.
                 * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgsRequest
                 * @instance
                 */
                QueryPoolBatchDepositMsgsRequest.prototype.pagination = null;

                /**
                 * Encodes the specified QueryPoolBatchDepositMsgsRequest message. Does not implicitly {@link tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgsRequest
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IQueryPoolBatchDepositMsgsRequest} message QueryPoolBatchDepositMsgsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryPoolBatchDepositMsgsRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.pool_id != null && Object.hasOwnProperty.call(message, "pool_id"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.pool_id);
                    if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageRequest.encode(message.pagination, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified QueryPoolBatchDepositMsgsRequest message, length delimited. Does not implicitly {@link tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgsRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgsRequest
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IQueryPoolBatchDepositMsgsRequest} message QueryPoolBatchDepositMsgsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryPoolBatchDepositMsgsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryPoolBatchDepositMsgsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgsRequest} QueryPoolBatchDepositMsgsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryPoolBatchDepositMsgsRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgsRequest();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.pool_id = reader.uint64();
                            break;
                        case 2:
                            message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryPoolBatchDepositMsgsRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgsRequest} QueryPoolBatchDepositMsgsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryPoolBatchDepositMsgsRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryPoolBatchDepositMsgsRequest message.
                 * @function verify
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgsRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryPoolBatchDepositMsgsRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.pool_id != null && message.hasOwnProperty("pool_id"))
                        if (!$util.isInteger(message.pool_id) && !(message.pool_id && $util.isInteger(message.pool_id.low) && $util.isInteger(message.pool_id.high)))
                            return "pool_id: integer|Long expected";
                    if (message.pagination != null && message.hasOwnProperty("pagination")) {
                        let error = $root.cosmos.base.query.v1beta1.PageRequest.verify(message.pagination);
                        if (error)
                            return "pagination." + error;
                    }
                    return null;
                };

                /**
                 * Creates a QueryPoolBatchDepositMsgsRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgsRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgsRequest} QueryPoolBatchDepositMsgsRequest
                 */
                QueryPoolBatchDepositMsgsRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgsRequest)
                        return object;
                    let message = new $root.tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgsRequest();
                    if (object.pool_id != null)
                        if ($util.Long)
                            (message.pool_id = $util.Long.fromValue(object.pool_id)).unsigned = true;
                        else if (typeof object.pool_id === "string")
                            message.pool_id = parseInt(object.pool_id, 10);
                        else if (typeof object.pool_id === "number")
                            message.pool_id = object.pool_id;
                        else if (typeof object.pool_id === "object")
                            message.pool_id = new $util.LongBits(object.pool_id.low >>> 0, object.pool_id.high >>> 0).toNumber(true);
                    if (object.pagination != null) {
                        if (typeof object.pagination !== "object")
                            throw TypeError(".tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgsRequest.pagination: object expected");
                        message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.fromObject(object.pagination);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a QueryPoolBatchDepositMsgsRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgsRequest
                 * @static
                 * @param {tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgsRequest} message QueryPoolBatchDepositMsgsRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryPoolBatchDepositMsgsRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.pool_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.pool_id = options.longs === String ? "0" : 0;
                        object.pagination = null;
                    }
                    if (message.pool_id != null && message.hasOwnProperty("pool_id"))
                        if (typeof message.pool_id === "number")
                            object.pool_id = options.longs === String ? String(message.pool_id) : message.pool_id;
                        else
                            object.pool_id = options.longs === String ? $util.Long.prototype.toString.call(message.pool_id) : options.longs === Number ? new $util.LongBits(message.pool_id.low >>> 0, message.pool_id.high >>> 0).toNumber(true) : message.pool_id;
                    if (message.pagination != null && message.hasOwnProperty("pagination"))
                        object.pagination = $root.cosmos.base.query.v1beta1.PageRequest.toObject(message.pagination, options);
                    return object;
                };

                /**
                 * Converts this QueryPoolBatchDepositMsgsRequest to JSON.
                 * @function toJSON
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgsRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryPoolBatchDepositMsgsRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryPoolBatchDepositMsgsRequest;
            })();

            v1beta1.QueryPoolBatchDepositMsgRequest = (function() {

                /**
                 * Properties of a QueryPoolBatchDepositMsgRequest.
                 * @memberof tendermint.liquidity.v1beta1
                 * @interface IQueryPoolBatchDepositMsgRequest
                 * @property {Long|null} [pool_id] QueryPoolBatchDepositMsgRequest pool_id
                 * @property {Long|null} [msg_index] QueryPoolBatchDepositMsgRequest msg_index
                 */

                /**
                 * Constructs a new QueryPoolBatchDepositMsgRequest.
                 * @memberof tendermint.liquidity.v1beta1
                 * @classdesc Represents a QueryPoolBatchDepositMsgRequest.
                 * @implements IQueryPoolBatchDepositMsgRequest
                 * @constructor
                 * @param {tendermint.liquidity.v1beta1.IQueryPoolBatchDepositMsgRequest=} [properties] Properties to set
                 */
                function QueryPoolBatchDepositMsgRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryPoolBatchDepositMsgRequest pool_id.
                 * @member {Long} pool_id
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgRequest
                 * @instance
                 */
                QueryPoolBatchDepositMsgRequest.prototype.pool_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * QueryPoolBatchDepositMsgRequest msg_index.
                 * @member {Long} msg_index
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgRequest
                 * @instance
                 */
                QueryPoolBatchDepositMsgRequest.prototype.msg_index = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * Encodes the specified QueryPoolBatchDepositMsgRequest message. Does not implicitly {@link tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgRequest.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgRequest
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IQueryPoolBatchDepositMsgRequest} message QueryPoolBatchDepositMsgRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryPoolBatchDepositMsgRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.pool_id != null && Object.hasOwnProperty.call(message, "pool_id"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.pool_id);
                    if (message.msg_index != null && Object.hasOwnProperty.call(message, "msg_index"))
                        writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.msg_index);
                    return writer;
                };

                /**
                 * Encodes the specified QueryPoolBatchDepositMsgRequest message, length delimited. Does not implicitly {@link tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgRequest
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IQueryPoolBatchDepositMsgRequest} message QueryPoolBatchDepositMsgRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryPoolBatchDepositMsgRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryPoolBatchDepositMsgRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgRequest} QueryPoolBatchDepositMsgRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryPoolBatchDepositMsgRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgRequest();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.pool_id = reader.uint64();
                            break;
                        case 2:
                            message.msg_index = reader.uint64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryPoolBatchDepositMsgRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgRequest} QueryPoolBatchDepositMsgRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryPoolBatchDepositMsgRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryPoolBatchDepositMsgRequest message.
                 * @function verify
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryPoolBatchDepositMsgRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.pool_id != null && message.hasOwnProperty("pool_id"))
                        if (!$util.isInteger(message.pool_id) && !(message.pool_id && $util.isInteger(message.pool_id.low) && $util.isInteger(message.pool_id.high)))
                            return "pool_id: integer|Long expected";
                    if (message.msg_index != null && message.hasOwnProperty("msg_index"))
                        if (!$util.isInteger(message.msg_index) && !(message.msg_index && $util.isInteger(message.msg_index.low) && $util.isInteger(message.msg_index.high)))
                            return "msg_index: integer|Long expected";
                    return null;
                };

                /**
                 * Creates a QueryPoolBatchDepositMsgRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgRequest} QueryPoolBatchDepositMsgRequest
                 */
                QueryPoolBatchDepositMsgRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgRequest)
                        return object;
                    let message = new $root.tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgRequest();
                    if (object.pool_id != null)
                        if ($util.Long)
                            (message.pool_id = $util.Long.fromValue(object.pool_id)).unsigned = true;
                        else if (typeof object.pool_id === "string")
                            message.pool_id = parseInt(object.pool_id, 10);
                        else if (typeof object.pool_id === "number")
                            message.pool_id = object.pool_id;
                        else if (typeof object.pool_id === "object")
                            message.pool_id = new $util.LongBits(object.pool_id.low >>> 0, object.pool_id.high >>> 0).toNumber(true);
                    if (object.msg_index != null)
                        if ($util.Long)
                            (message.msg_index = $util.Long.fromValue(object.msg_index)).unsigned = true;
                        else if (typeof object.msg_index === "string")
                            message.msg_index = parseInt(object.msg_index, 10);
                        else if (typeof object.msg_index === "number")
                            message.msg_index = object.msg_index;
                        else if (typeof object.msg_index === "object")
                            message.msg_index = new $util.LongBits(object.msg_index.low >>> 0, object.msg_index.high >>> 0).toNumber(true);
                    return message;
                };

                /**
                 * Creates a plain object from a QueryPoolBatchDepositMsgRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgRequest
                 * @static
                 * @param {tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgRequest} message QueryPoolBatchDepositMsgRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryPoolBatchDepositMsgRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.pool_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.pool_id = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.msg_index = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.msg_index = options.longs === String ? "0" : 0;
                    }
                    if (message.pool_id != null && message.hasOwnProperty("pool_id"))
                        if (typeof message.pool_id === "number")
                            object.pool_id = options.longs === String ? String(message.pool_id) : message.pool_id;
                        else
                            object.pool_id = options.longs === String ? $util.Long.prototype.toString.call(message.pool_id) : options.longs === Number ? new $util.LongBits(message.pool_id.low >>> 0, message.pool_id.high >>> 0).toNumber(true) : message.pool_id;
                    if (message.msg_index != null && message.hasOwnProperty("msg_index"))
                        if (typeof message.msg_index === "number")
                            object.msg_index = options.longs === String ? String(message.msg_index) : message.msg_index;
                        else
                            object.msg_index = options.longs === String ? $util.Long.prototype.toString.call(message.msg_index) : options.longs === Number ? new $util.LongBits(message.msg_index.low >>> 0, message.msg_index.high >>> 0).toNumber(true) : message.msg_index;
                    return object;
                };

                /**
                 * Converts this QueryPoolBatchDepositMsgRequest to JSON.
                 * @function toJSON
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryPoolBatchDepositMsgRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryPoolBatchDepositMsgRequest;
            })();

            v1beta1.QueryPoolBatchDepositMsgsResponse = (function() {

                /**
                 * Properties of a QueryPoolBatchDepositMsgsResponse.
                 * @memberof tendermint.liquidity.v1beta1
                 * @interface IQueryPoolBatchDepositMsgsResponse
                 * @property {Array.<tendermint.liquidity.v1beta1.IDepositMsgState>|null} [deposits] QueryPoolBatchDepositMsgsResponse deposits
                 * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QueryPoolBatchDepositMsgsResponse pagination
                 */

                /**
                 * Constructs a new QueryPoolBatchDepositMsgsResponse.
                 * @memberof tendermint.liquidity.v1beta1
                 * @classdesc Represents a QueryPoolBatchDepositMsgsResponse.
                 * @implements IQueryPoolBatchDepositMsgsResponse
                 * @constructor
                 * @param {tendermint.liquidity.v1beta1.IQueryPoolBatchDepositMsgsResponse=} [properties] Properties to set
                 */
                function QueryPoolBatchDepositMsgsResponse(properties) {
                    this.deposits = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryPoolBatchDepositMsgsResponse deposits.
                 * @member {Array.<tendermint.liquidity.v1beta1.IDepositMsgState>} deposits
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgsResponse
                 * @instance
                 */
                QueryPoolBatchDepositMsgsResponse.prototype.deposits = $util.emptyArray;

                /**
                 * QueryPoolBatchDepositMsgsResponse pagination.
                 * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgsResponse
                 * @instance
                 */
                QueryPoolBatchDepositMsgsResponse.prototype.pagination = null;

                /**
                 * Encodes the specified QueryPoolBatchDepositMsgsResponse message. Does not implicitly {@link tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgsResponse
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IQueryPoolBatchDepositMsgsResponse} message QueryPoolBatchDepositMsgsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryPoolBatchDepositMsgsResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deposits != null && message.deposits.length)
                        for (let i = 0; i < message.deposits.length; ++i)
                            $root.tendermint.liquidity.v1beta1.DepositMsgState.encode(message.deposits[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageResponse.encode(message.pagination, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified QueryPoolBatchDepositMsgsResponse message, length delimited. Does not implicitly {@link tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgsResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgsResponse
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IQueryPoolBatchDepositMsgsResponse} message QueryPoolBatchDepositMsgsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryPoolBatchDepositMsgsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryPoolBatchDepositMsgsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgsResponse} QueryPoolBatchDepositMsgsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryPoolBatchDepositMsgsResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgsResponse();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.deposits && message.deposits.length))
                                message.deposits = [];
                            message.deposits.push($root.tendermint.liquidity.v1beta1.DepositMsgState.decode(reader, reader.uint32()));
                            break;
                        case 2:
                            message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryPoolBatchDepositMsgsResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgsResponse} QueryPoolBatchDepositMsgsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryPoolBatchDepositMsgsResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryPoolBatchDepositMsgsResponse message.
                 * @function verify
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgsResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryPoolBatchDepositMsgsResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deposits != null && message.hasOwnProperty("deposits")) {
                        if (!Array.isArray(message.deposits))
                            return "deposits: array expected";
                        for (let i = 0; i < message.deposits.length; ++i) {
                            let error = $root.tendermint.liquidity.v1beta1.DepositMsgState.verify(message.deposits[i]);
                            if (error)
                                return "deposits." + error;
                        }
                    }
                    if (message.pagination != null && message.hasOwnProperty("pagination")) {
                        let error = $root.cosmos.base.query.v1beta1.PageResponse.verify(message.pagination);
                        if (error)
                            return "pagination." + error;
                    }
                    return null;
                };

                /**
                 * Creates a QueryPoolBatchDepositMsgsResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgsResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgsResponse} QueryPoolBatchDepositMsgsResponse
                 */
                QueryPoolBatchDepositMsgsResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgsResponse)
                        return object;
                    let message = new $root.tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgsResponse();
                    if (object.deposits) {
                        if (!Array.isArray(object.deposits))
                            throw TypeError(".tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgsResponse.deposits: array expected");
                        message.deposits = [];
                        for (let i = 0; i < object.deposits.length; ++i) {
                            if (typeof object.deposits[i] !== "object")
                                throw TypeError(".tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgsResponse.deposits: object expected");
                            message.deposits[i] = $root.tendermint.liquidity.v1beta1.DepositMsgState.fromObject(object.deposits[i]);
                        }
                    }
                    if (object.pagination != null) {
                        if (typeof object.pagination !== "object")
                            throw TypeError(".tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgsResponse.pagination: object expected");
                        message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.fromObject(object.pagination);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a QueryPoolBatchDepositMsgsResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgsResponse
                 * @static
                 * @param {tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgsResponse} message QueryPoolBatchDepositMsgsResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryPoolBatchDepositMsgsResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.deposits = [];
                    if (options.defaults)
                        object.pagination = null;
                    if (message.deposits && message.deposits.length) {
                        object.deposits = [];
                        for (let j = 0; j < message.deposits.length; ++j)
                            object.deposits[j] = $root.tendermint.liquidity.v1beta1.DepositMsgState.toObject(message.deposits[j], options);
                    }
                    if (message.pagination != null && message.hasOwnProperty("pagination"))
                        object.pagination = $root.cosmos.base.query.v1beta1.PageResponse.toObject(message.pagination, options);
                    return object;
                };

                /**
                 * Converts this QueryPoolBatchDepositMsgsResponse to JSON.
                 * @function toJSON
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgsResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryPoolBatchDepositMsgsResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryPoolBatchDepositMsgsResponse;
            })();

            v1beta1.QueryPoolBatchDepositMsgResponse = (function() {

                /**
                 * Properties of a QueryPoolBatchDepositMsgResponse.
                 * @memberof tendermint.liquidity.v1beta1
                 * @interface IQueryPoolBatchDepositMsgResponse
                 * @property {tendermint.liquidity.v1beta1.IDepositMsgState|null} [deposit] QueryPoolBatchDepositMsgResponse deposit
                 */

                /**
                 * Constructs a new QueryPoolBatchDepositMsgResponse.
                 * @memberof tendermint.liquidity.v1beta1
                 * @classdesc Represents a QueryPoolBatchDepositMsgResponse.
                 * @implements IQueryPoolBatchDepositMsgResponse
                 * @constructor
                 * @param {tendermint.liquidity.v1beta1.IQueryPoolBatchDepositMsgResponse=} [properties] Properties to set
                 */
                function QueryPoolBatchDepositMsgResponse(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryPoolBatchDepositMsgResponse deposit.
                 * @member {tendermint.liquidity.v1beta1.IDepositMsgState|null|undefined} deposit
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgResponse
                 * @instance
                 */
                QueryPoolBatchDepositMsgResponse.prototype.deposit = null;

                /**
                 * Encodes the specified QueryPoolBatchDepositMsgResponse message. Does not implicitly {@link tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgResponse.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgResponse
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IQueryPoolBatchDepositMsgResponse} message QueryPoolBatchDepositMsgResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryPoolBatchDepositMsgResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deposit != null && Object.hasOwnProperty.call(message, "deposit"))
                        $root.tendermint.liquidity.v1beta1.DepositMsgState.encode(message.deposit, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified QueryPoolBatchDepositMsgResponse message, length delimited. Does not implicitly {@link tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgResponse
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IQueryPoolBatchDepositMsgResponse} message QueryPoolBatchDepositMsgResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryPoolBatchDepositMsgResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryPoolBatchDepositMsgResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgResponse} QueryPoolBatchDepositMsgResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryPoolBatchDepositMsgResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgResponse();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.deposit = $root.tendermint.liquidity.v1beta1.DepositMsgState.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryPoolBatchDepositMsgResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgResponse} QueryPoolBatchDepositMsgResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryPoolBatchDepositMsgResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryPoolBatchDepositMsgResponse message.
                 * @function verify
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryPoolBatchDepositMsgResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deposit != null && message.hasOwnProperty("deposit")) {
                        let error = $root.tendermint.liquidity.v1beta1.DepositMsgState.verify(message.deposit);
                        if (error)
                            return "deposit." + error;
                    }
                    return null;
                };

                /**
                 * Creates a QueryPoolBatchDepositMsgResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgResponse} QueryPoolBatchDepositMsgResponse
                 */
                QueryPoolBatchDepositMsgResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgResponse)
                        return object;
                    let message = new $root.tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgResponse();
                    if (object.deposit != null) {
                        if (typeof object.deposit !== "object")
                            throw TypeError(".tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgResponse.deposit: object expected");
                        message.deposit = $root.tendermint.liquidity.v1beta1.DepositMsgState.fromObject(object.deposit);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a QueryPoolBatchDepositMsgResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgResponse
                 * @static
                 * @param {tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgResponse} message QueryPoolBatchDepositMsgResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryPoolBatchDepositMsgResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.deposit = null;
                    if (message.deposit != null && message.hasOwnProperty("deposit"))
                        object.deposit = $root.tendermint.liquidity.v1beta1.DepositMsgState.toObject(message.deposit, options);
                    return object;
                };

                /**
                 * Converts this QueryPoolBatchDepositMsgResponse to JSON.
                 * @function toJSON
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryPoolBatchDepositMsgResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryPoolBatchDepositMsgResponse;
            })();

            v1beta1.QueryPoolBatchWithdrawMsgsRequest = (function() {

                /**
                 * Properties of a QueryPoolBatchWithdrawMsgsRequest.
                 * @memberof tendermint.liquidity.v1beta1
                 * @interface IQueryPoolBatchWithdrawMsgsRequest
                 * @property {Long|null} [pool_id] QueryPoolBatchWithdrawMsgsRequest pool_id
                 * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QueryPoolBatchWithdrawMsgsRequest pagination
                 */

                /**
                 * Constructs a new QueryPoolBatchWithdrawMsgsRequest.
                 * @memberof tendermint.liquidity.v1beta1
                 * @classdesc Represents a QueryPoolBatchWithdrawMsgsRequest.
                 * @implements IQueryPoolBatchWithdrawMsgsRequest
                 * @constructor
                 * @param {tendermint.liquidity.v1beta1.IQueryPoolBatchWithdrawMsgsRequest=} [properties] Properties to set
                 */
                function QueryPoolBatchWithdrawMsgsRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryPoolBatchWithdrawMsgsRequest pool_id.
                 * @member {Long} pool_id
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgsRequest
                 * @instance
                 */
                QueryPoolBatchWithdrawMsgsRequest.prototype.pool_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * QueryPoolBatchWithdrawMsgsRequest pagination.
                 * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgsRequest
                 * @instance
                 */
                QueryPoolBatchWithdrawMsgsRequest.prototype.pagination = null;

                /**
                 * Encodes the specified QueryPoolBatchWithdrawMsgsRequest message. Does not implicitly {@link tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgsRequest
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IQueryPoolBatchWithdrawMsgsRequest} message QueryPoolBatchWithdrawMsgsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryPoolBatchWithdrawMsgsRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.pool_id != null && Object.hasOwnProperty.call(message, "pool_id"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.pool_id);
                    if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageRequest.encode(message.pagination, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified QueryPoolBatchWithdrawMsgsRequest message, length delimited. Does not implicitly {@link tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgsRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgsRequest
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IQueryPoolBatchWithdrawMsgsRequest} message QueryPoolBatchWithdrawMsgsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryPoolBatchWithdrawMsgsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryPoolBatchWithdrawMsgsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgsRequest} QueryPoolBatchWithdrawMsgsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryPoolBatchWithdrawMsgsRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgsRequest();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.pool_id = reader.uint64();
                            break;
                        case 2:
                            message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryPoolBatchWithdrawMsgsRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgsRequest} QueryPoolBatchWithdrawMsgsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryPoolBatchWithdrawMsgsRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryPoolBatchWithdrawMsgsRequest message.
                 * @function verify
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgsRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryPoolBatchWithdrawMsgsRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.pool_id != null && message.hasOwnProperty("pool_id"))
                        if (!$util.isInteger(message.pool_id) && !(message.pool_id && $util.isInteger(message.pool_id.low) && $util.isInteger(message.pool_id.high)))
                            return "pool_id: integer|Long expected";
                    if (message.pagination != null && message.hasOwnProperty("pagination")) {
                        let error = $root.cosmos.base.query.v1beta1.PageRequest.verify(message.pagination);
                        if (error)
                            return "pagination." + error;
                    }
                    return null;
                };

                /**
                 * Creates a QueryPoolBatchWithdrawMsgsRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgsRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgsRequest} QueryPoolBatchWithdrawMsgsRequest
                 */
                QueryPoolBatchWithdrawMsgsRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgsRequest)
                        return object;
                    let message = new $root.tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgsRequest();
                    if (object.pool_id != null)
                        if ($util.Long)
                            (message.pool_id = $util.Long.fromValue(object.pool_id)).unsigned = true;
                        else if (typeof object.pool_id === "string")
                            message.pool_id = parseInt(object.pool_id, 10);
                        else if (typeof object.pool_id === "number")
                            message.pool_id = object.pool_id;
                        else if (typeof object.pool_id === "object")
                            message.pool_id = new $util.LongBits(object.pool_id.low >>> 0, object.pool_id.high >>> 0).toNumber(true);
                    if (object.pagination != null) {
                        if (typeof object.pagination !== "object")
                            throw TypeError(".tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgsRequest.pagination: object expected");
                        message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.fromObject(object.pagination);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a QueryPoolBatchWithdrawMsgsRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgsRequest
                 * @static
                 * @param {tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgsRequest} message QueryPoolBatchWithdrawMsgsRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryPoolBatchWithdrawMsgsRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.pool_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.pool_id = options.longs === String ? "0" : 0;
                        object.pagination = null;
                    }
                    if (message.pool_id != null && message.hasOwnProperty("pool_id"))
                        if (typeof message.pool_id === "number")
                            object.pool_id = options.longs === String ? String(message.pool_id) : message.pool_id;
                        else
                            object.pool_id = options.longs === String ? $util.Long.prototype.toString.call(message.pool_id) : options.longs === Number ? new $util.LongBits(message.pool_id.low >>> 0, message.pool_id.high >>> 0).toNumber(true) : message.pool_id;
                    if (message.pagination != null && message.hasOwnProperty("pagination"))
                        object.pagination = $root.cosmos.base.query.v1beta1.PageRequest.toObject(message.pagination, options);
                    return object;
                };

                /**
                 * Converts this QueryPoolBatchWithdrawMsgsRequest to JSON.
                 * @function toJSON
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgsRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryPoolBatchWithdrawMsgsRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryPoolBatchWithdrawMsgsRequest;
            })();

            v1beta1.QueryPoolBatchWithdrawMsgRequest = (function() {

                /**
                 * Properties of a QueryPoolBatchWithdrawMsgRequest.
                 * @memberof tendermint.liquidity.v1beta1
                 * @interface IQueryPoolBatchWithdrawMsgRequest
                 * @property {Long|null} [pool_id] QueryPoolBatchWithdrawMsgRequest pool_id
                 * @property {Long|null} [msg_index] QueryPoolBatchWithdrawMsgRequest msg_index
                 */

                /**
                 * Constructs a new QueryPoolBatchWithdrawMsgRequest.
                 * @memberof tendermint.liquidity.v1beta1
                 * @classdesc Represents a QueryPoolBatchWithdrawMsgRequest.
                 * @implements IQueryPoolBatchWithdrawMsgRequest
                 * @constructor
                 * @param {tendermint.liquidity.v1beta1.IQueryPoolBatchWithdrawMsgRequest=} [properties] Properties to set
                 */
                function QueryPoolBatchWithdrawMsgRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryPoolBatchWithdrawMsgRequest pool_id.
                 * @member {Long} pool_id
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgRequest
                 * @instance
                 */
                QueryPoolBatchWithdrawMsgRequest.prototype.pool_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * QueryPoolBatchWithdrawMsgRequest msg_index.
                 * @member {Long} msg_index
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgRequest
                 * @instance
                 */
                QueryPoolBatchWithdrawMsgRequest.prototype.msg_index = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * Encodes the specified QueryPoolBatchWithdrawMsgRequest message. Does not implicitly {@link tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgRequest.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgRequest
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IQueryPoolBatchWithdrawMsgRequest} message QueryPoolBatchWithdrawMsgRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryPoolBatchWithdrawMsgRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.pool_id != null && Object.hasOwnProperty.call(message, "pool_id"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.pool_id);
                    if (message.msg_index != null && Object.hasOwnProperty.call(message, "msg_index"))
                        writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.msg_index);
                    return writer;
                };

                /**
                 * Encodes the specified QueryPoolBatchWithdrawMsgRequest message, length delimited. Does not implicitly {@link tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgRequest
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IQueryPoolBatchWithdrawMsgRequest} message QueryPoolBatchWithdrawMsgRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryPoolBatchWithdrawMsgRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryPoolBatchWithdrawMsgRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgRequest} QueryPoolBatchWithdrawMsgRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryPoolBatchWithdrawMsgRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgRequest();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.pool_id = reader.uint64();
                            break;
                        case 2:
                            message.msg_index = reader.uint64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryPoolBatchWithdrawMsgRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgRequest} QueryPoolBatchWithdrawMsgRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryPoolBatchWithdrawMsgRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryPoolBatchWithdrawMsgRequest message.
                 * @function verify
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryPoolBatchWithdrawMsgRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.pool_id != null && message.hasOwnProperty("pool_id"))
                        if (!$util.isInteger(message.pool_id) && !(message.pool_id && $util.isInteger(message.pool_id.low) && $util.isInteger(message.pool_id.high)))
                            return "pool_id: integer|Long expected";
                    if (message.msg_index != null && message.hasOwnProperty("msg_index"))
                        if (!$util.isInteger(message.msg_index) && !(message.msg_index && $util.isInteger(message.msg_index.low) && $util.isInteger(message.msg_index.high)))
                            return "msg_index: integer|Long expected";
                    return null;
                };

                /**
                 * Creates a QueryPoolBatchWithdrawMsgRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgRequest} QueryPoolBatchWithdrawMsgRequest
                 */
                QueryPoolBatchWithdrawMsgRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgRequest)
                        return object;
                    let message = new $root.tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgRequest();
                    if (object.pool_id != null)
                        if ($util.Long)
                            (message.pool_id = $util.Long.fromValue(object.pool_id)).unsigned = true;
                        else if (typeof object.pool_id === "string")
                            message.pool_id = parseInt(object.pool_id, 10);
                        else if (typeof object.pool_id === "number")
                            message.pool_id = object.pool_id;
                        else if (typeof object.pool_id === "object")
                            message.pool_id = new $util.LongBits(object.pool_id.low >>> 0, object.pool_id.high >>> 0).toNumber(true);
                    if (object.msg_index != null)
                        if ($util.Long)
                            (message.msg_index = $util.Long.fromValue(object.msg_index)).unsigned = true;
                        else if (typeof object.msg_index === "string")
                            message.msg_index = parseInt(object.msg_index, 10);
                        else if (typeof object.msg_index === "number")
                            message.msg_index = object.msg_index;
                        else if (typeof object.msg_index === "object")
                            message.msg_index = new $util.LongBits(object.msg_index.low >>> 0, object.msg_index.high >>> 0).toNumber(true);
                    return message;
                };

                /**
                 * Creates a plain object from a QueryPoolBatchWithdrawMsgRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgRequest
                 * @static
                 * @param {tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgRequest} message QueryPoolBatchWithdrawMsgRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryPoolBatchWithdrawMsgRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.pool_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.pool_id = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.msg_index = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.msg_index = options.longs === String ? "0" : 0;
                    }
                    if (message.pool_id != null && message.hasOwnProperty("pool_id"))
                        if (typeof message.pool_id === "number")
                            object.pool_id = options.longs === String ? String(message.pool_id) : message.pool_id;
                        else
                            object.pool_id = options.longs === String ? $util.Long.prototype.toString.call(message.pool_id) : options.longs === Number ? new $util.LongBits(message.pool_id.low >>> 0, message.pool_id.high >>> 0).toNumber(true) : message.pool_id;
                    if (message.msg_index != null && message.hasOwnProperty("msg_index"))
                        if (typeof message.msg_index === "number")
                            object.msg_index = options.longs === String ? String(message.msg_index) : message.msg_index;
                        else
                            object.msg_index = options.longs === String ? $util.Long.prototype.toString.call(message.msg_index) : options.longs === Number ? new $util.LongBits(message.msg_index.low >>> 0, message.msg_index.high >>> 0).toNumber(true) : message.msg_index;
                    return object;
                };

                /**
                 * Converts this QueryPoolBatchWithdrawMsgRequest to JSON.
                 * @function toJSON
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryPoolBatchWithdrawMsgRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryPoolBatchWithdrawMsgRequest;
            })();

            v1beta1.QueryPoolBatchWithdrawMsgsResponse = (function() {

                /**
                 * Properties of a QueryPoolBatchWithdrawMsgsResponse.
                 * @memberof tendermint.liquidity.v1beta1
                 * @interface IQueryPoolBatchWithdrawMsgsResponse
                 * @property {Array.<tendermint.liquidity.v1beta1.IWithdrawMsgState>|null} [withdraws] QueryPoolBatchWithdrawMsgsResponse withdraws
                 * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QueryPoolBatchWithdrawMsgsResponse pagination
                 */

                /**
                 * Constructs a new QueryPoolBatchWithdrawMsgsResponse.
                 * @memberof tendermint.liquidity.v1beta1
                 * @classdesc Represents a QueryPoolBatchWithdrawMsgsResponse.
                 * @implements IQueryPoolBatchWithdrawMsgsResponse
                 * @constructor
                 * @param {tendermint.liquidity.v1beta1.IQueryPoolBatchWithdrawMsgsResponse=} [properties] Properties to set
                 */
                function QueryPoolBatchWithdrawMsgsResponse(properties) {
                    this.withdraws = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryPoolBatchWithdrawMsgsResponse withdraws.
                 * @member {Array.<tendermint.liquidity.v1beta1.IWithdrawMsgState>} withdraws
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgsResponse
                 * @instance
                 */
                QueryPoolBatchWithdrawMsgsResponse.prototype.withdraws = $util.emptyArray;

                /**
                 * QueryPoolBatchWithdrawMsgsResponse pagination.
                 * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgsResponse
                 * @instance
                 */
                QueryPoolBatchWithdrawMsgsResponse.prototype.pagination = null;

                /**
                 * Encodes the specified QueryPoolBatchWithdrawMsgsResponse message. Does not implicitly {@link tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgsResponse
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IQueryPoolBatchWithdrawMsgsResponse} message QueryPoolBatchWithdrawMsgsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryPoolBatchWithdrawMsgsResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.withdraws != null && message.withdraws.length)
                        for (let i = 0; i < message.withdraws.length; ++i)
                            $root.tendermint.liquidity.v1beta1.WithdrawMsgState.encode(message.withdraws[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageResponse.encode(message.pagination, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified QueryPoolBatchWithdrawMsgsResponse message, length delimited. Does not implicitly {@link tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgsResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgsResponse
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IQueryPoolBatchWithdrawMsgsResponse} message QueryPoolBatchWithdrawMsgsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryPoolBatchWithdrawMsgsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryPoolBatchWithdrawMsgsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgsResponse} QueryPoolBatchWithdrawMsgsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryPoolBatchWithdrawMsgsResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgsResponse();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.withdraws && message.withdraws.length))
                                message.withdraws = [];
                            message.withdraws.push($root.tendermint.liquidity.v1beta1.WithdrawMsgState.decode(reader, reader.uint32()));
                            break;
                        case 2:
                            message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryPoolBatchWithdrawMsgsResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgsResponse} QueryPoolBatchWithdrawMsgsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryPoolBatchWithdrawMsgsResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryPoolBatchWithdrawMsgsResponse message.
                 * @function verify
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgsResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryPoolBatchWithdrawMsgsResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.withdraws != null && message.hasOwnProperty("withdraws")) {
                        if (!Array.isArray(message.withdraws))
                            return "withdraws: array expected";
                        for (let i = 0; i < message.withdraws.length; ++i) {
                            let error = $root.tendermint.liquidity.v1beta1.WithdrawMsgState.verify(message.withdraws[i]);
                            if (error)
                                return "withdraws." + error;
                        }
                    }
                    if (message.pagination != null && message.hasOwnProperty("pagination")) {
                        let error = $root.cosmos.base.query.v1beta1.PageResponse.verify(message.pagination);
                        if (error)
                            return "pagination." + error;
                    }
                    return null;
                };

                /**
                 * Creates a QueryPoolBatchWithdrawMsgsResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgsResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgsResponse} QueryPoolBatchWithdrawMsgsResponse
                 */
                QueryPoolBatchWithdrawMsgsResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgsResponse)
                        return object;
                    let message = new $root.tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgsResponse();
                    if (object.withdraws) {
                        if (!Array.isArray(object.withdraws))
                            throw TypeError(".tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgsResponse.withdraws: array expected");
                        message.withdraws = [];
                        for (let i = 0; i < object.withdraws.length; ++i) {
                            if (typeof object.withdraws[i] !== "object")
                                throw TypeError(".tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgsResponse.withdraws: object expected");
                            message.withdraws[i] = $root.tendermint.liquidity.v1beta1.WithdrawMsgState.fromObject(object.withdraws[i]);
                        }
                    }
                    if (object.pagination != null) {
                        if (typeof object.pagination !== "object")
                            throw TypeError(".tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgsResponse.pagination: object expected");
                        message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.fromObject(object.pagination);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a QueryPoolBatchWithdrawMsgsResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgsResponse
                 * @static
                 * @param {tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgsResponse} message QueryPoolBatchWithdrawMsgsResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryPoolBatchWithdrawMsgsResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.withdraws = [];
                    if (options.defaults)
                        object.pagination = null;
                    if (message.withdraws && message.withdraws.length) {
                        object.withdraws = [];
                        for (let j = 0; j < message.withdraws.length; ++j)
                            object.withdraws[j] = $root.tendermint.liquidity.v1beta1.WithdrawMsgState.toObject(message.withdraws[j], options);
                    }
                    if (message.pagination != null && message.hasOwnProperty("pagination"))
                        object.pagination = $root.cosmos.base.query.v1beta1.PageResponse.toObject(message.pagination, options);
                    return object;
                };

                /**
                 * Converts this QueryPoolBatchWithdrawMsgsResponse to JSON.
                 * @function toJSON
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgsResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryPoolBatchWithdrawMsgsResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryPoolBatchWithdrawMsgsResponse;
            })();

            v1beta1.QueryPoolBatchWithdrawMsgResponse = (function() {

                /**
                 * Properties of a QueryPoolBatchWithdrawMsgResponse.
                 * @memberof tendermint.liquidity.v1beta1
                 * @interface IQueryPoolBatchWithdrawMsgResponse
                 * @property {tendermint.liquidity.v1beta1.IWithdrawMsgState|null} [withdraw] QueryPoolBatchWithdrawMsgResponse withdraw
                 */

                /**
                 * Constructs a new QueryPoolBatchWithdrawMsgResponse.
                 * @memberof tendermint.liquidity.v1beta1
                 * @classdesc Represents a QueryPoolBatchWithdrawMsgResponse.
                 * @implements IQueryPoolBatchWithdrawMsgResponse
                 * @constructor
                 * @param {tendermint.liquidity.v1beta1.IQueryPoolBatchWithdrawMsgResponse=} [properties] Properties to set
                 */
                function QueryPoolBatchWithdrawMsgResponse(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryPoolBatchWithdrawMsgResponse withdraw.
                 * @member {tendermint.liquidity.v1beta1.IWithdrawMsgState|null|undefined} withdraw
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgResponse
                 * @instance
                 */
                QueryPoolBatchWithdrawMsgResponse.prototype.withdraw = null;

                /**
                 * Encodes the specified QueryPoolBatchWithdrawMsgResponse message. Does not implicitly {@link tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgResponse.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgResponse
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IQueryPoolBatchWithdrawMsgResponse} message QueryPoolBatchWithdrawMsgResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryPoolBatchWithdrawMsgResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.withdraw != null && Object.hasOwnProperty.call(message, "withdraw"))
                        $root.tendermint.liquidity.v1beta1.WithdrawMsgState.encode(message.withdraw, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified QueryPoolBatchWithdrawMsgResponse message, length delimited. Does not implicitly {@link tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgResponse
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IQueryPoolBatchWithdrawMsgResponse} message QueryPoolBatchWithdrawMsgResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryPoolBatchWithdrawMsgResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryPoolBatchWithdrawMsgResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgResponse} QueryPoolBatchWithdrawMsgResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryPoolBatchWithdrawMsgResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgResponse();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.withdraw = $root.tendermint.liquidity.v1beta1.WithdrawMsgState.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryPoolBatchWithdrawMsgResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgResponse} QueryPoolBatchWithdrawMsgResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryPoolBatchWithdrawMsgResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryPoolBatchWithdrawMsgResponse message.
                 * @function verify
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryPoolBatchWithdrawMsgResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.withdraw != null && message.hasOwnProperty("withdraw")) {
                        let error = $root.tendermint.liquidity.v1beta1.WithdrawMsgState.verify(message.withdraw);
                        if (error)
                            return "withdraw." + error;
                    }
                    return null;
                };

                /**
                 * Creates a QueryPoolBatchWithdrawMsgResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgResponse} QueryPoolBatchWithdrawMsgResponse
                 */
                QueryPoolBatchWithdrawMsgResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgResponse)
                        return object;
                    let message = new $root.tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgResponse();
                    if (object.withdraw != null) {
                        if (typeof object.withdraw !== "object")
                            throw TypeError(".tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgResponse.withdraw: object expected");
                        message.withdraw = $root.tendermint.liquidity.v1beta1.WithdrawMsgState.fromObject(object.withdraw);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a QueryPoolBatchWithdrawMsgResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgResponse
                 * @static
                 * @param {tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgResponse} message QueryPoolBatchWithdrawMsgResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryPoolBatchWithdrawMsgResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.withdraw = null;
                    if (message.withdraw != null && message.hasOwnProperty("withdraw"))
                        object.withdraw = $root.tendermint.liquidity.v1beta1.WithdrawMsgState.toObject(message.withdraw, options);
                    return object;
                };

                /**
                 * Converts this QueryPoolBatchWithdrawMsgResponse to JSON.
                 * @function toJSON
                 * @memberof tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryPoolBatchWithdrawMsgResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryPoolBatchWithdrawMsgResponse;
            })();

            v1beta1.PoolType = (function() {

                /**
                 * Properties of a PoolType.
                 * @memberof tendermint.liquidity.v1beta1
                 * @interface IPoolType
                 * @property {number|null} [id] PoolType id
                 * @property {string|null} [name] PoolType name
                 * @property {number|null} [min_reserve_coin_num] PoolType min_reserve_coin_num
                 * @property {number|null} [max_reserve_coin_num] PoolType max_reserve_coin_num
                 * @property {string|null} [description] PoolType description
                 */

                /**
                 * Constructs a new PoolType.
                 * @memberof tendermint.liquidity.v1beta1
                 * @classdesc Represents a PoolType.
                 * @implements IPoolType
                 * @constructor
                 * @param {tendermint.liquidity.v1beta1.IPoolType=} [properties] Properties to set
                 */
                function PoolType(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * PoolType id.
                 * @member {number} id
                 * @memberof tendermint.liquidity.v1beta1.PoolType
                 * @instance
                 */
                PoolType.prototype.id = 0;

                /**
                 * PoolType name.
                 * @member {string} name
                 * @memberof tendermint.liquidity.v1beta1.PoolType
                 * @instance
                 */
                PoolType.prototype.name = "";

                /**
                 * PoolType min_reserve_coin_num.
                 * @member {number} min_reserve_coin_num
                 * @memberof tendermint.liquidity.v1beta1.PoolType
                 * @instance
                 */
                PoolType.prototype.min_reserve_coin_num = 0;

                /**
                 * PoolType max_reserve_coin_num.
                 * @member {number} max_reserve_coin_num
                 * @memberof tendermint.liquidity.v1beta1.PoolType
                 * @instance
                 */
                PoolType.prototype.max_reserve_coin_num = 0;

                /**
                 * PoolType description.
                 * @member {string} description
                 * @memberof tendermint.liquidity.v1beta1.PoolType
                 * @instance
                 */
                PoolType.prototype.description = "";

                /**
                 * Encodes the specified PoolType message. Does not implicitly {@link tendermint.liquidity.v1beta1.PoolType.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.liquidity.v1beta1.PoolType
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IPoolType} message PoolType message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PoolType.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.id);
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                    if (message.min_reserve_coin_num != null && Object.hasOwnProperty.call(message, "min_reserve_coin_num"))
                        writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.min_reserve_coin_num);
                    if (message.max_reserve_coin_num != null && Object.hasOwnProperty.call(message, "max_reserve_coin_num"))
                        writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.max_reserve_coin_num);
                    if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.description);
                    return writer;
                };

                /**
                 * Encodes the specified PoolType message, length delimited. Does not implicitly {@link tendermint.liquidity.v1beta1.PoolType.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.PoolType
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IPoolType} message PoolType message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PoolType.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a PoolType message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.liquidity.v1beta1.PoolType
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.liquidity.v1beta1.PoolType} PoolType
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PoolType.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.liquidity.v1beta1.PoolType();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.id = reader.uint32();
                            break;
                        case 2:
                            message.name = reader.string();
                            break;
                        case 3:
                            message.min_reserve_coin_num = reader.uint32();
                            break;
                        case 4:
                            message.max_reserve_coin_num = reader.uint32();
                            break;
                        case 5:
                            message.description = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a PoolType message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.PoolType
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.liquidity.v1beta1.PoolType} PoolType
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PoolType.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a PoolType message.
                 * @function verify
                 * @memberof tendermint.liquidity.v1beta1.PoolType
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                PoolType.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.id != null && message.hasOwnProperty("id"))
                        if (!$util.isInteger(message.id))
                            return "id: integer expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.min_reserve_coin_num != null && message.hasOwnProperty("min_reserve_coin_num"))
                        if (!$util.isInteger(message.min_reserve_coin_num))
                            return "min_reserve_coin_num: integer expected";
                    if (message.max_reserve_coin_num != null && message.hasOwnProperty("max_reserve_coin_num"))
                        if (!$util.isInteger(message.max_reserve_coin_num))
                            return "max_reserve_coin_num: integer expected";
                    if (message.description != null && message.hasOwnProperty("description"))
                        if (!$util.isString(message.description))
                            return "description: string expected";
                    return null;
                };

                /**
                 * Creates a PoolType message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.liquidity.v1beta1.PoolType
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.liquidity.v1beta1.PoolType} PoolType
                 */
                PoolType.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.liquidity.v1beta1.PoolType)
                        return object;
                    let message = new $root.tendermint.liquidity.v1beta1.PoolType();
                    if (object.id != null)
                        message.id = object.id >>> 0;
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.min_reserve_coin_num != null)
                        message.min_reserve_coin_num = object.min_reserve_coin_num >>> 0;
                    if (object.max_reserve_coin_num != null)
                        message.max_reserve_coin_num = object.max_reserve_coin_num >>> 0;
                    if (object.description != null)
                        message.description = String(object.description);
                    return message;
                };

                /**
                 * Creates a plain object from a PoolType message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.liquidity.v1beta1.PoolType
                 * @static
                 * @param {tendermint.liquidity.v1beta1.PoolType} message PoolType
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                PoolType.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.id = 0;
                        object.name = "";
                        object.min_reserve_coin_num = 0;
                        object.max_reserve_coin_num = 0;
                        object.description = "";
                    }
                    if (message.id != null && message.hasOwnProperty("id"))
                        object.id = message.id;
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.min_reserve_coin_num != null && message.hasOwnProperty("min_reserve_coin_num"))
                        object.min_reserve_coin_num = message.min_reserve_coin_num;
                    if (message.max_reserve_coin_num != null && message.hasOwnProperty("max_reserve_coin_num"))
                        object.max_reserve_coin_num = message.max_reserve_coin_num;
                    if (message.description != null && message.hasOwnProperty("description"))
                        object.description = message.description;
                    return object;
                };

                /**
                 * Converts this PoolType to JSON.
                 * @function toJSON
                 * @memberof tendermint.liquidity.v1beta1.PoolType
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                PoolType.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return PoolType;
            })();

            v1beta1.Params = (function() {

                /**
                 * Properties of a Params.
                 * @memberof tendermint.liquidity.v1beta1
                 * @interface IParams
                 * @property {Array.<tendermint.liquidity.v1beta1.IPoolType>|null} [pool_types] Params pool_types
                 * @property {string|null} [min_init_deposit_amount] Params min_init_deposit_amount
                 * @property {string|null} [init_pool_coin_mint_amount] Params init_pool_coin_mint_amount
                 * @property {string|null} [max_reserve_coin_amount] Params max_reserve_coin_amount
                 * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [pool_creation_fee] Params pool_creation_fee
                 * @property {string|null} [swap_fee_rate] Params swap_fee_rate
                 * @property {string|null} [withdraw_fee_rate] Params withdraw_fee_rate
                 * @property {string|null} [max_order_amount_ratio] Params max_order_amount_ratio
                 * @property {number|null} [unit_batch_height] Params unit_batch_height
                 * @property {boolean|null} [circuit_breaker_enabled] Params circuit_breaker_enabled
                 */

                /**
                 * Constructs a new Params.
                 * @memberof tendermint.liquidity.v1beta1
                 * @classdesc Represents a Params.
                 * @implements IParams
                 * @constructor
                 * @param {tendermint.liquidity.v1beta1.IParams=} [properties] Properties to set
                 */
                function Params(properties) {
                    this.pool_types = [];
                    this.pool_creation_fee = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Params pool_types.
                 * @member {Array.<tendermint.liquidity.v1beta1.IPoolType>} pool_types
                 * @memberof tendermint.liquidity.v1beta1.Params
                 * @instance
                 */
                Params.prototype.pool_types = $util.emptyArray;

                /**
                 * Params min_init_deposit_amount.
                 * @member {string} min_init_deposit_amount
                 * @memberof tendermint.liquidity.v1beta1.Params
                 * @instance
                 */
                Params.prototype.min_init_deposit_amount = "";

                /**
                 * Params init_pool_coin_mint_amount.
                 * @member {string} init_pool_coin_mint_amount
                 * @memberof tendermint.liquidity.v1beta1.Params
                 * @instance
                 */
                Params.prototype.init_pool_coin_mint_amount = "";

                /**
                 * Params max_reserve_coin_amount.
                 * @member {string} max_reserve_coin_amount
                 * @memberof tendermint.liquidity.v1beta1.Params
                 * @instance
                 */
                Params.prototype.max_reserve_coin_amount = "";

                /**
                 * Params pool_creation_fee.
                 * @member {Array.<cosmos.base.v1beta1.ICoin>} pool_creation_fee
                 * @memberof tendermint.liquidity.v1beta1.Params
                 * @instance
                 */
                Params.prototype.pool_creation_fee = $util.emptyArray;

                /**
                 * Params swap_fee_rate.
                 * @member {string} swap_fee_rate
                 * @memberof tendermint.liquidity.v1beta1.Params
                 * @instance
                 */
                Params.prototype.swap_fee_rate = "";

                /**
                 * Params withdraw_fee_rate.
                 * @member {string} withdraw_fee_rate
                 * @memberof tendermint.liquidity.v1beta1.Params
                 * @instance
                 */
                Params.prototype.withdraw_fee_rate = "";

                /**
                 * Params max_order_amount_ratio.
                 * @member {string} max_order_amount_ratio
                 * @memberof tendermint.liquidity.v1beta1.Params
                 * @instance
                 */
                Params.prototype.max_order_amount_ratio = "";

                /**
                 * Params unit_batch_height.
                 * @member {number} unit_batch_height
                 * @memberof tendermint.liquidity.v1beta1.Params
                 * @instance
                 */
                Params.prototype.unit_batch_height = 0;

                /**
                 * Params circuit_breaker_enabled.
                 * @member {boolean} circuit_breaker_enabled
                 * @memberof tendermint.liquidity.v1beta1.Params
                 * @instance
                 */
                Params.prototype.circuit_breaker_enabled = false;

                /**
                 * Encodes the specified Params message. Does not implicitly {@link tendermint.liquidity.v1beta1.Params.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.liquidity.v1beta1.Params
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IParams} message Params message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Params.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.pool_types != null && message.pool_types.length)
                        for (let i = 0; i < message.pool_types.length; ++i)
                            $root.tendermint.liquidity.v1beta1.PoolType.encode(message.pool_types[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.min_init_deposit_amount != null && Object.hasOwnProperty.call(message, "min_init_deposit_amount"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.min_init_deposit_amount);
                    if (message.init_pool_coin_mint_amount != null && Object.hasOwnProperty.call(message, "init_pool_coin_mint_amount"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.init_pool_coin_mint_amount);
                    if (message.max_reserve_coin_amount != null && Object.hasOwnProperty.call(message, "max_reserve_coin_amount"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.max_reserve_coin_amount);
                    if (message.pool_creation_fee != null && message.pool_creation_fee.length)
                        for (let i = 0; i < message.pool_creation_fee.length; ++i)
                            $root.cosmos.base.v1beta1.Coin.encode(message.pool_creation_fee[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.swap_fee_rate != null && Object.hasOwnProperty.call(message, "swap_fee_rate"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.swap_fee_rate);
                    if (message.withdraw_fee_rate != null && Object.hasOwnProperty.call(message, "withdraw_fee_rate"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.withdraw_fee_rate);
                    if (message.max_order_amount_ratio != null && Object.hasOwnProperty.call(message, "max_order_amount_ratio"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.max_order_amount_ratio);
                    if (message.unit_batch_height != null && Object.hasOwnProperty.call(message, "unit_batch_height"))
                        writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.unit_batch_height);
                    if (message.circuit_breaker_enabled != null && Object.hasOwnProperty.call(message, "circuit_breaker_enabled"))
                        writer.uint32(/* id 10, wireType 0 =*/80).bool(message.circuit_breaker_enabled);
                    return writer;
                };

                /**
                 * Encodes the specified Params message, length delimited. Does not implicitly {@link tendermint.liquidity.v1beta1.Params.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.Params
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IParams} message Params message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Params.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Params message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.liquidity.v1beta1.Params
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.liquidity.v1beta1.Params} Params
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Params.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.liquidity.v1beta1.Params();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.pool_types && message.pool_types.length))
                                message.pool_types = [];
                            message.pool_types.push($root.tendermint.liquidity.v1beta1.PoolType.decode(reader, reader.uint32()));
                            break;
                        case 2:
                            message.min_init_deposit_amount = reader.string();
                            break;
                        case 3:
                            message.init_pool_coin_mint_amount = reader.string();
                            break;
                        case 4:
                            message.max_reserve_coin_amount = reader.string();
                            break;
                        case 5:
                            if (!(message.pool_creation_fee && message.pool_creation_fee.length))
                                message.pool_creation_fee = [];
                            message.pool_creation_fee.push($root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32()));
                            break;
                        case 6:
                            message.swap_fee_rate = reader.string();
                            break;
                        case 7:
                            message.withdraw_fee_rate = reader.string();
                            break;
                        case 8:
                            message.max_order_amount_ratio = reader.string();
                            break;
                        case 9:
                            message.unit_batch_height = reader.uint32();
                            break;
                        case 10:
                            message.circuit_breaker_enabled = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Params message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.Params
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.liquidity.v1beta1.Params} Params
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Params.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Params message.
                 * @function verify
                 * @memberof tendermint.liquidity.v1beta1.Params
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Params.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.pool_types != null && message.hasOwnProperty("pool_types")) {
                        if (!Array.isArray(message.pool_types))
                            return "pool_types: array expected";
                        for (let i = 0; i < message.pool_types.length; ++i) {
                            let error = $root.tendermint.liquidity.v1beta1.PoolType.verify(message.pool_types[i]);
                            if (error)
                                return "pool_types." + error;
                        }
                    }
                    if (message.min_init_deposit_amount != null && message.hasOwnProperty("min_init_deposit_amount"))
                        if (!$util.isString(message.min_init_deposit_amount))
                            return "min_init_deposit_amount: string expected";
                    if (message.init_pool_coin_mint_amount != null && message.hasOwnProperty("init_pool_coin_mint_amount"))
                        if (!$util.isString(message.init_pool_coin_mint_amount))
                            return "init_pool_coin_mint_amount: string expected";
                    if (message.max_reserve_coin_amount != null && message.hasOwnProperty("max_reserve_coin_amount"))
                        if (!$util.isString(message.max_reserve_coin_amount))
                            return "max_reserve_coin_amount: string expected";
                    if (message.pool_creation_fee != null && message.hasOwnProperty("pool_creation_fee")) {
                        if (!Array.isArray(message.pool_creation_fee))
                            return "pool_creation_fee: array expected";
                        for (let i = 0; i < message.pool_creation_fee.length; ++i) {
                            let error = $root.cosmos.base.v1beta1.Coin.verify(message.pool_creation_fee[i]);
                            if (error)
                                return "pool_creation_fee." + error;
                        }
                    }
                    if (message.swap_fee_rate != null && message.hasOwnProperty("swap_fee_rate"))
                        if (!$util.isString(message.swap_fee_rate))
                            return "swap_fee_rate: string expected";
                    if (message.withdraw_fee_rate != null && message.hasOwnProperty("withdraw_fee_rate"))
                        if (!$util.isString(message.withdraw_fee_rate))
                            return "withdraw_fee_rate: string expected";
                    if (message.max_order_amount_ratio != null && message.hasOwnProperty("max_order_amount_ratio"))
                        if (!$util.isString(message.max_order_amount_ratio))
                            return "max_order_amount_ratio: string expected";
                    if (message.unit_batch_height != null && message.hasOwnProperty("unit_batch_height"))
                        if (!$util.isInteger(message.unit_batch_height))
                            return "unit_batch_height: integer expected";
                    if (message.circuit_breaker_enabled != null && message.hasOwnProperty("circuit_breaker_enabled"))
                        if (typeof message.circuit_breaker_enabled !== "boolean")
                            return "circuit_breaker_enabled: boolean expected";
                    return null;
                };

                /**
                 * Creates a Params message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.liquidity.v1beta1.Params
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.liquidity.v1beta1.Params} Params
                 */
                Params.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.liquidity.v1beta1.Params)
                        return object;
                    let message = new $root.tendermint.liquidity.v1beta1.Params();
                    if (object.pool_types) {
                        if (!Array.isArray(object.pool_types))
                            throw TypeError(".tendermint.liquidity.v1beta1.Params.pool_types: array expected");
                        message.pool_types = [];
                        for (let i = 0; i < object.pool_types.length; ++i) {
                            if (typeof object.pool_types[i] !== "object")
                                throw TypeError(".tendermint.liquidity.v1beta1.Params.pool_types: object expected");
                            message.pool_types[i] = $root.tendermint.liquidity.v1beta1.PoolType.fromObject(object.pool_types[i]);
                        }
                    }
                    if (object.min_init_deposit_amount != null)
                        message.min_init_deposit_amount = String(object.min_init_deposit_amount);
                    if (object.init_pool_coin_mint_amount != null)
                        message.init_pool_coin_mint_amount = String(object.init_pool_coin_mint_amount);
                    if (object.max_reserve_coin_amount != null)
                        message.max_reserve_coin_amount = String(object.max_reserve_coin_amount);
                    if (object.pool_creation_fee) {
                        if (!Array.isArray(object.pool_creation_fee))
                            throw TypeError(".tendermint.liquidity.v1beta1.Params.pool_creation_fee: array expected");
                        message.pool_creation_fee = [];
                        for (let i = 0; i < object.pool_creation_fee.length; ++i) {
                            if (typeof object.pool_creation_fee[i] !== "object")
                                throw TypeError(".tendermint.liquidity.v1beta1.Params.pool_creation_fee: object expected");
                            message.pool_creation_fee[i] = $root.cosmos.base.v1beta1.Coin.fromObject(object.pool_creation_fee[i]);
                        }
                    }
                    if (object.swap_fee_rate != null)
                        message.swap_fee_rate = String(object.swap_fee_rate);
                    if (object.withdraw_fee_rate != null)
                        message.withdraw_fee_rate = String(object.withdraw_fee_rate);
                    if (object.max_order_amount_ratio != null)
                        message.max_order_amount_ratio = String(object.max_order_amount_ratio);
                    if (object.unit_batch_height != null)
                        message.unit_batch_height = object.unit_batch_height >>> 0;
                    if (object.circuit_breaker_enabled != null)
                        message.circuit_breaker_enabled = Boolean(object.circuit_breaker_enabled);
                    return message;
                };

                /**
                 * Creates a plain object from a Params message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.liquidity.v1beta1.Params
                 * @static
                 * @param {tendermint.liquidity.v1beta1.Params} message Params
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Params.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults) {
                        object.pool_types = [];
                        object.pool_creation_fee = [];
                    }
                    if (options.defaults) {
                        object.min_init_deposit_amount = "";
                        object.init_pool_coin_mint_amount = "";
                        object.max_reserve_coin_amount = "";
                        object.swap_fee_rate = "";
                        object.withdraw_fee_rate = "";
                        object.max_order_amount_ratio = "";
                        object.unit_batch_height = 0;
                        object.circuit_breaker_enabled = false;
                    }
                    if (message.pool_types && message.pool_types.length) {
                        object.pool_types = [];
                        for (let j = 0; j < message.pool_types.length; ++j)
                            object.pool_types[j] = $root.tendermint.liquidity.v1beta1.PoolType.toObject(message.pool_types[j], options);
                    }
                    if (message.min_init_deposit_amount != null && message.hasOwnProperty("min_init_deposit_amount"))
                        object.min_init_deposit_amount = message.min_init_deposit_amount;
                    if (message.init_pool_coin_mint_amount != null && message.hasOwnProperty("init_pool_coin_mint_amount"))
                        object.init_pool_coin_mint_amount = message.init_pool_coin_mint_amount;
                    if (message.max_reserve_coin_amount != null && message.hasOwnProperty("max_reserve_coin_amount"))
                        object.max_reserve_coin_amount = message.max_reserve_coin_amount;
                    if (message.pool_creation_fee && message.pool_creation_fee.length) {
                        object.pool_creation_fee = [];
                        for (let j = 0; j < message.pool_creation_fee.length; ++j)
                            object.pool_creation_fee[j] = $root.cosmos.base.v1beta1.Coin.toObject(message.pool_creation_fee[j], options);
                    }
                    if (message.swap_fee_rate != null && message.hasOwnProperty("swap_fee_rate"))
                        object.swap_fee_rate = message.swap_fee_rate;
                    if (message.withdraw_fee_rate != null && message.hasOwnProperty("withdraw_fee_rate"))
                        object.withdraw_fee_rate = message.withdraw_fee_rate;
                    if (message.max_order_amount_ratio != null && message.hasOwnProperty("max_order_amount_ratio"))
                        object.max_order_amount_ratio = message.max_order_amount_ratio;
                    if (message.unit_batch_height != null && message.hasOwnProperty("unit_batch_height"))
                        object.unit_batch_height = message.unit_batch_height;
                    if (message.circuit_breaker_enabled != null && message.hasOwnProperty("circuit_breaker_enabled"))
                        object.circuit_breaker_enabled = message.circuit_breaker_enabled;
                    return object;
                };

                /**
                 * Converts this Params to JSON.
                 * @function toJSON
                 * @memberof tendermint.liquidity.v1beta1.Params
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Params.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Params;
            })();

            v1beta1.Pool = (function() {

                /**
                 * Properties of a Pool.
                 * @memberof tendermint.liquidity.v1beta1
                 * @interface IPool
                 * @property {Long|null} [id] Pool id
                 * @property {number|null} [type_id] Pool type_id
                 * @property {Array.<string>|null} [reserve_coin_denoms] Pool reserve_coin_denoms
                 * @property {string|null} [reserve_account_address] Pool reserve_account_address
                 * @property {string|null} [pool_coin_denom] Pool pool_coin_denom
                 */

                /**
                 * Constructs a new Pool.
                 * @memberof tendermint.liquidity.v1beta1
                 * @classdesc Represents a Pool.
                 * @implements IPool
                 * @constructor
                 * @param {tendermint.liquidity.v1beta1.IPool=} [properties] Properties to set
                 */
                function Pool(properties) {
                    this.reserve_coin_denoms = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Pool id.
                 * @member {Long} id
                 * @memberof tendermint.liquidity.v1beta1.Pool
                 * @instance
                 */
                Pool.prototype.id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * Pool type_id.
                 * @member {number} type_id
                 * @memberof tendermint.liquidity.v1beta1.Pool
                 * @instance
                 */
                Pool.prototype.type_id = 0;

                /**
                 * Pool reserve_coin_denoms.
                 * @member {Array.<string>} reserve_coin_denoms
                 * @memberof tendermint.liquidity.v1beta1.Pool
                 * @instance
                 */
                Pool.prototype.reserve_coin_denoms = $util.emptyArray;

                /**
                 * Pool reserve_account_address.
                 * @member {string} reserve_account_address
                 * @memberof tendermint.liquidity.v1beta1.Pool
                 * @instance
                 */
                Pool.prototype.reserve_account_address = "";

                /**
                 * Pool pool_coin_denom.
                 * @member {string} pool_coin_denom
                 * @memberof tendermint.liquidity.v1beta1.Pool
                 * @instance
                 */
                Pool.prototype.pool_coin_denom = "";

                /**
                 * Encodes the specified Pool message. Does not implicitly {@link tendermint.liquidity.v1beta1.Pool.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.liquidity.v1beta1.Pool
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IPool} message Pool message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Pool.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.id);
                    if (message.type_id != null && Object.hasOwnProperty.call(message, "type_id"))
                        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.type_id);
                    if (message.reserve_coin_denoms != null && message.reserve_coin_denoms.length)
                        for (let i = 0; i < message.reserve_coin_denoms.length; ++i)
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.reserve_coin_denoms[i]);
                    if (message.reserve_account_address != null && Object.hasOwnProperty.call(message, "reserve_account_address"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.reserve_account_address);
                    if (message.pool_coin_denom != null && Object.hasOwnProperty.call(message, "pool_coin_denom"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.pool_coin_denom);
                    return writer;
                };

                /**
                 * Encodes the specified Pool message, length delimited. Does not implicitly {@link tendermint.liquidity.v1beta1.Pool.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.Pool
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IPool} message Pool message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Pool.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Pool message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.liquidity.v1beta1.Pool
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.liquidity.v1beta1.Pool} Pool
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Pool.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.liquidity.v1beta1.Pool();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.id = reader.uint64();
                            break;
                        case 2:
                            message.type_id = reader.uint32();
                            break;
                        case 3:
                            if (!(message.reserve_coin_denoms && message.reserve_coin_denoms.length))
                                message.reserve_coin_denoms = [];
                            message.reserve_coin_denoms.push(reader.string());
                            break;
                        case 4:
                            message.reserve_account_address = reader.string();
                            break;
                        case 5:
                            message.pool_coin_denom = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Pool message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.Pool
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.liquidity.v1beta1.Pool} Pool
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Pool.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Pool message.
                 * @function verify
                 * @memberof tendermint.liquidity.v1beta1.Pool
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Pool.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.id != null && message.hasOwnProperty("id"))
                        if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))
                            return "id: integer|Long expected";
                    if (message.type_id != null && message.hasOwnProperty("type_id"))
                        if (!$util.isInteger(message.type_id))
                            return "type_id: integer expected";
                    if (message.reserve_coin_denoms != null && message.hasOwnProperty("reserve_coin_denoms")) {
                        if (!Array.isArray(message.reserve_coin_denoms))
                            return "reserve_coin_denoms: array expected";
                        for (let i = 0; i < message.reserve_coin_denoms.length; ++i)
                            if (!$util.isString(message.reserve_coin_denoms[i]))
                                return "reserve_coin_denoms: string[] expected";
                    }
                    if (message.reserve_account_address != null && message.hasOwnProperty("reserve_account_address"))
                        if (!$util.isString(message.reserve_account_address))
                            return "reserve_account_address: string expected";
                    if (message.pool_coin_denom != null && message.hasOwnProperty("pool_coin_denom"))
                        if (!$util.isString(message.pool_coin_denom))
                            return "pool_coin_denom: string expected";
                    return null;
                };

                /**
                 * Creates a Pool message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.liquidity.v1beta1.Pool
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.liquidity.v1beta1.Pool} Pool
                 */
                Pool.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.liquidity.v1beta1.Pool)
                        return object;
                    let message = new $root.tendermint.liquidity.v1beta1.Pool();
                    if (object.id != null)
                        if ($util.Long)
                            (message.id = $util.Long.fromValue(object.id)).unsigned = true;
                        else if (typeof object.id === "string")
                            message.id = parseInt(object.id, 10);
                        else if (typeof object.id === "number")
                            message.id = object.id;
                        else if (typeof object.id === "object")
                            message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber(true);
                    if (object.type_id != null)
                        message.type_id = object.type_id >>> 0;
                    if (object.reserve_coin_denoms) {
                        if (!Array.isArray(object.reserve_coin_denoms))
                            throw TypeError(".tendermint.liquidity.v1beta1.Pool.reserve_coin_denoms: array expected");
                        message.reserve_coin_denoms = [];
                        for (let i = 0; i < object.reserve_coin_denoms.length; ++i)
                            message.reserve_coin_denoms[i] = String(object.reserve_coin_denoms[i]);
                    }
                    if (object.reserve_account_address != null)
                        message.reserve_account_address = String(object.reserve_account_address);
                    if (object.pool_coin_denom != null)
                        message.pool_coin_denom = String(object.pool_coin_denom);
                    return message;
                };

                /**
                 * Creates a plain object from a Pool message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.liquidity.v1beta1.Pool
                 * @static
                 * @param {tendermint.liquidity.v1beta1.Pool} message Pool
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Pool.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.reserve_coin_denoms = [];
                    if (options.defaults) {
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.id = options.longs === String ? "0" : 0;
                        object.type_id = 0;
                        object.reserve_account_address = "";
                        object.pool_coin_denom = "";
                    }
                    if (message.id != null && message.hasOwnProperty("id"))
                        if (typeof message.id === "number")
                            object.id = options.longs === String ? String(message.id) : message.id;
                        else
                            object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber(true) : message.id;
                    if (message.type_id != null && message.hasOwnProperty("type_id"))
                        object.type_id = message.type_id;
                    if (message.reserve_coin_denoms && message.reserve_coin_denoms.length) {
                        object.reserve_coin_denoms = [];
                        for (let j = 0; j < message.reserve_coin_denoms.length; ++j)
                            object.reserve_coin_denoms[j] = message.reserve_coin_denoms[j];
                    }
                    if (message.reserve_account_address != null && message.hasOwnProperty("reserve_account_address"))
                        object.reserve_account_address = message.reserve_account_address;
                    if (message.pool_coin_denom != null && message.hasOwnProperty("pool_coin_denom"))
                        object.pool_coin_denom = message.pool_coin_denom;
                    return object;
                };

                /**
                 * Converts this Pool to JSON.
                 * @function toJSON
                 * @memberof tendermint.liquidity.v1beta1.Pool
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Pool.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Pool;
            })();

            v1beta1.PoolMetadata = (function() {

                /**
                 * Properties of a PoolMetadata.
                 * @memberof tendermint.liquidity.v1beta1
                 * @interface IPoolMetadata
                 * @property {Long|null} [pool_id] PoolMetadata pool_id
                 * @property {cosmos.base.v1beta1.ICoin|null} [pool_coin_total_supply] PoolMetadata pool_coin_total_supply
                 * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [reserve_coins] PoolMetadata reserve_coins
                 */

                /**
                 * Constructs a new PoolMetadata.
                 * @memberof tendermint.liquidity.v1beta1
                 * @classdesc Represents a PoolMetadata.
                 * @implements IPoolMetadata
                 * @constructor
                 * @param {tendermint.liquidity.v1beta1.IPoolMetadata=} [properties] Properties to set
                 */
                function PoolMetadata(properties) {
                    this.reserve_coins = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * PoolMetadata pool_id.
                 * @member {Long} pool_id
                 * @memberof tendermint.liquidity.v1beta1.PoolMetadata
                 * @instance
                 */
                PoolMetadata.prototype.pool_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * PoolMetadata pool_coin_total_supply.
                 * @member {cosmos.base.v1beta1.ICoin|null|undefined} pool_coin_total_supply
                 * @memberof tendermint.liquidity.v1beta1.PoolMetadata
                 * @instance
                 */
                PoolMetadata.prototype.pool_coin_total_supply = null;

                /**
                 * PoolMetadata reserve_coins.
                 * @member {Array.<cosmos.base.v1beta1.ICoin>} reserve_coins
                 * @memberof tendermint.liquidity.v1beta1.PoolMetadata
                 * @instance
                 */
                PoolMetadata.prototype.reserve_coins = $util.emptyArray;

                /**
                 * Encodes the specified PoolMetadata message. Does not implicitly {@link tendermint.liquidity.v1beta1.PoolMetadata.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.liquidity.v1beta1.PoolMetadata
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IPoolMetadata} message PoolMetadata message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PoolMetadata.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.pool_id != null && Object.hasOwnProperty.call(message, "pool_id"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.pool_id);
                    if (message.pool_coin_total_supply != null && Object.hasOwnProperty.call(message, "pool_coin_total_supply"))
                        $root.cosmos.base.v1beta1.Coin.encode(message.pool_coin_total_supply, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.reserve_coins != null && message.reserve_coins.length)
                        for (let i = 0; i < message.reserve_coins.length; ++i)
                            $root.cosmos.base.v1beta1.Coin.encode(message.reserve_coins[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified PoolMetadata message, length delimited. Does not implicitly {@link tendermint.liquidity.v1beta1.PoolMetadata.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.PoolMetadata
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IPoolMetadata} message PoolMetadata message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PoolMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a PoolMetadata message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.liquidity.v1beta1.PoolMetadata
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.liquidity.v1beta1.PoolMetadata} PoolMetadata
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PoolMetadata.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.liquidity.v1beta1.PoolMetadata();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.pool_id = reader.uint64();
                            break;
                        case 2:
                            message.pool_coin_total_supply = $root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32());
                            break;
                        case 3:
                            if (!(message.reserve_coins && message.reserve_coins.length))
                                message.reserve_coins = [];
                            message.reserve_coins.push($root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a PoolMetadata message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.PoolMetadata
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.liquidity.v1beta1.PoolMetadata} PoolMetadata
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PoolMetadata.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a PoolMetadata message.
                 * @function verify
                 * @memberof tendermint.liquidity.v1beta1.PoolMetadata
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                PoolMetadata.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.pool_id != null && message.hasOwnProperty("pool_id"))
                        if (!$util.isInteger(message.pool_id) && !(message.pool_id && $util.isInteger(message.pool_id.low) && $util.isInteger(message.pool_id.high)))
                            return "pool_id: integer|Long expected";
                    if (message.pool_coin_total_supply != null && message.hasOwnProperty("pool_coin_total_supply")) {
                        let error = $root.cosmos.base.v1beta1.Coin.verify(message.pool_coin_total_supply);
                        if (error)
                            return "pool_coin_total_supply." + error;
                    }
                    if (message.reserve_coins != null && message.hasOwnProperty("reserve_coins")) {
                        if (!Array.isArray(message.reserve_coins))
                            return "reserve_coins: array expected";
                        for (let i = 0; i < message.reserve_coins.length; ++i) {
                            let error = $root.cosmos.base.v1beta1.Coin.verify(message.reserve_coins[i]);
                            if (error)
                                return "reserve_coins." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a PoolMetadata message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.liquidity.v1beta1.PoolMetadata
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.liquidity.v1beta1.PoolMetadata} PoolMetadata
                 */
                PoolMetadata.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.liquidity.v1beta1.PoolMetadata)
                        return object;
                    let message = new $root.tendermint.liquidity.v1beta1.PoolMetadata();
                    if (object.pool_id != null)
                        if ($util.Long)
                            (message.pool_id = $util.Long.fromValue(object.pool_id)).unsigned = true;
                        else if (typeof object.pool_id === "string")
                            message.pool_id = parseInt(object.pool_id, 10);
                        else if (typeof object.pool_id === "number")
                            message.pool_id = object.pool_id;
                        else if (typeof object.pool_id === "object")
                            message.pool_id = new $util.LongBits(object.pool_id.low >>> 0, object.pool_id.high >>> 0).toNumber(true);
                    if (object.pool_coin_total_supply != null) {
                        if (typeof object.pool_coin_total_supply !== "object")
                            throw TypeError(".tendermint.liquidity.v1beta1.PoolMetadata.pool_coin_total_supply: object expected");
                        message.pool_coin_total_supply = $root.cosmos.base.v1beta1.Coin.fromObject(object.pool_coin_total_supply);
                    }
                    if (object.reserve_coins) {
                        if (!Array.isArray(object.reserve_coins))
                            throw TypeError(".tendermint.liquidity.v1beta1.PoolMetadata.reserve_coins: array expected");
                        message.reserve_coins = [];
                        for (let i = 0; i < object.reserve_coins.length; ++i) {
                            if (typeof object.reserve_coins[i] !== "object")
                                throw TypeError(".tendermint.liquidity.v1beta1.PoolMetadata.reserve_coins: object expected");
                            message.reserve_coins[i] = $root.cosmos.base.v1beta1.Coin.fromObject(object.reserve_coins[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a PoolMetadata message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.liquidity.v1beta1.PoolMetadata
                 * @static
                 * @param {tendermint.liquidity.v1beta1.PoolMetadata} message PoolMetadata
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                PoolMetadata.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.reserve_coins = [];
                    if (options.defaults) {
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.pool_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.pool_id = options.longs === String ? "0" : 0;
                        object.pool_coin_total_supply = null;
                    }
                    if (message.pool_id != null && message.hasOwnProperty("pool_id"))
                        if (typeof message.pool_id === "number")
                            object.pool_id = options.longs === String ? String(message.pool_id) : message.pool_id;
                        else
                            object.pool_id = options.longs === String ? $util.Long.prototype.toString.call(message.pool_id) : options.longs === Number ? new $util.LongBits(message.pool_id.low >>> 0, message.pool_id.high >>> 0).toNumber(true) : message.pool_id;
                    if (message.pool_coin_total_supply != null && message.hasOwnProperty("pool_coin_total_supply"))
                        object.pool_coin_total_supply = $root.cosmos.base.v1beta1.Coin.toObject(message.pool_coin_total_supply, options);
                    if (message.reserve_coins && message.reserve_coins.length) {
                        object.reserve_coins = [];
                        for (let j = 0; j < message.reserve_coins.length; ++j)
                            object.reserve_coins[j] = $root.cosmos.base.v1beta1.Coin.toObject(message.reserve_coins[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this PoolMetadata to JSON.
                 * @function toJSON
                 * @memberof tendermint.liquidity.v1beta1.PoolMetadata
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                PoolMetadata.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return PoolMetadata;
            })();

            v1beta1.PoolBatch = (function() {

                /**
                 * Properties of a PoolBatch.
                 * @memberof tendermint.liquidity.v1beta1
                 * @interface IPoolBatch
                 * @property {Long|null} [pool_id] PoolBatch pool_id
                 * @property {Long|null} [index] PoolBatch index
                 * @property {Long|null} [begin_height] PoolBatch begin_height
                 * @property {Long|null} [deposit_msg_index] PoolBatch deposit_msg_index
                 * @property {Long|null} [withdraw_msg_index] PoolBatch withdraw_msg_index
                 * @property {Long|null} [swap_msg_index] PoolBatch swap_msg_index
                 * @property {boolean|null} [executed] PoolBatch executed
                 */

                /**
                 * Constructs a new PoolBatch.
                 * @memberof tendermint.liquidity.v1beta1
                 * @classdesc Represents a PoolBatch.
                 * @implements IPoolBatch
                 * @constructor
                 * @param {tendermint.liquidity.v1beta1.IPoolBatch=} [properties] Properties to set
                 */
                function PoolBatch(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * PoolBatch pool_id.
                 * @member {Long} pool_id
                 * @memberof tendermint.liquidity.v1beta1.PoolBatch
                 * @instance
                 */
                PoolBatch.prototype.pool_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * PoolBatch index.
                 * @member {Long} index
                 * @memberof tendermint.liquidity.v1beta1.PoolBatch
                 * @instance
                 */
                PoolBatch.prototype.index = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * PoolBatch begin_height.
                 * @member {Long} begin_height
                 * @memberof tendermint.liquidity.v1beta1.PoolBatch
                 * @instance
                 */
                PoolBatch.prototype.begin_height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * PoolBatch deposit_msg_index.
                 * @member {Long} deposit_msg_index
                 * @memberof tendermint.liquidity.v1beta1.PoolBatch
                 * @instance
                 */
                PoolBatch.prototype.deposit_msg_index = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * PoolBatch withdraw_msg_index.
                 * @member {Long} withdraw_msg_index
                 * @memberof tendermint.liquidity.v1beta1.PoolBatch
                 * @instance
                 */
                PoolBatch.prototype.withdraw_msg_index = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * PoolBatch swap_msg_index.
                 * @member {Long} swap_msg_index
                 * @memberof tendermint.liquidity.v1beta1.PoolBatch
                 * @instance
                 */
                PoolBatch.prototype.swap_msg_index = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * PoolBatch executed.
                 * @member {boolean} executed
                 * @memberof tendermint.liquidity.v1beta1.PoolBatch
                 * @instance
                 */
                PoolBatch.prototype.executed = false;

                /**
                 * Encodes the specified PoolBatch message. Does not implicitly {@link tendermint.liquidity.v1beta1.PoolBatch.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.liquidity.v1beta1.PoolBatch
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IPoolBatch} message PoolBatch message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PoolBatch.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.pool_id != null && Object.hasOwnProperty.call(message, "pool_id"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.pool_id);
                    if (message.index != null && Object.hasOwnProperty.call(message, "index"))
                        writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.index);
                    if (message.begin_height != null && Object.hasOwnProperty.call(message, "begin_height"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int64(message.begin_height);
                    if (message.deposit_msg_index != null && Object.hasOwnProperty.call(message, "deposit_msg_index"))
                        writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.deposit_msg_index);
                    if (message.withdraw_msg_index != null && Object.hasOwnProperty.call(message, "withdraw_msg_index"))
                        writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.withdraw_msg_index);
                    if (message.swap_msg_index != null && Object.hasOwnProperty.call(message, "swap_msg_index"))
                        writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.swap_msg_index);
                    if (message.executed != null && Object.hasOwnProperty.call(message, "executed"))
                        writer.uint32(/* id 7, wireType 0 =*/56).bool(message.executed);
                    return writer;
                };

                /**
                 * Encodes the specified PoolBatch message, length delimited. Does not implicitly {@link tendermint.liquidity.v1beta1.PoolBatch.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.PoolBatch
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IPoolBatch} message PoolBatch message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PoolBatch.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a PoolBatch message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.liquidity.v1beta1.PoolBatch
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.liquidity.v1beta1.PoolBatch} PoolBatch
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PoolBatch.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.liquidity.v1beta1.PoolBatch();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.pool_id = reader.uint64();
                            break;
                        case 2:
                            message.index = reader.uint64();
                            break;
                        case 3:
                            message.begin_height = reader.int64();
                            break;
                        case 4:
                            message.deposit_msg_index = reader.uint64();
                            break;
                        case 5:
                            message.withdraw_msg_index = reader.uint64();
                            break;
                        case 6:
                            message.swap_msg_index = reader.uint64();
                            break;
                        case 7:
                            message.executed = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a PoolBatch message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.PoolBatch
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.liquidity.v1beta1.PoolBatch} PoolBatch
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PoolBatch.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a PoolBatch message.
                 * @function verify
                 * @memberof tendermint.liquidity.v1beta1.PoolBatch
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                PoolBatch.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.pool_id != null && message.hasOwnProperty("pool_id"))
                        if (!$util.isInteger(message.pool_id) && !(message.pool_id && $util.isInteger(message.pool_id.low) && $util.isInteger(message.pool_id.high)))
                            return "pool_id: integer|Long expected";
                    if (message.index != null && message.hasOwnProperty("index"))
                        if (!$util.isInteger(message.index) && !(message.index && $util.isInteger(message.index.low) && $util.isInteger(message.index.high)))
                            return "index: integer|Long expected";
                    if (message.begin_height != null && message.hasOwnProperty("begin_height"))
                        if (!$util.isInteger(message.begin_height) && !(message.begin_height && $util.isInteger(message.begin_height.low) && $util.isInteger(message.begin_height.high)))
                            return "begin_height: integer|Long expected";
                    if (message.deposit_msg_index != null && message.hasOwnProperty("deposit_msg_index"))
                        if (!$util.isInteger(message.deposit_msg_index) && !(message.deposit_msg_index && $util.isInteger(message.deposit_msg_index.low) && $util.isInteger(message.deposit_msg_index.high)))
                            return "deposit_msg_index: integer|Long expected";
                    if (message.withdraw_msg_index != null && message.hasOwnProperty("withdraw_msg_index"))
                        if (!$util.isInteger(message.withdraw_msg_index) && !(message.withdraw_msg_index && $util.isInteger(message.withdraw_msg_index.low) && $util.isInteger(message.withdraw_msg_index.high)))
                            return "withdraw_msg_index: integer|Long expected";
                    if (message.swap_msg_index != null && message.hasOwnProperty("swap_msg_index"))
                        if (!$util.isInteger(message.swap_msg_index) && !(message.swap_msg_index && $util.isInteger(message.swap_msg_index.low) && $util.isInteger(message.swap_msg_index.high)))
                            return "swap_msg_index: integer|Long expected";
                    if (message.executed != null && message.hasOwnProperty("executed"))
                        if (typeof message.executed !== "boolean")
                            return "executed: boolean expected";
                    return null;
                };

                /**
                 * Creates a PoolBatch message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.liquidity.v1beta1.PoolBatch
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.liquidity.v1beta1.PoolBatch} PoolBatch
                 */
                PoolBatch.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.liquidity.v1beta1.PoolBatch)
                        return object;
                    let message = new $root.tendermint.liquidity.v1beta1.PoolBatch();
                    if (object.pool_id != null)
                        if ($util.Long)
                            (message.pool_id = $util.Long.fromValue(object.pool_id)).unsigned = true;
                        else if (typeof object.pool_id === "string")
                            message.pool_id = parseInt(object.pool_id, 10);
                        else if (typeof object.pool_id === "number")
                            message.pool_id = object.pool_id;
                        else if (typeof object.pool_id === "object")
                            message.pool_id = new $util.LongBits(object.pool_id.low >>> 0, object.pool_id.high >>> 0).toNumber(true);
                    if (object.index != null)
                        if ($util.Long)
                            (message.index = $util.Long.fromValue(object.index)).unsigned = true;
                        else if (typeof object.index === "string")
                            message.index = parseInt(object.index, 10);
                        else if (typeof object.index === "number")
                            message.index = object.index;
                        else if (typeof object.index === "object")
                            message.index = new $util.LongBits(object.index.low >>> 0, object.index.high >>> 0).toNumber(true);
                    if (object.begin_height != null)
                        if ($util.Long)
                            (message.begin_height = $util.Long.fromValue(object.begin_height)).unsigned = false;
                        else if (typeof object.begin_height === "string")
                            message.begin_height = parseInt(object.begin_height, 10);
                        else if (typeof object.begin_height === "number")
                            message.begin_height = object.begin_height;
                        else if (typeof object.begin_height === "object")
                            message.begin_height = new $util.LongBits(object.begin_height.low >>> 0, object.begin_height.high >>> 0).toNumber();
                    if (object.deposit_msg_index != null)
                        if ($util.Long)
                            (message.deposit_msg_index = $util.Long.fromValue(object.deposit_msg_index)).unsigned = true;
                        else if (typeof object.deposit_msg_index === "string")
                            message.deposit_msg_index = parseInt(object.deposit_msg_index, 10);
                        else if (typeof object.deposit_msg_index === "number")
                            message.deposit_msg_index = object.deposit_msg_index;
                        else if (typeof object.deposit_msg_index === "object")
                            message.deposit_msg_index = new $util.LongBits(object.deposit_msg_index.low >>> 0, object.deposit_msg_index.high >>> 0).toNumber(true);
                    if (object.withdraw_msg_index != null)
                        if ($util.Long)
                            (message.withdraw_msg_index = $util.Long.fromValue(object.withdraw_msg_index)).unsigned = true;
                        else if (typeof object.withdraw_msg_index === "string")
                            message.withdraw_msg_index = parseInt(object.withdraw_msg_index, 10);
                        else if (typeof object.withdraw_msg_index === "number")
                            message.withdraw_msg_index = object.withdraw_msg_index;
                        else if (typeof object.withdraw_msg_index === "object")
                            message.withdraw_msg_index = new $util.LongBits(object.withdraw_msg_index.low >>> 0, object.withdraw_msg_index.high >>> 0).toNumber(true);
                    if (object.swap_msg_index != null)
                        if ($util.Long)
                            (message.swap_msg_index = $util.Long.fromValue(object.swap_msg_index)).unsigned = true;
                        else if (typeof object.swap_msg_index === "string")
                            message.swap_msg_index = parseInt(object.swap_msg_index, 10);
                        else if (typeof object.swap_msg_index === "number")
                            message.swap_msg_index = object.swap_msg_index;
                        else if (typeof object.swap_msg_index === "object")
                            message.swap_msg_index = new $util.LongBits(object.swap_msg_index.low >>> 0, object.swap_msg_index.high >>> 0).toNumber(true);
                    if (object.executed != null)
                        message.executed = Boolean(object.executed);
                    return message;
                };

                /**
                 * Creates a plain object from a PoolBatch message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.liquidity.v1beta1.PoolBatch
                 * @static
                 * @param {tendermint.liquidity.v1beta1.PoolBatch} message PoolBatch
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                PoolBatch.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.pool_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.pool_id = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.index = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.index = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, false);
                            object.begin_height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.begin_height = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.deposit_msg_index = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.deposit_msg_index = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.withdraw_msg_index = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.withdraw_msg_index = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.swap_msg_index = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.swap_msg_index = options.longs === String ? "0" : 0;
                        object.executed = false;
                    }
                    if (message.pool_id != null && message.hasOwnProperty("pool_id"))
                        if (typeof message.pool_id === "number")
                            object.pool_id = options.longs === String ? String(message.pool_id) : message.pool_id;
                        else
                            object.pool_id = options.longs === String ? $util.Long.prototype.toString.call(message.pool_id) : options.longs === Number ? new $util.LongBits(message.pool_id.low >>> 0, message.pool_id.high >>> 0).toNumber(true) : message.pool_id;
                    if (message.index != null && message.hasOwnProperty("index"))
                        if (typeof message.index === "number")
                            object.index = options.longs === String ? String(message.index) : message.index;
                        else
                            object.index = options.longs === String ? $util.Long.prototype.toString.call(message.index) : options.longs === Number ? new $util.LongBits(message.index.low >>> 0, message.index.high >>> 0).toNumber(true) : message.index;
                    if (message.begin_height != null && message.hasOwnProperty("begin_height"))
                        if (typeof message.begin_height === "number")
                            object.begin_height = options.longs === String ? String(message.begin_height) : message.begin_height;
                        else
                            object.begin_height = options.longs === String ? $util.Long.prototype.toString.call(message.begin_height) : options.longs === Number ? new $util.LongBits(message.begin_height.low >>> 0, message.begin_height.high >>> 0).toNumber() : message.begin_height;
                    if (message.deposit_msg_index != null && message.hasOwnProperty("deposit_msg_index"))
                        if (typeof message.deposit_msg_index === "number")
                            object.deposit_msg_index = options.longs === String ? String(message.deposit_msg_index) : message.deposit_msg_index;
                        else
                            object.deposit_msg_index = options.longs === String ? $util.Long.prototype.toString.call(message.deposit_msg_index) : options.longs === Number ? new $util.LongBits(message.deposit_msg_index.low >>> 0, message.deposit_msg_index.high >>> 0).toNumber(true) : message.deposit_msg_index;
                    if (message.withdraw_msg_index != null && message.hasOwnProperty("withdraw_msg_index"))
                        if (typeof message.withdraw_msg_index === "number")
                            object.withdraw_msg_index = options.longs === String ? String(message.withdraw_msg_index) : message.withdraw_msg_index;
                        else
                            object.withdraw_msg_index = options.longs === String ? $util.Long.prototype.toString.call(message.withdraw_msg_index) : options.longs === Number ? new $util.LongBits(message.withdraw_msg_index.low >>> 0, message.withdraw_msg_index.high >>> 0).toNumber(true) : message.withdraw_msg_index;
                    if (message.swap_msg_index != null && message.hasOwnProperty("swap_msg_index"))
                        if (typeof message.swap_msg_index === "number")
                            object.swap_msg_index = options.longs === String ? String(message.swap_msg_index) : message.swap_msg_index;
                        else
                            object.swap_msg_index = options.longs === String ? $util.Long.prototype.toString.call(message.swap_msg_index) : options.longs === Number ? new $util.LongBits(message.swap_msg_index.low >>> 0, message.swap_msg_index.high >>> 0).toNumber(true) : message.swap_msg_index;
                    if (message.executed != null && message.hasOwnProperty("executed"))
                        object.executed = message.executed;
                    return object;
                };

                /**
                 * Converts this PoolBatch to JSON.
                 * @function toJSON
                 * @memberof tendermint.liquidity.v1beta1.PoolBatch
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                PoolBatch.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return PoolBatch;
            })();

            v1beta1.DepositMsgState = (function() {

                /**
                 * Properties of a DepositMsgState.
                 * @memberof tendermint.liquidity.v1beta1
                 * @interface IDepositMsgState
                 * @property {Long|null} [msg_height] DepositMsgState msg_height
                 * @property {Long|null} [msg_index] DepositMsgState msg_index
                 * @property {boolean|null} [executed] DepositMsgState executed
                 * @property {boolean|null} [succeeded] DepositMsgState succeeded
                 * @property {boolean|null} [to_be_deleted] DepositMsgState to_be_deleted
                 * @property {tendermint.liquidity.v1beta1.IMsgDepositWithinBatch|null} [msg] DepositMsgState msg
                 */

                /**
                 * Constructs a new DepositMsgState.
                 * @memberof tendermint.liquidity.v1beta1
                 * @classdesc Represents a DepositMsgState.
                 * @implements IDepositMsgState
                 * @constructor
                 * @param {tendermint.liquidity.v1beta1.IDepositMsgState=} [properties] Properties to set
                 */
                function DepositMsgState(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * DepositMsgState msg_height.
                 * @member {Long} msg_height
                 * @memberof tendermint.liquidity.v1beta1.DepositMsgState
                 * @instance
                 */
                DepositMsgState.prototype.msg_height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * DepositMsgState msg_index.
                 * @member {Long} msg_index
                 * @memberof tendermint.liquidity.v1beta1.DepositMsgState
                 * @instance
                 */
                DepositMsgState.prototype.msg_index = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * DepositMsgState executed.
                 * @member {boolean} executed
                 * @memberof tendermint.liquidity.v1beta1.DepositMsgState
                 * @instance
                 */
                DepositMsgState.prototype.executed = false;

                /**
                 * DepositMsgState succeeded.
                 * @member {boolean} succeeded
                 * @memberof tendermint.liquidity.v1beta1.DepositMsgState
                 * @instance
                 */
                DepositMsgState.prototype.succeeded = false;

                /**
                 * DepositMsgState to_be_deleted.
                 * @member {boolean} to_be_deleted
                 * @memberof tendermint.liquidity.v1beta1.DepositMsgState
                 * @instance
                 */
                DepositMsgState.prototype.to_be_deleted = false;

                /**
                 * DepositMsgState msg.
                 * @member {tendermint.liquidity.v1beta1.IMsgDepositWithinBatch|null|undefined} msg
                 * @memberof tendermint.liquidity.v1beta1.DepositMsgState
                 * @instance
                 */
                DepositMsgState.prototype.msg = null;

                /**
                 * Encodes the specified DepositMsgState message. Does not implicitly {@link tendermint.liquidity.v1beta1.DepositMsgState.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.liquidity.v1beta1.DepositMsgState
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IDepositMsgState} message DepositMsgState message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DepositMsgState.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.msg_height != null && Object.hasOwnProperty.call(message, "msg_height"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.msg_height);
                    if (message.msg_index != null && Object.hasOwnProperty.call(message, "msg_index"))
                        writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.msg_index);
                    if (message.executed != null && Object.hasOwnProperty.call(message, "executed"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.executed);
                    if (message.succeeded != null && Object.hasOwnProperty.call(message, "succeeded"))
                        writer.uint32(/* id 4, wireType 0 =*/32).bool(message.succeeded);
                    if (message.to_be_deleted != null && Object.hasOwnProperty.call(message, "to_be_deleted"))
                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.to_be_deleted);
                    if (message.msg != null && Object.hasOwnProperty.call(message, "msg"))
                        $root.tendermint.liquidity.v1beta1.MsgDepositWithinBatch.encode(message.msg, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified DepositMsgState message, length delimited. Does not implicitly {@link tendermint.liquidity.v1beta1.DepositMsgState.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.DepositMsgState
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IDepositMsgState} message DepositMsgState message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DepositMsgState.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a DepositMsgState message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.liquidity.v1beta1.DepositMsgState
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.liquidity.v1beta1.DepositMsgState} DepositMsgState
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DepositMsgState.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.liquidity.v1beta1.DepositMsgState();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.msg_height = reader.int64();
                            break;
                        case 2:
                            message.msg_index = reader.uint64();
                            break;
                        case 3:
                            message.executed = reader.bool();
                            break;
                        case 4:
                            message.succeeded = reader.bool();
                            break;
                        case 5:
                            message.to_be_deleted = reader.bool();
                            break;
                        case 6:
                            message.msg = $root.tendermint.liquidity.v1beta1.MsgDepositWithinBatch.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a DepositMsgState message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.DepositMsgState
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.liquidity.v1beta1.DepositMsgState} DepositMsgState
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DepositMsgState.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a DepositMsgState message.
                 * @function verify
                 * @memberof tendermint.liquidity.v1beta1.DepositMsgState
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DepositMsgState.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.msg_height != null && message.hasOwnProperty("msg_height"))
                        if (!$util.isInteger(message.msg_height) && !(message.msg_height && $util.isInteger(message.msg_height.low) && $util.isInteger(message.msg_height.high)))
                            return "msg_height: integer|Long expected";
                    if (message.msg_index != null && message.hasOwnProperty("msg_index"))
                        if (!$util.isInteger(message.msg_index) && !(message.msg_index && $util.isInteger(message.msg_index.low) && $util.isInteger(message.msg_index.high)))
                            return "msg_index: integer|Long expected";
                    if (message.executed != null && message.hasOwnProperty("executed"))
                        if (typeof message.executed !== "boolean")
                            return "executed: boolean expected";
                    if (message.succeeded != null && message.hasOwnProperty("succeeded"))
                        if (typeof message.succeeded !== "boolean")
                            return "succeeded: boolean expected";
                    if (message.to_be_deleted != null && message.hasOwnProperty("to_be_deleted"))
                        if (typeof message.to_be_deleted !== "boolean")
                            return "to_be_deleted: boolean expected";
                    if (message.msg != null && message.hasOwnProperty("msg")) {
                        let error = $root.tendermint.liquidity.v1beta1.MsgDepositWithinBatch.verify(message.msg);
                        if (error)
                            return "msg." + error;
                    }
                    return null;
                };

                /**
                 * Creates a DepositMsgState message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.liquidity.v1beta1.DepositMsgState
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.liquidity.v1beta1.DepositMsgState} DepositMsgState
                 */
                DepositMsgState.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.liquidity.v1beta1.DepositMsgState)
                        return object;
                    let message = new $root.tendermint.liquidity.v1beta1.DepositMsgState();
                    if (object.msg_height != null)
                        if ($util.Long)
                            (message.msg_height = $util.Long.fromValue(object.msg_height)).unsigned = false;
                        else if (typeof object.msg_height === "string")
                            message.msg_height = parseInt(object.msg_height, 10);
                        else if (typeof object.msg_height === "number")
                            message.msg_height = object.msg_height;
                        else if (typeof object.msg_height === "object")
                            message.msg_height = new $util.LongBits(object.msg_height.low >>> 0, object.msg_height.high >>> 0).toNumber();
                    if (object.msg_index != null)
                        if ($util.Long)
                            (message.msg_index = $util.Long.fromValue(object.msg_index)).unsigned = true;
                        else if (typeof object.msg_index === "string")
                            message.msg_index = parseInt(object.msg_index, 10);
                        else if (typeof object.msg_index === "number")
                            message.msg_index = object.msg_index;
                        else if (typeof object.msg_index === "object")
                            message.msg_index = new $util.LongBits(object.msg_index.low >>> 0, object.msg_index.high >>> 0).toNumber(true);
                    if (object.executed != null)
                        message.executed = Boolean(object.executed);
                    if (object.succeeded != null)
                        message.succeeded = Boolean(object.succeeded);
                    if (object.to_be_deleted != null)
                        message.to_be_deleted = Boolean(object.to_be_deleted);
                    if (object.msg != null) {
                        if (typeof object.msg !== "object")
                            throw TypeError(".tendermint.liquidity.v1beta1.DepositMsgState.msg: object expected");
                        message.msg = $root.tendermint.liquidity.v1beta1.MsgDepositWithinBatch.fromObject(object.msg);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a DepositMsgState message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.liquidity.v1beta1.DepositMsgState
                 * @static
                 * @param {tendermint.liquidity.v1beta1.DepositMsgState} message DepositMsgState
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DepositMsgState.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, false);
                            object.msg_height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.msg_height = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.msg_index = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.msg_index = options.longs === String ? "0" : 0;
                        object.executed = false;
                        object.succeeded = false;
                        object.to_be_deleted = false;
                        object.msg = null;
                    }
                    if (message.msg_height != null && message.hasOwnProperty("msg_height"))
                        if (typeof message.msg_height === "number")
                            object.msg_height = options.longs === String ? String(message.msg_height) : message.msg_height;
                        else
                            object.msg_height = options.longs === String ? $util.Long.prototype.toString.call(message.msg_height) : options.longs === Number ? new $util.LongBits(message.msg_height.low >>> 0, message.msg_height.high >>> 0).toNumber() : message.msg_height;
                    if (message.msg_index != null && message.hasOwnProperty("msg_index"))
                        if (typeof message.msg_index === "number")
                            object.msg_index = options.longs === String ? String(message.msg_index) : message.msg_index;
                        else
                            object.msg_index = options.longs === String ? $util.Long.prototype.toString.call(message.msg_index) : options.longs === Number ? new $util.LongBits(message.msg_index.low >>> 0, message.msg_index.high >>> 0).toNumber(true) : message.msg_index;
                    if (message.executed != null && message.hasOwnProperty("executed"))
                        object.executed = message.executed;
                    if (message.succeeded != null && message.hasOwnProperty("succeeded"))
                        object.succeeded = message.succeeded;
                    if (message.to_be_deleted != null && message.hasOwnProperty("to_be_deleted"))
                        object.to_be_deleted = message.to_be_deleted;
                    if (message.msg != null && message.hasOwnProperty("msg"))
                        object.msg = $root.tendermint.liquidity.v1beta1.MsgDepositWithinBatch.toObject(message.msg, options);
                    return object;
                };

                /**
                 * Converts this DepositMsgState to JSON.
                 * @function toJSON
                 * @memberof tendermint.liquidity.v1beta1.DepositMsgState
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DepositMsgState.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return DepositMsgState;
            })();

            v1beta1.WithdrawMsgState = (function() {

                /**
                 * Properties of a WithdrawMsgState.
                 * @memberof tendermint.liquidity.v1beta1
                 * @interface IWithdrawMsgState
                 * @property {Long|null} [msg_height] WithdrawMsgState msg_height
                 * @property {Long|null} [msg_index] WithdrawMsgState msg_index
                 * @property {boolean|null} [executed] WithdrawMsgState executed
                 * @property {boolean|null} [succeeded] WithdrawMsgState succeeded
                 * @property {boolean|null} [to_be_deleted] WithdrawMsgState to_be_deleted
                 * @property {tendermint.liquidity.v1beta1.IMsgWithdrawWithinBatch|null} [msg] WithdrawMsgState msg
                 */

                /**
                 * Constructs a new WithdrawMsgState.
                 * @memberof tendermint.liquidity.v1beta1
                 * @classdesc Represents a WithdrawMsgState.
                 * @implements IWithdrawMsgState
                 * @constructor
                 * @param {tendermint.liquidity.v1beta1.IWithdrawMsgState=} [properties] Properties to set
                 */
                function WithdrawMsgState(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * WithdrawMsgState msg_height.
                 * @member {Long} msg_height
                 * @memberof tendermint.liquidity.v1beta1.WithdrawMsgState
                 * @instance
                 */
                WithdrawMsgState.prototype.msg_height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * WithdrawMsgState msg_index.
                 * @member {Long} msg_index
                 * @memberof tendermint.liquidity.v1beta1.WithdrawMsgState
                 * @instance
                 */
                WithdrawMsgState.prototype.msg_index = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * WithdrawMsgState executed.
                 * @member {boolean} executed
                 * @memberof tendermint.liquidity.v1beta1.WithdrawMsgState
                 * @instance
                 */
                WithdrawMsgState.prototype.executed = false;

                /**
                 * WithdrawMsgState succeeded.
                 * @member {boolean} succeeded
                 * @memberof tendermint.liquidity.v1beta1.WithdrawMsgState
                 * @instance
                 */
                WithdrawMsgState.prototype.succeeded = false;

                /**
                 * WithdrawMsgState to_be_deleted.
                 * @member {boolean} to_be_deleted
                 * @memberof tendermint.liquidity.v1beta1.WithdrawMsgState
                 * @instance
                 */
                WithdrawMsgState.prototype.to_be_deleted = false;

                /**
                 * WithdrawMsgState msg.
                 * @member {tendermint.liquidity.v1beta1.IMsgWithdrawWithinBatch|null|undefined} msg
                 * @memberof tendermint.liquidity.v1beta1.WithdrawMsgState
                 * @instance
                 */
                WithdrawMsgState.prototype.msg = null;

                /**
                 * Encodes the specified WithdrawMsgState message. Does not implicitly {@link tendermint.liquidity.v1beta1.WithdrawMsgState.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.liquidity.v1beta1.WithdrawMsgState
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IWithdrawMsgState} message WithdrawMsgState message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                WithdrawMsgState.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.msg_height != null && Object.hasOwnProperty.call(message, "msg_height"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.msg_height);
                    if (message.msg_index != null && Object.hasOwnProperty.call(message, "msg_index"))
                        writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.msg_index);
                    if (message.executed != null && Object.hasOwnProperty.call(message, "executed"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.executed);
                    if (message.succeeded != null && Object.hasOwnProperty.call(message, "succeeded"))
                        writer.uint32(/* id 4, wireType 0 =*/32).bool(message.succeeded);
                    if (message.to_be_deleted != null && Object.hasOwnProperty.call(message, "to_be_deleted"))
                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.to_be_deleted);
                    if (message.msg != null && Object.hasOwnProperty.call(message, "msg"))
                        $root.tendermint.liquidity.v1beta1.MsgWithdrawWithinBatch.encode(message.msg, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified WithdrawMsgState message, length delimited. Does not implicitly {@link tendermint.liquidity.v1beta1.WithdrawMsgState.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.WithdrawMsgState
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IWithdrawMsgState} message WithdrawMsgState message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                WithdrawMsgState.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a WithdrawMsgState message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.liquidity.v1beta1.WithdrawMsgState
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.liquidity.v1beta1.WithdrawMsgState} WithdrawMsgState
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                WithdrawMsgState.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.liquidity.v1beta1.WithdrawMsgState();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.msg_height = reader.int64();
                            break;
                        case 2:
                            message.msg_index = reader.uint64();
                            break;
                        case 3:
                            message.executed = reader.bool();
                            break;
                        case 4:
                            message.succeeded = reader.bool();
                            break;
                        case 5:
                            message.to_be_deleted = reader.bool();
                            break;
                        case 6:
                            message.msg = $root.tendermint.liquidity.v1beta1.MsgWithdrawWithinBatch.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a WithdrawMsgState message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.WithdrawMsgState
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.liquidity.v1beta1.WithdrawMsgState} WithdrawMsgState
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                WithdrawMsgState.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a WithdrawMsgState message.
                 * @function verify
                 * @memberof tendermint.liquidity.v1beta1.WithdrawMsgState
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                WithdrawMsgState.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.msg_height != null && message.hasOwnProperty("msg_height"))
                        if (!$util.isInteger(message.msg_height) && !(message.msg_height && $util.isInteger(message.msg_height.low) && $util.isInteger(message.msg_height.high)))
                            return "msg_height: integer|Long expected";
                    if (message.msg_index != null && message.hasOwnProperty("msg_index"))
                        if (!$util.isInteger(message.msg_index) && !(message.msg_index && $util.isInteger(message.msg_index.low) && $util.isInteger(message.msg_index.high)))
                            return "msg_index: integer|Long expected";
                    if (message.executed != null && message.hasOwnProperty("executed"))
                        if (typeof message.executed !== "boolean")
                            return "executed: boolean expected";
                    if (message.succeeded != null && message.hasOwnProperty("succeeded"))
                        if (typeof message.succeeded !== "boolean")
                            return "succeeded: boolean expected";
                    if (message.to_be_deleted != null && message.hasOwnProperty("to_be_deleted"))
                        if (typeof message.to_be_deleted !== "boolean")
                            return "to_be_deleted: boolean expected";
                    if (message.msg != null && message.hasOwnProperty("msg")) {
                        let error = $root.tendermint.liquidity.v1beta1.MsgWithdrawWithinBatch.verify(message.msg);
                        if (error)
                            return "msg." + error;
                    }
                    return null;
                };

                /**
                 * Creates a WithdrawMsgState message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.liquidity.v1beta1.WithdrawMsgState
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.liquidity.v1beta1.WithdrawMsgState} WithdrawMsgState
                 */
                WithdrawMsgState.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.liquidity.v1beta1.WithdrawMsgState)
                        return object;
                    let message = new $root.tendermint.liquidity.v1beta1.WithdrawMsgState();
                    if (object.msg_height != null)
                        if ($util.Long)
                            (message.msg_height = $util.Long.fromValue(object.msg_height)).unsigned = false;
                        else if (typeof object.msg_height === "string")
                            message.msg_height = parseInt(object.msg_height, 10);
                        else if (typeof object.msg_height === "number")
                            message.msg_height = object.msg_height;
                        else if (typeof object.msg_height === "object")
                            message.msg_height = new $util.LongBits(object.msg_height.low >>> 0, object.msg_height.high >>> 0).toNumber();
                    if (object.msg_index != null)
                        if ($util.Long)
                            (message.msg_index = $util.Long.fromValue(object.msg_index)).unsigned = true;
                        else if (typeof object.msg_index === "string")
                            message.msg_index = parseInt(object.msg_index, 10);
                        else if (typeof object.msg_index === "number")
                            message.msg_index = object.msg_index;
                        else if (typeof object.msg_index === "object")
                            message.msg_index = new $util.LongBits(object.msg_index.low >>> 0, object.msg_index.high >>> 0).toNumber(true);
                    if (object.executed != null)
                        message.executed = Boolean(object.executed);
                    if (object.succeeded != null)
                        message.succeeded = Boolean(object.succeeded);
                    if (object.to_be_deleted != null)
                        message.to_be_deleted = Boolean(object.to_be_deleted);
                    if (object.msg != null) {
                        if (typeof object.msg !== "object")
                            throw TypeError(".tendermint.liquidity.v1beta1.WithdrawMsgState.msg: object expected");
                        message.msg = $root.tendermint.liquidity.v1beta1.MsgWithdrawWithinBatch.fromObject(object.msg);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a WithdrawMsgState message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.liquidity.v1beta1.WithdrawMsgState
                 * @static
                 * @param {tendermint.liquidity.v1beta1.WithdrawMsgState} message WithdrawMsgState
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                WithdrawMsgState.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, false);
                            object.msg_height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.msg_height = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.msg_index = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.msg_index = options.longs === String ? "0" : 0;
                        object.executed = false;
                        object.succeeded = false;
                        object.to_be_deleted = false;
                        object.msg = null;
                    }
                    if (message.msg_height != null && message.hasOwnProperty("msg_height"))
                        if (typeof message.msg_height === "number")
                            object.msg_height = options.longs === String ? String(message.msg_height) : message.msg_height;
                        else
                            object.msg_height = options.longs === String ? $util.Long.prototype.toString.call(message.msg_height) : options.longs === Number ? new $util.LongBits(message.msg_height.low >>> 0, message.msg_height.high >>> 0).toNumber() : message.msg_height;
                    if (message.msg_index != null && message.hasOwnProperty("msg_index"))
                        if (typeof message.msg_index === "number")
                            object.msg_index = options.longs === String ? String(message.msg_index) : message.msg_index;
                        else
                            object.msg_index = options.longs === String ? $util.Long.prototype.toString.call(message.msg_index) : options.longs === Number ? new $util.LongBits(message.msg_index.low >>> 0, message.msg_index.high >>> 0).toNumber(true) : message.msg_index;
                    if (message.executed != null && message.hasOwnProperty("executed"))
                        object.executed = message.executed;
                    if (message.succeeded != null && message.hasOwnProperty("succeeded"))
                        object.succeeded = message.succeeded;
                    if (message.to_be_deleted != null && message.hasOwnProperty("to_be_deleted"))
                        object.to_be_deleted = message.to_be_deleted;
                    if (message.msg != null && message.hasOwnProperty("msg"))
                        object.msg = $root.tendermint.liquidity.v1beta1.MsgWithdrawWithinBatch.toObject(message.msg, options);
                    return object;
                };

                /**
                 * Converts this WithdrawMsgState to JSON.
                 * @function toJSON
                 * @memberof tendermint.liquidity.v1beta1.WithdrawMsgState
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                WithdrawMsgState.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return WithdrawMsgState;
            })();

            v1beta1.SwapMsgState = (function() {

                /**
                 * Properties of a SwapMsgState.
                 * @memberof tendermint.liquidity.v1beta1
                 * @interface ISwapMsgState
                 * @property {Long|null} [msg_height] SwapMsgState msg_height
                 * @property {Long|null} [msg_index] SwapMsgState msg_index
                 * @property {boolean|null} [executed] SwapMsgState executed
                 * @property {boolean|null} [succeeded] SwapMsgState succeeded
                 * @property {boolean|null} [to_be_deleted] SwapMsgState to_be_deleted
                 * @property {Long|null} [order_expiry_height] SwapMsgState order_expiry_height
                 * @property {cosmos.base.v1beta1.ICoin|null} [exchanged_offer_coin] SwapMsgState exchanged_offer_coin
                 * @property {cosmos.base.v1beta1.ICoin|null} [remaining_offer_coin] SwapMsgState remaining_offer_coin
                 * @property {cosmos.base.v1beta1.ICoin|null} [reserved_offer_coin_fee] SwapMsgState reserved_offer_coin_fee
                 * @property {tendermint.liquidity.v1beta1.IMsgSwapWithinBatch|null} [msg] SwapMsgState msg
                 */

                /**
                 * Constructs a new SwapMsgState.
                 * @memberof tendermint.liquidity.v1beta1
                 * @classdesc Represents a SwapMsgState.
                 * @implements ISwapMsgState
                 * @constructor
                 * @param {tendermint.liquidity.v1beta1.ISwapMsgState=} [properties] Properties to set
                 */
                function SwapMsgState(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * SwapMsgState msg_height.
                 * @member {Long} msg_height
                 * @memberof tendermint.liquidity.v1beta1.SwapMsgState
                 * @instance
                 */
                SwapMsgState.prototype.msg_height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * SwapMsgState msg_index.
                 * @member {Long} msg_index
                 * @memberof tendermint.liquidity.v1beta1.SwapMsgState
                 * @instance
                 */
                SwapMsgState.prototype.msg_index = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * SwapMsgState executed.
                 * @member {boolean} executed
                 * @memberof tendermint.liquidity.v1beta1.SwapMsgState
                 * @instance
                 */
                SwapMsgState.prototype.executed = false;

                /**
                 * SwapMsgState succeeded.
                 * @member {boolean} succeeded
                 * @memberof tendermint.liquidity.v1beta1.SwapMsgState
                 * @instance
                 */
                SwapMsgState.prototype.succeeded = false;

                /**
                 * SwapMsgState to_be_deleted.
                 * @member {boolean} to_be_deleted
                 * @memberof tendermint.liquidity.v1beta1.SwapMsgState
                 * @instance
                 */
                SwapMsgState.prototype.to_be_deleted = false;

                /**
                 * SwapMsgState order_expiry_height.
                 * @member {Long} order_expiry_height
                 * @memberof tendermint.liquidity.v1beta1.SwapMsgState
                 * @instance
                 */
                SwapMsgState.prototype.order_expiry_height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * SwapMsgState exchanged_offer_coin.
                 * @member {cosmos.base.v1beta1.ICoin|null|undefined} exchanged_offer_coin
                 * @memberof tendermint.liquidity.v1beta1.SwapMsgState
                 * @instance
                 */
                SwapMsgState.prototype.exchanged_offer_coin = null;

                /**
                 * SwapMsgState remaining_offer_coin.
                 * @member {cosmos.base.v1beta1.ICoin|null|undefined} remaining_offer_coin
                 * @memberof tendermint.liquidity.v1beta1.SwapMsgState
                 * @instance
                 */
                SwapMsgState.prototype.remaining_offer_coin = null;

                /**
                 * SwapMsgState reserved_offer_coin_fee.
                 * @member {cosmos.base.v1beta1.ICoin|null|undefined} reserved_offer_coin_fee
                 * @memberof tendermint.liquidity.v1beta1.SwapMsgState
                 * @instance
                 */
                SwapMsgState.prototype.reserved_offer_coin_fee = null;

                /**
                 * SwapMsgState msg.
                 * @member {tendermint.liquidity.v1beta1.IMsgSwapWithinBatch|null|undefined} msg
                 * @memberof tendermint.liquidity.v1beta1.SwapMsgState
                 * @instance
                 */
                SwapMsgState.prototype.msg = null;

                /**
                 * Encodes the specified SwapMsgState message. Does not implicitly {@link tendermint.liquidity.v1beta1.SwapMsgState.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.liquidity.v1beta1.SwapMsgState
                 * @static
                 * @param {tendermint.liquidity.v1beta1.ISwapMsgState} message SwapMsgState message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SwapMsgState.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.msg_height != null && Object.hasOwnProperty.call(message, "msg_height"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.msg_height);
                    if (message.msg_index != null && Object.hasOwnProperty.call(message, "msg_index"))
                        writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.msg_index);
                    if (message.executed != null && Object.hasOwnProperty.call(message, "executed"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.executed);
                    if (message.succeeded != null && Object.hasOwnProperty.call(message, "succeeded"))
                        writer.uint32(/* id 4, wireType 0 =*/32).bool(message.succeeded);
                    if (message.to_be_deleted != null && Object.hasOwnProperty.call(message, "to_be_deleted"))
                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.to_be_deleted);
                    if (message.order_expiry_height != null && Object.hasOwnProperty.call(message, "order_expiry_height"))
                        writer.uint32(/* id 6, wireType 0 =*/48).int64(message.order_expiry_height);
                    if (message.exchanged_offer_coin != null && Object.hasOwnProperty.call(message, "exchanged_offer_coin"))
                        $root.cosmos.base.v1beta1.Coin.encode(message.exchanged_offer_coin, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.remaining_offer_coin != null && Object.hasOwnProperty.call(message, "remaining_offer_coin"))
                        $root.cosmos.base.v1beta1.Coin.encode(message.remaining_offer_coin, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.reserved_offer_coin_fee != null && Object.hasOwnProperty.call(message, "reserved_offer_coin_fee"))
                        $root.cosmos.base.v1beta1.Coin.encode(message.reserved_offer_coin_fee, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.msg != null && Object.hasOwnProperty.call(message, "msg"))
                        $root.tendermint.liquidity.v1beta1.MsgSwapWithinBatch.encode(message.msg, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified SwapMsgState message, length delimited. Does not implicitly {@link tendermint.liquidity.v1beta1.SwapMsgState.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.SwapMsgState
                 * @static
                 * @param {tendermint.liquidity.v1beta1.ISwapMsgState} message SwapMsgState message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SwapMsgState.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a SwapMsgState message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.liquidity.v1beta1.SwapMsgState
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.liquidity.v1beta1.SwapMsgState} SwapMsgState
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SwapMsgState.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.liquidity.v1beta1.SwapMsgState();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.msg_height = reader.int64();
                            break;
                        case 2:
                            message.msg_index = reader.uint64();
                            break;
                        case 3:
                            message.executed = reader.bool();
                            break;
                        case 4:
                            message.succeeded = reader.bool();
                            break;
                        case 5:
                            message.to_be_deleted = reader.bool();
                            break;
                        case 6:
                            message.order_expiry_height = reader.int64();
                            break;
                        case 7:
                            message.exchanged_offer_coin = $root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32());
                            break;
                        case 8:
                            message.remaining_offer_coin = $root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32());
                            break;
                        case 9:
                            message.reserved_offer_coin_fee = $root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32());
                            break;
                        case 10:
                            message.msg = $root.tendermint.liquidity.v1beta1.MsgSwapWithinBatch.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a SwapMsgState message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.SwapMsgState
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.liquidity.v1beta1.SwapMsgState} SwapMsgState
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SwapMsgState.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a SwapMsgState message.
                 * @function verify
                 * @memberof tendermint.liquidity.v1beta1.SwapMsgState
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                SwapMsgState.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.msg_height != null && message.hasOwnProperty("msg_height"))
                        if (!$util.isInteger(message.msg_height) && !(message.msg_height && $util.isInteger(message.msg_height.low) && $util.isInteger(message.msg_height.high)))
                            return "msg_height: integer|Long expected";
                    if (message.msg_index != null && message.hasOwnProperty("msg_index"))
                        if (!$util.isInteger(message.msg_index) && !(message.msg_index && $util.isInteger(message.msg_index.low) && $util.isInteger(message.msg_index.high)))
                            return "msg_index: integer|Long expected";
                    if (message.executed != null && message.hasOwnProperty("executed"))
                        if (typeof message.executed !== "boolean")
                            return "executed: boolean expected";
                    if (message.succeeded != null && message.hasOwnProperty("succeeded"))
                        if (typeof message.succeeded !== "boolean")
                            return "succeeded: boolean expected";
                    if (message.to_be_deleted != null && message.hasOwnProperty("to_be_deleted"))
                        if (typeof message.to_be_deleted !== "boolean")
                            return "to_be_deleted: boolean expected";
                    if (message.order_expiry_height != null && message.hasOwnProperty("order_expiry_height"))
                        if (!$util.isInteger(message.order_expiry_height) && !(message.order_expiry_height && $util.isInteger(message.order_expiry_height.low) && $util.isInteger(message.order_expiry_height.high)))
                            return "order_expiry_height: integer|Long expected";
                    if (message.exchanged_offer_coin != null && message.hasOwnProperty("exchanged_offer_coin")) {
                        let error = $root.cosmos.base.v1beta1.Coin.verify(message.exchanged_offer_coin);
                        if (error)
                            return "exchanged_offer_coin." + error;
                    }
                    if (message.remaining_offer_coin != null && message.hasOwnProperty("remaining_offer_coin")) {
                        let error = $root.cosmos.base.v1beta1.Coin.verify(message.remaining_offer_coin);
                        if (error)
                            return "remaining_offer_coin." + error;
                    }
                    if (message.reserved_offer_coin_fee != null && message.hasOwnProperty("reserved_offer_coin_fee")) {
                        let error = $root.cosmos.base.v1beta1.Coin.verify(message.reserved_offer_coin_fee);
                        if (error)
                            return "reserved_offer_coin_fee." + error;
                    }
                    if (message.msg != null && message.hasOwnProperty("msg")) {
                        let error = $root.tendermint.liquidity.v1beta1.MsgSwapWithinBatch.verify(message.msg);
                        if (error)
                            return "msg." + error;
                    }
                    return null;
                };

                /**
                 * Creates a SwapMsgState message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.liquidity.v1beta1.SwapMsgState
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.liquidity.v1beta1.SwapMsgState} SwapMsgState
                 */
                SwapMsgState.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.liquidity.v1beta1.SwapMsgState)
                        return object;
                    let message = new $root.tendermint.liquidity.v1beta1.SwapMsgState();
                    if (object.msg_height != null)
                        if ($util.Long)
                            (message.msg_height = $util.Long.fromValue(object.msg_height)).unsigned = false;
                        else if (typeof object.msg_height === "string")
                            message.msg_height = parseInt(object.msg_height, 10);
                        else if (typeof object.msg_height === "number")
                            message.msg_height = object.msg_height;
                        else if (typeof object.msg_height === "object")
                            message.msg_height = new $util.LongBits(object.msg_height.low >>> 0, object.msg_height.high >>> 0).toNumber();
                    if (object.msg_index != null)
                        if ($util.Long)
                            (message.msg_index = $util.Long.fromValue(object.msg_index)).unsigned = true;
                        else if (typeof object.msg_index === "string")
                            message.msg_index = parseInt(object.msg_index, 10);
                        else if (typeof object.msg_index === "number")
                            message.msg_index = object.msg_index;
                        else if (typeof object.msg_index === "object")
                            message.msg_index = new $util.LongBits(object.msg_index.low >>> 0, object.msg_index.high >>> 0).toNumber(true);
                    if (object.executed != null)
                        message.executed = Boolean(object.executed);
                    if (object.succeeded != null)
                        message.succeeded = Boolean(object.succeeded);
                    if (object.to_be_deleted != null)
                        message.to_be_deleted = Boolean(object.to_be_deleted);
                    if (object.order_expiry_height != null)
                        if ($util.Long)
                            (message.order_expiry_height = $util.Long.fromValue(object.order_expiry_height)).unsigned = false;
                        else if (typeof object.order_expiry_height === "string")
                            message.order_expiry_height = parseInt(object.order_expiry_height, 10);
                        else if (typeof object.order_expiry_height === "number")
                            message.order_expiry_height = object.order_expiry_height;
                        else if (typeof object.order_expiry_height === "object")
                            message.order_expiry_height = new $util.LongBits(object.order_expiry_height.low >>> 0, object.order_expiry_height.high >>> 0).toNumber();
                    if (object.exchanged_offer_coin != null) {
                        if (typeof object.exchanged_offer_coin !== "object")
                            throw TypeError(".tendermint.liquidity.v1beta1.SwapMsgState.exchanged_offer_coin: object expected");
                        message.exchanged_offer_coin = $root.cosmos.base.v1beta1.Coin.fromObject(object.exchanged_offer_coin);
                    }
                    if (object.remaining_offer_coin != null) {
                        if (typeof object.remaining_offer_coin !== "object")
                            throw TypeError(".tendermint.liquidity.v1beta1.SwapMsgState.remaining_offer_coin: object expected");
                        message.remaining_offer_coin = $root.cosmos.base.v1beta1.Coin.fromObject(object.remaining_offer_coin);
                    }
                    if (object.reserved_offer_coin_fee != null) {
                        if (typeof object.reserved_offer_coin_fee !== "object")
                            throw TypeError(".tendermint.liquidity.v1beta1.SwapMsgState.reserved_offer_coin_fee: object expected");
                        message.reserved_offer_coin_fee = $root.cosmos.base.v1beta1.Coin.fromObject(object.reserved_offer_coin_fee);
                    }
                    if (object.msg != null) {
                        if (typeof object.msg !== "object")
                            throw TypeError(".tendermint.liquidity.v1beta1.SwapMsgState.msg: object expected");
                        message.msg = $root.tendermint.liquidity.v1beta1.MsgSwapWithinBatch.fromObject(object.msg);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a SwapMsgState message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.liquidity.v1beta1.SwapMsgState
                 * @static
                 * @param {tendermint.liquidity.v1beta1.SwapMsgState} message SwapMsgState
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                SwapMsgState.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, false);
                            object.msg_height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.msg_height = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.msg_index = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.msg_index = options.longs === String ? "0" : 0;
                        object.executed = false;
                        object.succeeded = false;
                        object.to_be_deleted = false;
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, false);
                            object.order_expiry_height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.order_expiry_height = options.longs === String ? "0" : 0;
                        object.exchanged_offer_coin = null;
                        object.remaining_offer_coin = null;
                        object.reserved_offer_coin_fee = null;
                        object.msg = null;
                    }
                    if (message.msg_height != null && message.hasOwnProperty("msg_height"))
                        if (typeof message.msg_height === "number")
                            object.msg_height = options.longs === String ? String(message.msg_height) : message.msg_height;
                        else
                            object.msg_height = options.longs === String ? $util.Long.prototype.toString.call(message.msg_height) : options.longs === Number ? new $util.LongBits(message.msg_height.low >>> 0, message.msg_height.high >>> 0).toNumber() : message.msg_height;
                    if (message.msg_index != null && message.hasOwnProperty("msg_index"))
                        if (typeof message.msg_index === "number")
                            object.msg_index = options.longs === String ? String(message.msg_index) : message.msg_index;
                        else
                            object.msg_index = options.longs === String ? $util.Long.prototype.toString.call(message.msg_index) : options.longs === Number ? new $util.LongBits(message.msg_index.low >>> 0, message.msg_index.high >>> 0).toNumber(true) : message.msg_index;
                    if (message.executed != null && message.hasOwnProperty("executed"))
                        object.executed = message.executed;
                    if (message.succeeded != null && message.hasOwnProperty("succeeded"))
                        object.succeeded = message.succeeded;
                    if (message.to_be_deleted != null && message.hasOwnProperty("to_be_deleted"))
                        object.to_be_deleted = message.to_be_deleted;
                    if (message.order_expiry_height != null && message.hasOwnProperty("order_expiry_height"))
                        if (typeof message.order_expiry_height === "number")
                            object.order_expiry_height = options.longs === String ? String(message.order_expiry_height) : message.order_expiry_height;
                        else
                            object.order_expiry_height = options.longs === String ? $util.Long.prototype.toString.call(message.order_expiry_height) : options.longs === Number ? new $util.LongBits(message.order_expiry_height.low >>> 0, message.order_expiry_height.high >>> 0).toNumber() : message.order_expiry_height;
                    if (message.exchanged_offer_coin != null && message.hasOwnProperty("exchanged_offer_coin"))
                        object.exchanged_offer_coin = $root.cosmos.base.v1beta1.Coin.toObject(message.exchanged_offer_coin, options);
                    if (message.remaining_offer_coin != null && message.hasOwnProperty("remaining_offer_coin"))
                        object.remaining_offer_coin = $root.cosmos.base.v1beta1.Coin.toObject(message.remaining_offer_coin, options);
                    if (message.reserved_offer_coin_fee != null && message.hasOwnProperty("reserved_offer_coin_fee"))
                        object.reserved_offer_coin_fee = $root.cosmos.base.v1beta1.Coin.toObject(message.reserved_offer_coin_fee, options);
                    if (message.msg != null && message.hasOwnProperty("msg"))
                        object.msg = $root.tendermint.liquidity.v1beta1.MsgSwapWithinBatch.toObject(message.msg, options);
                    return object;
                };

                /**
                 * Converts this SwapMsgState to JSON.
                 * @function toJSON
                 * @memberof tendermint.liquidity.v1beta1.SwapMsgState
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                SwapMsgState.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return SwapMsgState;
            })();

            v1beta1.Msg = (function() {

                /**
                 * Constructs a new Msg service.
                 * @memberof tendermint.liquidity.v1beta1
                 * @classdesc Represents a Msg
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function Msg(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }

                (Msg.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Msg;

                /**
                 * Callback as used by {@link tendermint.liquidity.v1beta1.Msg#createPool}.
                 * @memberof tendermint.liquidity.v1beta1.Msg
                 * @typedef CreatePoolCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {tendermint.liquidity.v1beta1.MsgCreatePoolResponse} [response] MsgCreatePoolResponse
                 */

                /**
                 * Calls CreatePool.
                 * @function createPool
                 * @memberof tendermint.liquidity.v1beta1.Msg
                 * @instance
                 * @param {tendermint.liquidity.v1beta1.IMsgCreatePool} request MsgCreatePool message or plain object
                 * @param {tendermint.liquidity.v1beta1.Msg.CreatePoolCallback} callback Node-style callback called with the error, if any, and MsgCreatePoolResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Msg.prototype.createPool = function createPool(request, callback) {
                    return this.rpcCall(createPool, $root.tendermint.liquidity.v1beta1.MsgCreatePool, $root.tendermint.liquidity.v1beta1.MsgCreatePoolResponse, request, callback);
                }, "name", { value: "CreatePool" });

                /**
                 * Calls CreatePool.
                 * @function createPool
                 * @memberof tendermint.liquidity.v1beta1.Msg
                 * @instance
                 * @param {tendermint.liquidity.v1beta1.IMsgCreatePool} request MsgCreatePool message or plain object
                 * @returns {Promise<tendermint.liquidity.v1beta1.MsgCreatePoolResponse>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link tendermint.liquidity.v1beta1.Msg#depositWithinBatch}.
                 * @memberof tendermint.liquidity.v1beta1.Msg
                 * @typedef DepositWithinBatchCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {tendermint.liquidity.v1beta1.MsgDepositWithinBatchResponse} [response] MsgDepositWithinBatchResponse
                 */

                /**
                 * Calls DepositWithinBatch.
                 * @function depositWithinBatch
                 * @memberof tendermint.liquidity.v1beta1.Msg
                 * @instance
                 * @param {tendermint.liquidity.v1beta1.IMsgDepositWithinBatch} request MsgDepositWithinBatch message or plain object
                 * @param {tendermint.liquidity.v1beta1.Msg.DepositWithinBatchCallback} callback Node-style callback called with the error, if any, and MsgDepositWithinBatchResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Msg.prototype.depositWithinBatch = function depositWithinBatch(request, callback) {
                    return this.rpcCall(depositWithinBatch, $root.tendermint.liquidity.v1beta1.MsgDepositWithinBatch, $root.tendermint.liquidity.v1beta1.MsgDepositWithinBatchResponse, request, callback);
                }, "name", { value: "DepositWithinBatch" });

                /**
                 * Calls DepositWithinBatch.
                 * @function depositWithinBatch
                 * @memberof tendermint.liquidity.v1beta1.Msg
                 * @instance
                 * @param {tendermint.liquidity.v1beta1.IMsgDepositWithinBatch} request MsgDepositWithinBatch message or plain object
                 * @returns {Promise<tendermint.liquidity.v1beta1.MsgDepositWithinBatchResponse>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link tendermint.liquidity.v1beta1.Msg#withdrawWithinBatch}.
                 * @memberof tendermint.liquidity.v1beta1.Msg
                 * @typedef WithdrawWithinBatchCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {tendermint.liquidity.v1beta1.MsgWithdrawWithinBatchResponse} [response] MsgWithdrawWithinBatchResponse
                 */

                /**
                 * Calls WithdrawWithinBatch.
                 * @function withdrawWithinBatch
                 * @memberof tendermint.liquidity.v1beta1.Msg
                 * @instance
                 * @param {tendermint.liquidity.v1beta1.IMsgWithdrawWithinBatch} request MsgWithdrawWithinBatch message or plain object
                 * @param {tendermint.liquidity.v1beta1.Msg.WithdrawWithinBatchCallback} callback Node-style callback called with the error, if any, and MsgWithdrawWithinBatchResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Msg.prototype.withdrawWithinBatch = function withdrawWithinBatch(request, callback) {
                    return this.rpcCall(withdrawWithinBatch, $root.tendermint.liquidity.v1beta1.MsgWithdrawWithinBatch, $root.tendermint.liquidity.v1beta1.MsgWithdrawWithinBatchResponse, request, callback);
                }, "name", { value: "WithdrawWithinBatch" });

                /**
                 * Calls WithdrawWithinBatch.
                 * @function withdrawWithinBatch
                 * @memberof tendermint.liquidity.v1beta1.Msg
                 * @instance
                 * @param {tendermint.liquidity.v1beta1.IMsgWithdrawWithinBatch} request MsgWithdrawWithinBatch message or plain object
                 * @returns {Promise<tendermint.liquidity.v1beta1.MsgWithdrawWithinBatchResponse>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link tendermint.liquidity.v1beta1.Msg#swap}.
                 * @memberof tendermint.liquidity.v1beta1.Msg
                 * @typedef SwapCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {tendermint.liquidity.v1beta1.MsgSwapWithinBatchResponse} [response] MsgSwapWithinBatchResponse
                 */

                /**
                 * Calls Swap.
                 * @function swap
                 * @memberof tendermint.liquidity.v1beta1.Msg
                 * @instance
                 * @param {tendermint.liquidity.v1beta1.IMsgSwapWithinBatch} request MsgSwapWithinBatch message or plain object
                 * @param {tendermint.liquidity.v1beta1.Msg.SwapCallback} callback Node-style callback called with the error, if any, and MsgSwapWithinBatchResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Msg.prototype.swap = function swap(request, callback) {
                    return this.rpcCall(swap, $root.tendermint.liquidity.v1beta1.MsgSwapWithinBatch, $root.tendermint.liquidity.v1beta1.MsgSwapWithinBatchResponse, request, callback);
                }, "name", { value: "Swap" });

                /**
                 * Calls Swap.
                 * @function swap
                 * @memberof tendermint.liquidity.v1beta1.Msg
                 * @instance
                 * @param {tendermint.liquidity.v1beta1.IMsgSwapWithinBatch} request MsgSwapWithinBatch message or plain object
                 * @returns {Promise<tendermint.liquidity.v1beta1.MsgSwapWithinBatchResponse>} Promise
                 * @variation 2
                 */

                return Msg;
            })();

            v1beta1.MsgCreatePool = (function() {

                /**
                 * Properties of a MsgCreatePool.
                 * @memberof tendermint.liquidity.v1beta1
                 * @interface IMsgCreatePool
                 * @property {string|null} [pool_creator_address] MsgCreatePool pool_creator_address
                 * @property {number|null} [pool_type_id] MsgCreatePool pool_type_id
                 * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [deposit_coins] MsgCreatePool deposit_coins
                 */

                /**
                 * Constructs a new MsgCreatePool.
                 * @memberof tendermint.liquidity.v1beta1
                 * @classdesc Represents a MsgCreatePool.
                 * @implements IMsgCreatePool
                 * @constructor
                 * @param {tendermint.liquidity.v1beta1.IMsgCreatePool=} [properties] Properties to set
                 */
                function MsgCreatePool(properties) {
                    this.deposit_coins = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * MsgCreatePool pool_creator_address.
                 * @member {string} pool_creator_address
                 * @memberof tendermint.liquidity.v1beta1.MsgCreatePool
                 * @instance
                 */
                MsgCreatePool.prototype.pool_creator_address = "";

                /**
                 * MsgCreatePool pool_type_id.
                 * @member {number} pool_type_id
                 * @memberof tendermint.liquidity.v1beta1.MsgCreatePool
                 * @instance
                 */
                MsgCreatePool.prototype.pool_type_id = 0;

                /**
                 * MsgCreatePool deposit_coins.
                 * @member {Array.<cosmos.base.v1beta1.ICoin>} deposit_coins
                 * @memberof tendermint.liquidity.v1beta1.MsgCreatePool
                 * @instance
                 */
                MsgCreatePool.prototype.deposit_coins = $util.emptyArray;

                /**
                 * Encodes the specified MsgCreatePool message. Does not implicitly {@link tendermint.liquidity.v1beta1.MsgCreatePool.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.liquidity.v1beta1.MsgCreatePool
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IMsgCreatePool} message MsgCreatePool message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgCreatePool.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.pool_creator_address != null && Object.hasOwnProperty.call(message, "pool_creator_address"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.pool_creator_address);
                    if (message.pool_type_id != null && Object.hasOwnProperty.call(message, "pool_type_id"))
                        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.pool_type_id);
                    if (message.deposit_coins != null && message.deposit_coins.length)
                        for (let i = 0; i < message.deposit_coins.length; ++i)
                            $root.cosmos.base.v1beta1.Coin.encode(message.deposit_coins[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified MsgCreatePool message, length delimited. Does not implicitly {@link tendermint.liquidity.v1beta1.MsgCreatePool.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.MsgCreatePool
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IMsgCreatePool} message MsgCreatePool message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgCreatePool.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a MsgCreatePool message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.liquidity.v1beta1.MsgCreatePool
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.liquidity.v1beta1.MsgCreatePool} MsgCreatePool
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgCreatePool.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.liquidity.v1beta1.MsgCreatePool();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.pool_creator_address = reader.string();
                            break;
                        case 2:
                            message.pool_type_id = reader.uint32();
                            break;
                        case 4:
                            if (!(message.deposit_coins && message.deposit_coins.length))
                                message.deposit_coins = [];
                            message.deposit_coins.push($root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a MsgCreatePool message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.MsgCreatePool
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.liquidity.v1beta1.MsgCreatePool} MsgCreatePool
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgCreatePool.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a MsgCreatePool message.
                 * @function verify
                 * @memberof tendermint.liquidity.v1beta1.MsgCreatePool
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgCreatePool.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.pool_creator_address != null && message.hasOwnProperty("pool_creator_address"))
                        if (!$util.isString(message.pool_creator_address))
                            return "pool_creator_address: string expected";
                    if (message.pool_type_id != null && message.hasOwnProperty("pool_type_id"))
                        if (!$util.isInteger(message.pool_type_id))
                            return "pool_type_id: integer expected";
                    if (message.deposit_coins != null && message.hasOwnProperty("deposit_coins")) {
                        if (!Array.isArray(message.deposit_coins))
                            return "deposit_coins: array expected";
                        for (let i = 0; i < message.deposit_coins.length; ++i) {
                            let error = $root.cosmos.base.v1beta1.Coin.verify(message.deposit_coins[i]);
                            if (error)
                                return "deposit_coins." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a MsgCreatePool message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.liquidity.v1beta1.MsgCreatePool
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.liquidity.v1beta1.MsgCreatePool} MsgCreatePool
                 */
                MsgCreatePool.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.liquidity.v1beta1.MsgCreatePool)
                        return object;
                    let message = new $root.tendermint.liquidity.v1beta1.MsgCreatePool();
                    if (object.pool_creator_address != null)
                        message.pool_creator_address = String(object.pool_creator_address);
                    if (object.pool_type_id != null)
                        message.pool_type_id = object.pool_type_id >>> 0;
                    if (object.deposit_coins) {
                        if (!Array.isArray(object.deposit_coins))
                            throw TypeError(".tendermint.liquidity.v1beta1.MsgCreatePool.deposit_coins: array expected");
                        message.deposit_coins = [];
                        for (let i = 0; i < object.deposit_coins.length; ++i) {
                            if (typeof object.deposit_coins[i] !== "object")
                                throw TypeError(".tendermint.liquidity.v1beta1.MsgCreatePool.deposit_coins: object expected");
                            message.deposit_coins[i] = $root.cosmos.base.v1beta1.Coin.fromObject(object.deposit_coins[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a MsgCreatePool message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.liquidity.v1beta1.MsgCreatePool
                 * @static
                 * @param {tendermint.liquidity.v1beta1.MsgCreatePool} message MsgCreatePool
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgCreatePool.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.deposit_coins = [];
                    if (options.defaults) {
                        object.pool_creator_address = "";
                        object.pool_type_id = 0;
                    }
                    if (message.pool_creator_address != null && message.hasOwnProperty("pool_creator_address"))
                        object.pool_creator_address = message.pool_creator_address;
                    if (message.pool_type_id != null && message.hasOwnProperty("pool_type_id"))
                        object.pool_type_id = message.pool_type_id;
                    if (message.deposit_coins && message.deposit_coins.length) {
                        object.deposit_coins = [];
                        for (let j = 0; j < message.deposit_coins.length; ++j)
                            object.deposit_coins[j] = $root.cosmos.base.v1beta1.Coin.toObject(message.deposit_coins[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this MsgCreatePool to JSON.
                 * @function toJSON
                 * @memberof tendermint.liquidity.v1beta1.MsgCreatePool
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgCreatePool.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return MsgCreatePool;
            })();

            v1beta1.MsgCreatePoolResponse = (function() {

                /**
                 * Properties of a MsgCreatePoolResponse.
                 * @memberof tendermint.liquidity.v1beta1
                 * @interface IMsgCreatePoolResponse
                 */

                /**
                 * Constructs a new MsgCreatePoolResponse.
                 * @memberof tendermint.liquidity.v1beta1
                 * @classdesc Represents a MsgCreatePoolResponse.
                 * @implements IMsgCreatePoolResponse
                 * @constructor
                 * @param {tendermint.liquidity.v1beta1.IMsgCreatePoolResponse=} [properties] Properties to set
                 */
                function MsgCreatePoolResponse(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Encodes the specified MsgCreatePoolResponse message. Does not implicitly {@link tendermint.liquidity.v1beta1.MsgCreatePoolResponse.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.liquidity.v1beta1.MsgCreatePoolResponse
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IMsgCreatePoolResponse} message MsgCreatePoolResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgCreatePoolResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };

                /**
                 * Encodes the specified MsgCreatePoolResponse message, length delimited. Does not implicitly {@link tendermint.liquidity.v1beta1.MsgCreatePoolResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.MsgCreatePoolResponse
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IMsgCreatePoolResponse} message MsgCreatePoolResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgCreatePoolResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a MsgCreatePoolResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.liquidity.v1beta1.MsgCreatePoolResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.liquidity.v1beta1.MsgCreatePoolResponse} MsgCreatePoolResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgCreatePoolResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.liquidity.v1beta1.MsgCreatePoolResponse();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a MsgCreatePoolResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.MsgCreatePoolResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.liquidity.v1beta1.MsgCreatePoolResponse} MsgCreatePoolResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgCreatePoolResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a MsgCreatePoolResponse message.
                 * @function verify
                 * @memberof tendermint.liquidity.v1beta1.MsgCreatePoolResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgCreatePoolResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };

                /**
                 * Creates a MsgCreatePoolResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.liquidity.v1beta1.MsgCreatePoolResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.liquidity.v1beta1.MsgCreatePoolResponse} MsgCreatePoolResponse
                 */
                MsgCreatePoolResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.liquidity.v1beta1.MsgCreatePoolResponse)
                        return object;
                    return new $root.tendermint.liquidity.v1beta1.MsgCreatePoolResponse();
                };

                /**
                 * Creates a plain object from a MsgCreatePoolResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.liquidity.v1beta1.MsgCreatePoolResponse
                 * @static
                 * @param {tendermint.liquidity.v1beta1.MsgCreatePoolResponse} message MsgCreatePoolResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgCreatePoolResponse.toObject = function toObject() {
                    return {};
                };

                /**
                 * Converts this MsgCreatePoolResponse to JSON.
                 * @function toJSON
                 * @memberof tendermint.liquidity.v1beta1.MsgCreatePoolResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgCreatePoolResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return MsgCreatePoolResponse;
            })();

            v1beta1.MsgDepositWithinBatch = (function() {

                /**
                 * Properties of a MsgDepositWithinBatch.
                 * @memberof tendermint.liquidity.v1beta1
                 * @interface IMsgDepositWithinBatch
                 * @property {string|null} [depositor_address] MsgDepositWithinBatch depositor_address
                 * @property {Long|null} [pool_id] MsgDepositWithinBatch pool_id
                 * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [deposit_coins] MsgDepositWithinBatch deposit_coins
                 */

                /**
                 * Constructs a new MsgDepositWithinBatch.
                 * @memberof tendermint.liquidity.v1beta1
                 * @classdesc Represents a MsgDepositWithinBatch.
                 * @implements IMsgDepositWithinBatch
                 * @constructor
                 * @param {tendermint.liquidity.v1beta1.IMsgDepositWithinBatch=} [properties] Properties to set
                 */
                function MsgDepositWithinBatch(properties) {
                    this.deposit_coins = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * MsgDepositWithinBatch depositor_address.
                 * @member {string} depositor_address
                 * @memberof tendermint.liquidity.v1beta1.MsgDepositWithinBatch
                 * @instance
                 */
                MsgDepositWithinBatch.prototype.depositor_address = "";

                /**
                 * MsgDepositWithinBatch pool_id.
                 * @member {Long} pool_id
                 * @memberof tendermint.liquidity.v1beta1.MsgDepositWithinBatch
                 * @instance
                 */
                MsgDepositWithinBatch.prototype.pool_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * MsgDepositWithinBatch deposit_coins.
                 * @member {Array.<cosmos.base.v1beta1.ICoin>} deposit_coins
                 * @memberof tendermint.liquidity.v1beta1.MsgDepositWithinBatch
                 * @instance
                 */
                MsgDepositWithinBatch.prototype.deposit_coins = $util.emptyArray;

                /**
                 * Encodes the specified MsgDepositWithinBatch message. Does not implicitly {@link tendermint.liquidity.v1beta1.MsgDepositWithinBatch.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.liquidity.v1beta1.MsgDepositWithinBatch
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IMsgDepositWithinBatch} message MsgDepositWithinBatch message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgDepositWithinBatch.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.depositor_address != null && Object.hasOwnProperty.call(message, "depositor_address"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.depositor_address);
                    if (message.pool_id != null && Object.hasOwnProperty.call(message, "pool_id"))
                        writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.pool_id);
                    if (message.deposit_coins != null && message.deposit_coins.length)
                        for (let i = 0; i < message.deposit_coins.length; ++i)
                            $root.cosmos.base.v1beta1.Coin.encode(message.deposit_coins[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified MsgDepositWithinBatch message, length delimited. Does not implicitly {@link tendermint.liquidity.v1beta1.MsgDepositWithinBatch.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.MsgDepositWithinBatch
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IMsgDepositWithinBatch} message MsgDepositWithinBatch message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgDepositWithinBatch.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a MsgDepositWithinBatch message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.liquidity.v1beta1.MsgDepositWithinBatch
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.liquidity.v1beta1.MsgDepositWithinBatch} MsgDepositWithinBatch
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgDepositWithinBatch.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.liquidity.v1beta1.MsgDepositWithinBatch();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.depositor_address = reader.string();
                            break;
                        case 2:
                            message.pool_id = reader.uint64();
                            break;
                        case 3:
                            if (!(message.deposit_coins && message.deposit_coins.length))
                                message.deposit_coins = [];
                            message.deposit_coins.push($root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a MsgDepositWithinBatch message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.MsgDepositWithinBatch
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.liquidity.v1beta1.MsgDepositWithinBatch} MsgDepositWithinBatch
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgDepositWithinBatch.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a MsgDepositWithinBatch message.
                 * @function verify
                 * @memberof tendermint.liquidity.v1beta1.MsgDepositWithinBatch
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgDepositWithinBatch.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.depositor_address != null && message.hasOwnProperty("depositor_address"))
                        if (!$util.isString(message.depositor_address))
                            return "depositor_address: string expected";
                    if (message.pool_id != null && message.hasOwnProperty("pool_id"))
                        if (!$util.isInteger(message.pool_id) && !(message.pool_id && $util.isInteger(message.pool_id.low) && $util.isInteger(message.pool_id.high)))
                            return "pool_id: integer|Long expected";
                    if (message.deposit_coins != null && message.hasOwnProperty("deposit_coins")) {
                        if (!Array.isArray(message.deposit_coins))
                            return "deposit_coins: array expected";
                        for (let i = 0; i < message.deposit_coins.length; ++i) {
                            let error = $root.cosmos.base.v1beta1.Coin.verify(message.deposit_coins[i]);
                            if (error)
                                return "deposit_coins." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a MsgDepositWithinBatch message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.liquidity.v1beta1.MsgDepositWithinBatch
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.liquidity.v1beta1.MsgDepositWithinBatch} MsgDepositWithinBatch
                 */
                MsgDepositWithinBatch.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.liquidity.v1beta1.MsgDepositWithinBatch)
                        return object;
                    let message = new $root.tendermint.liquidity.v1beta1.MsgDepositWithinBatch();
                    if (object.depositor_address != null)
                        message.depositor_address = String(object.depositor_address);
                    if (object.pool_id != null)
                        if ($util.Long)
                            (message.pool_id = $util.Long.fromValue(object.pool_id)).unsigned = true;
                        else if (typeof object.pool_id === "string")
                            message.pool_id = parseInt(object.pool_id, 10);
                        else if (typeof object.pool_id === "number")
                            message.pool_id = object.pool_id;
                        else if (typeof object.pool_id === "object")
                            message.pool_id = new $util.LongBits(object.pool_id.low >>> 0, object.pool_id.high >>> 0).toNumber(true);
                    if (object.deposit_coins) {
                        if (!Array.isArray(object.deposit_coins))
                            throw TypeError(".tendermint.liquidity.v1beta1.MsgDepositWithinBatch.deposit_coins: array expected");
                        message.deposit_coins = [];
                        for (let i = 0; i < object.deposit_coins.length; ++i) {
                            if (typeof object.deposit_coins[i] !== "object")
                                throw TypeError(".tendermint.liquidity.v1beta1.MsgDepositWithinBatch.deposit_coins: object expected");
                            message.deposit_coins[i] = $root.cosmos.base.v1beta1.Coin.fromObject(object.deposit_coins[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a MsgDepositWithinBatch message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.liquidity.v1beta1.MsgDepositWithinBatch
                 * @static
                 * @param {tendermint.liquidity.v1beta1.MsgDepositWithinBatch} message MsgDepositWithinBatch
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgDepositWithinBatch.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.deposit_coins = [];
                    if (options.defaults) {
                        object.depositor_address = "";
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.pool_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.pool_id = options.longs === String ? "0" : 0;
                    }
                    if (message.depositor_address != null && message.hasOwnProperty("depositor_address"))
                        object.depositor_address = message.depositor_address;
                    if (message.pool_id != null && message.hasOwnProperty("pool_id"))
                        if (typeof message.pool_id === "number")
                            object.pool_id = options.longs === String ? String(message.pool_id) : message.pool_id;
                        else
                            object.pool_id = options.longs === String ? $util.Long.prototype.toString.call(message.pool_id) : options.longs === Number ? new $util.LongBits(message.pool_id.low >>> 0, message.pool_id.high >>> 0).toNumber(true) : message.pool_id;
                    if (message.deposit_coins && message.deposit_coins.length) {
                        object.deposit_coins = [];
                        for (let j = 0; j < message.deposit_coins.length; ++j)
                            object.deposit_coins[j] = $root.cosmos.base.v1beta1.Coin.toObject(message.deposit_coins[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this MsgDepositWithinBatch to JSON.
                 * @function toJSON
                 * @memberof tendermint.liquidity.v1beta1.MsgDepositWithinBatch
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgDepositWithinBatch.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return MsgDepositWithinBatch;
            })();

            v1beta1.MsgDepositWithinBatchResponse = (function() {

                /**
                 * Properties of a MsgDepositWithinBatchResponse.
                 * @memberof tendermint.liquidity.v1beta1
                 * @interface IMsgDepositWithinBatchResponse
                 */

                /**
                 * Constructs a new MsgDepositWithinBatchResponse.
                 * @memberof tendermint.liquidity.v1beta1
                 * @classdesc Represents a MsgDepositWithinBatchResponse.
                 * @implements IMsgDepositWithinBatchResponse
                 * @constructor
                 * @param {tendermint.liquidity.v1beta1.IMsgDepositWithinBatchResponse=} [properties] Properties to set
                 */
                function MsgDepositWithinBatchResponse(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Encodes the specified MsgDepositWithinBatchResponse message. Does not implicitly {@link tendermint.liquidity.v1beta1.MsgDepositWithinBatchResponse.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.liquidity.v1beta1.MsgDepositWithinBatchResponse
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IMsgDepositWithinBatchResponse} message MsgDepositWithinBatchResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgDepositWithinBatchResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };

                /**
                 * Encodes the specified MsgDepositWithinBatchResponse message, length delimited. Does not implicitly {@link tendermint.liquidity.v1beta1.MsgDepositWithinBatchResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.MsgDepositWithinBatchResponse
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IMsgDepositWithinBatchResponse} message MsgDepositWithinBatchResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgDepositWithinBatchResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a MsgDepositWithinBatchResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.liquidity.v1beta1.MsgDepositWithinBatchResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.liquidity.v1beta1.MsgDepositWithinBatchResponse} MsgDepositWithinBatchResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgDepositWithinBatchResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.liquidity.v1beta1.MsgDepositWithinBatchResponse();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a MsgDepositWithinBatchResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.MsgDepositWithinBatchResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.liquidity.v1beta1.MsgDepositWithinBatchResponse} MsgDepositWithinBatchResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgDepositWithinBatchResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a MsgDepositWithinBatchResponse message.
                 * @function verify
                 * @memberof tendermint.liquidity.v1beta1.MsgDepositWithinBatchResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgDepositWithinBatchResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };

                /**
                 * Creates a MsgDepositWithinBatchResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.liquidity.v1beta1.MsgDepositWithinBatchResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.liquidity.v1beta1.MsgDepositWithinBatchResponse} MsgDepositWithinBatchResponse
                 */
                MsgDepositWithinBatchResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.liquidity.v1beta1.MsgDepositWithinBatchResponse)
                        return object;
                    return new $root.tendermint.liquidity.v1beta1.MsgDepositWithinBatchResponse();
                };

                /**
                 * Creates a plain object from a MsgDepositWithinBatchResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.liquidity.v1beta1.MsgDepositWithinBatchResponse
                 * @static
                 * @param {tendermint.liquidity.v1beta1.MsgDepositWithinBatchResponse} message MsgDepositWithinBatchResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgDepositWithinBatchResponse.toObject = function toObject() {
                    return {};
                };

                /**
                 * Converts this MsgDepositWithinBatchResponse to JSON.
                 * @function toJSON
                 * @memberof tendermint.liquidity.v1beta1.MsgDepositWithinBatchResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgDepositWithinBatchResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return MsgDepositWithinBatchResponse;
            })();

            v1beta1.MsgWithdrawWithinBatch = (function() {

                /**
                 * Properties of a MsgWithdrawWithinBatch.
                 * @memberof tendermint.liquidity.v1beta1
                 * @interface IMsgWithdrawWithinBatch
                 * @property {string|null} [withdrawer_address] MsgWithdrawWithinBatch withdrawer_address
                 * @property {Long|null} [pool_id] MsgWithdrawWithinBatch pool_id
                 * @property {cosmos.base.v1beta1.ICoin|null} [pool_coin] MsgWithdrawWithinBatch pool_coin
                 */

                /**
                 * Constructs a new MsgWithdrawWithinBatch.
                 * @memberof tendermint.liquidity.v1beta1
                 * @classdesc Represents a MsgWithdrawWithinBatch.
                 * @implements IMsgWithdrawWithinBatch
                 * @constructor
                 * @param {tendermint.liquidity.v1beta1.IMsgWithdrawWithinBatch=} [properties] Properties to set
                 */
                function MsgWithdrawWithinBatch(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * MsgWithdrawWithinBatch withdrawer_address.
                 * @member {string} withdrawer_address
                 * @memberof tendermint.liquidity.v1beta1.MsgWithdrawWithinBatch
                 * @instance
                 */
                MsgWithdrawWithinBatch.prototype.withdrawer_address = "";

                /**
                 * MsgWithdrawWithinBatch pool_id.
                 * @member {Long} pool_id
                 * @memberof tendermint.liquidity.v1beta1.MsgWithdrawWithinBatch
                 * @instance
                 */
                MsgWithdrawWithinBatch.prototype.pool_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * MsgWithdrawWithinBatch pool_coin.
                 * @member {cosmos.base.v1beta1.ICoin|null|undefined} pool_coin
                 * @memberof tendermint.liquidity.v1beta1.MsgWithdrawWithinBatch
                 * @instance
                 */
                MsgWithdrawWithinBatch.prototype.pool_coin = null;

                /**
                 * Encodes the specified MsgWithdrawWithinBatch message. Does not implicitly {@link tendermint.liquidity.v1beta1.MsgWithdrawWithinBatch.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.liquidity.v1beta1.MsgWithdrawWithinBatch
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IMsgWithdrawWithinBatch} message MsgWithdrawWithinBatch message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgWithdrawWithinBatch.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.withdrawer_address != null && Object.hasOwnProperty.call(message, "withdrawer_address"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.withdrawer_address);
                    if (message.pool_id != null && Object.hasOwnProperty.call(message, "pool_id"))
                        writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.pool_id);
                    if (message.pool_coin != null && Object.hasOwnProperty.call(message, "pool_coin"))
                        $root.cosmos.base.v1beta1.Coin.encode(message.pool_coin, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified MsgWithdrawWithinBatch message, length delimited. Does not implicitly {@link tendermint.liquidity.v1beta1.MsgWithdrawWithinBatch.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.MsgWithdrawWithinBatch
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IMsgWithdrawWithinBatch} message MsgWithdrawWithinBatch message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgWithdrawWithinBatch.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a MsgWithdrawWithinBatch message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.liquidity.v1beta1.MsgWithdrawWithinBatch
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.liquidity.v1beta1.MsgWithdrawWithinBatch} MsgWithdrawWithinBatch
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgWithdrawWithinBatch.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.liquidity.v1beta1.MsgWithdrawWithinBatch();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.withdrawer_address = reader.string();
                            break;
                        case 2:
                            message.pool_id = reader.uint64();
                            break;
                        case 3:
                            message.pool_coin = $root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a MsgWithdrawWithinBatch message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.MsgWithdrawWithinBatch
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.liquidity.v1beta1.MsgWithdrawWithinBatch} MsgWithdrawWithinBatch
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgWithdrawWithinBatch.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a MsgWithdrawWithinBatch message.
                 * @function verify
                 * @memberof tendermint.liquidity.v1beta1.MsgWithdrawWithinBatch
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgWithdrawWithinBatch.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.withdrawer_address != null && message.hasOwnProperty("withdrawer_address"))
                        if (!$util.isString(message.withdrawer_address))
                            return "withdrawer_address: string expected";
                    if (message.pool_id != null && message.hasOwnProperty("pool_id"))
                        if (!$util.isInteger(message.pool_id) && !(message.pool_id && $util.isInteger(message.pool_id.low) && $util.isInteger(message.pool_id.high)))
                            return "pool_id: integer|Long expected";
                    if (message.pool_coin != null && message.hasOwnProperty("pool_coin")) {
                        let error = $root.cosmos.base.v1beta1.Coin.verify(message.pool_coin);
                        if (error)
                            return "pool_coin." + error;
                    }
                    return null;
                };

                /**
                 * Creates a MsgWithdrawWithinBatch message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.liquidity.v1beta1.MsgWithdrawWithinBatch
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.liquidity.v1beta1.MsgWithdrawWithinBatch} MsgWithdrawWithinBatch
                 */
                MsgWithdrawWithinBatch.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.liquidity.v1beta1.MsgWithdrawWithinBatch)
                        return object;
                    let message = new $root.tendermint.liquidity.v1beta1.MsgWithdrawWithinBatch();
                    if (object.withdrawer_address != null)
                        message.withdrawer_address = String(object.withdrawer_address);
                    if (object.pool_id != null)
                        if ($util.Long)
                            (message.pool_id = $util.Long.fromValue(object.pool_id)).unsigned = true;
                        else if (typeof object.pool_id === "string")
                            message.pool_id = parseInt(object.pool_id, 10);
                        else if (typeof object.pool_id === "number")
                            message.pool_id = object.pool_id;
                        else if (typeof object.pool_id === "object")
                            message.pool_id = new $util.LongBits(object.pool_id.low >>> 0, object.pool_id.high >>> 0).toNumber(true);
                    if (object.pool_coin != null) {
                        if (typeof object.pool_coin !== "object")
                            throw TypeError(".tendermint.liquidity.v1beta1.MsgWithdrawWithinBatch.pool_coin: object expected");
                        message.pool_coin = $root.cosmos.base.v1beta1.Coin.fromObject(object.pool_coin);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a MsgWithdrawWithinBatch message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.liquidity.v1beta1.MsgWithdrawWithinBatch
                 * @static
                 * @param {tendermint.liquidity.v1beta1.MsgWithdrawWithinBatch} message MsgWithdrawWithinBatch
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgWithdrawWithinBatch.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.withdrawer_address = "";
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.pool_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.pool_id = options.longs === String ? "0" : 0;
                        object.pool_coin = null;
                    }
                    if (message.withdrawer_address != null && message.hasOwnProperty("withdrawer_address"))
                        object.withdrawer_address = message.withdrawer_address;
                    if (message.pool_id != null && message.hasOwnProperty("pool_id"))
                        if (typeof message.pool_id === "number")
                            object.pool_id = options.longs === String ? String(message.pool_id) : message.pool_id;
                        else
                            object.pool_id = options.longs === String ? $util.Long.prototype.toString.call(message.pool_id) : options.longs === Number ? new $util.LongBits(message.pool_id.low >>> 0, message.pool_id.high >>> 0).toNumber(true) : message.pool_id;
                    if (message.pool_coin != null && message.hasOwnProperty("pool_coin"))
                        object.pool_coin = $root.cosmos.base.v1beta1.Coin.toObject(message.pool_coin, options);
                    return object;
                };

                /**
                 * Converts this MsgWithdrawWithinBatch to JSON.
                 * @function toJSON
                 * @memberof tendermint.liquidity.v1beta1.MsgWithdrawWithinBatch
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgWithdrawWithinBatch.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return MsgWithdrawWithinBatch;
            })();

            v1beta1.MsgWithdrawWithinBatchResponse = (function() {

                /**
                 * Properties of a MsgWithdrawWithinBatchResponse.
                 * @memberof tendermint.liquidity.v1beta1
                 * @interface IMsgWithdrawWithinBatchResponse
                 */

                /**
                 * Constructs a new MsgWithdrawWithinBatchResponse.
                 * @memberof tendermint.liquidity.v1beta1
                 * @classdesc Represents a MsgWithdrawWithinBatchResponse.
                 * @implements IMsgWithdrawWithinBatchResponse
                 * @constructor
                 * @param {tendermint.liquidity.v1beta1.IMsgWithdrawWithinBatchResponse=} [properties] Properties to set
                 */
                function MsgWithdrawWithinBatchResponse(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Encodes the specified MsgWithdrawWithinBatchResponse message. Does not implicitly {@link tendermint.liquidity.v1beta1.MsgWithdrawWithinBatchResponse.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.liquidity.v1beta1.MsgWithdrawWithinBatchResponse
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IMsgWithdrawWithinBatchResponse} message MsgWithdrawWithinBatchResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgWithdrawWithinBatchResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };

                /**
                 * Encodes the specified MsgWithdrawWithinBatchResponse message, length delimited. Does not implicitly {@link tendermint.liquidity.v1beta1.MsgWithdrawWithinBatchResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.MsgWithdrawWithinBatchResponse
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IMsgWithdrawWithinBatchResponse} message MsgWithdrawWithinBatchResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgWithdrawWithinBatchResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a MsgWithdrawWithinBatchResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.liquidity.v1beta1.MsgWithdrawWithinBatchResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.liquidity.v1beta1.MsgWithdrawWithinBatchResponse} MsgWithdrawWithinBatchResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgWithdrawWithinBatchResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.liquidity.v1beta1.MsgWithdrawWithinBatchResponse();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a MsgWithdrawWithinBatchResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.MsgWithdrawWithinBatchResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.liquidity.v1beta1.MsgWithdrawWithinBatchResponse} MsgWithdrawWithinBatchResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgWithdrawWithinBatchResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a MsgWithdrawWithinBatchResponse message.
                 * @function verify
                 * @memberof tendermint.liquidity.v1beta1.MsgWithdrawWithinBatchResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgWithdrawWithinBatchResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };

                /**
                 * Creates a MsgWithdrawWithinBatchResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.liquidity.v1beta1.MsgWithdrawWithinBatchResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.liquidity.v1beta1.MsgWithdrawWithinBatchResponse} MsgWithdrawWithinBatchResponse
                 */
                MsgWithdrawWithinBatchResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.liquidity.v1beta1.MsgWithdrawWithinBatchResponse)
                        return object;
                    return new $root.tendermint.liquidity.v1beta1.MsgWithdrawWithinBatchResponse();
                };

                /**
                 * Creates a plain object from a MsgWithdrawWithinBatchResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.liquidity.v1beta1.MsgWithdrawWithinBatchResponse
                 * @static
                 * @param {tendermint.liquidity.v1beta1.MsgWithdrawWithinBatchResponse} message MsgWithdrawWithinBatchResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgWithdrawWithinBatchResponse.toObject = function toObject() {
                    return {};
                };

                /**
                 * Converts this MsgWithdrawWithinBatchResponse to JSON.
                 * @function toJSON
                 * @memberof tendermint.liquidity.v1beta1.MsgWithdrawWithinBatchResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgWithdrawWithinBatchResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return MsgWithdrawWithinBatchResponse;
            })();

            v1beta1.MsgSwapWithinBatch = (function() {

                /**
                 * Properties of a MsgSwapWithinBatch.
                 * @memberof tendermint.liquidity.v1beta1
                 * @interface IMsgSwapWithinBatch
                 * @property {string|null} [swap_requester_address] MsgSwapWithinBatch swap_requester_address
                 * @property {Long|null} [pool_id] MsgSwapWithinBatch pool_id
                 * @property {number|null} [swap_type_id] MsgSwapWithinBatch swap_type_id
                 * @property {cosmos.base.v1beta1.ICoin|null} [offer_coin] MsgSwapWithinBatch offer_coin
                 * @property {string|null} [demand_coin_denom] MsgSwapWithinBatch demand_coin_denom
                 * @property {cosmos.base.v1beta1.ICoin|null} [offer_coin_fee] MsgSwapWithinBatch offer_coin_fee
                 * @property {string|null} [order_price] MsgSwapWithinBatch order_price
                 */

                /**
                 * Constructs a new MsgSwapWithinBatch.
                 * @memberof tendermint.liquidity.v1beta1
                 * @classdesc Represents a MsgSwapWithinBatch.
                 * @implements IMsgSwapWithinBatch
                 * @constructor
                 * @param {tendermint.liquidity.v1beta1.IMsgSwapWithinBatch=} [properties] Properties to set
                 */
                function MsgSwapWithinBatch(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * MsgSwapWithinBatch swap_requester_address.
                 * @member {string} swap_requester_address
                 * @memberof tendermint.liquidity.v1beta1.MsgSwapWithinBatch
                 * @instance
                 */
                MsgSwapWithinBatch.prototype.swap_requester_address = "";

                /**
                 * MsgSwapWithinBatch pool_id.
                 * @member {Long} pool_id
                 * @memberof tendermint.liquidity.v1beta1.MsgSwapWithinBatch
                 * @instance
                 */
                MsgSwapWithinBatch.prototype.pool_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * MsgSwapWithinBatch swap_type_id.
                 * @member {number} swap_type_id
                 * @memberof tendermint.liquidity.v1beta1.MsgSwapWithinBatch
                 * @instance
                 */
                MsgSwapWithinBatch.prototype.swap_type_id = 0;

                /**
                 * MsgSwapWithinBatch offer_coin.
                 * @member {cosmos.base.v1beta1.ICoin|null|undefined} offer_coin
                 * @memberof tendermint.liquidity.v1beta1.MsgSwapWithinBatch
                 * @instance
                 */
                MsgSwapWithinBatch.prototype.offer_coin = null;

                /**
                 * MsgSwapWithinBatch demand_coin_denom.
                 * @member {string} demand_coin_denom
                 * @memberof tendermint.liquidity.v1beta1.MsgSwapWithinBatch
                 * @instance
                 */
                MsgSwapWithinBatch.prototype.demand_coin_denom = "";

                /**
                 * MsgSwapWithinBatch offer_coin_fee.
                 * @member {cosmos.base.v1beta1.ICoin|null|undefined} offer_coin_fee
                 * @memberof tendermint.liquidity.v1beta1.MsgSwapWithinBatch
                 * @instance
                 */
                MsgSwapWithinBatch.prototype.offer_coin_fee = null;

                /**
                 * MsgSwapWithinBatch order_price.
                 * @member {string} order_price
                 * @memberof tendermint.liquidity.v1beta1.MsgSwapWithinBatch
                 * @instance
                 */
                MsgSwapWithinBatch.prototype.order_price = "";

                /**
                 * Encodes the specified MsgSwapWithinBatch message. Does not implicitly {@link tendermint.liquidity.v1beta1.MsgSwapWithinBatch.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.liquidity.v1beta1.MsgSwapWithinBatch
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IMsgSwapWithinBatch} message MsgSwapWithinBatch message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgSwapWithinBatch.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.swap_requester_address != null && Object.hasOwnProperty.call(message, "swap_requester_address"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.swap_requester_address);
                    if (message.pool_id != null && Object.hasOwnProperty.call(message, "pool_id"))
                        writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.pool_id);
                    if (message.swap_type_id != null && Object.hasOwnProperty.call(message, "swap_type_id"))
                        writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.swap_type_id);
                    if (message.offer_coin != null && Object.hasOwnProperty.call(message, "offer_coin"))
                        $root.cosmos.base.v1beta1.Coin.encode(message.offer_coin, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.demand_coin_denom != null && Object.hasOwnProperty.call(message, "demand_coin_denom"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.demand_coin_denom);
                    if (message.offer_coin_fee != null && Object.hasOwnProperty.call(message, "offer_coin_fee"))
                        $root.cosmos.base.v1beta1.Coin.encode(message.offer_coin_fee, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.order_price != null && Object.hasOwnProperty.call(message, "order_price"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.order_price);
                    return writer;
                };

                /**
                 * Encodes the specified MsgSwapWithinBatch message, length delimited. Does not implicitly {@link tendermint.liquidity.v1beta1.MsgSwapWithinBatch.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.MsgSwapWithinBatch
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IMsgSwapWithinBatch} message MsgSwapWithinBatch message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgSwapWithinBatch.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a MsgSwapWithinBatch message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.liquidity.v1beta1.MsgSwapWithinBatch
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.liquidity.v1beta1.MsgSwapWithinBatch} MsgSwapWithinBatch
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgSwapWithinBatch.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.liquidity.v1beta1.MsgSwapWithinBatch();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.swap_requester_address = reader.string();
                            break;
                        case 2:
                            message.pool_id = reader.uint64();
                            break;
                        case 3:
                            message.swap_type_id = reader.uint32();
                            break;
                        case 4:
                            message.offer_coin = $root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32());
                            break;
                        case 5:
                            message.demand_coin_denom = reader.string();
                            break;
                        case 6:
                            message.offer_coin_fee = $root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32());
                            break;
                        case 7:
                            message.order_price = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a MsgSwapWithinBatch message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.MsgSwapWithinBatch
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.liquidity.v1beta1.MsgSwapWithinBatch} MsgSwapWithinBatch
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgSwapWithinBatch.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a MsgSwapWithinBatch message.
                 * @function verify
                 * @memberof tendermint.liquidity.v1beta1.MsgSwapWithinBatch
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgSwapWithinBatch.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.swap_requester_address != null && message.hasOwnProperty("swap_requester_address"))
                        if (!$util.isString(message.swap_requester_address))
                            return "swap_requester_address: string expected";
                    if (message.pool_id != null && message.hasOwnProperty("pool_id"))
                        if (!$util.isInteger(message.pool_id) && !(message.pool_id && $util.isInteger(message.pool_id.low) && $util.isInteger(message.pool_id.high)))
                            return "pool_id: integer|Long expected";
                    if (message.swap_type_id != null && message.hasOwnProperty("swap_type_id"))
                        if (!$util.isInteger(message.swap_type_id))
                            return "swap_type_id: integer expected";
                    if (message.offer_coin != null && message.hasOwnProperty("offer_coin")) {
                        let error = $root.cosmos.base.v1beta1.Coin.verify(message.offer_coin);
                        if (error)
                            return "offer_coin." + error;
                    }
                    if (message.demand_coin_denom != null && message.hasOwnProperty("demand_coin_denom"))
                        if (!$util.isString(message.demand_coin_denom))
                            return "demand_coin_denom: string expected";
                    if (message.offer_coin_fee != null && message.hasOwnProperty("offer_coin_fee")) {
                        let error = $root.cosmos.base.v1beta1.Coin.verify(message.offer_coin_fee);
                        if (error)
                            return "offer_coin_fee." + error;
                    }
                    if (message.order_price != null && message.hasOwnProperty("order_price"))
                        if (!$util.isString(message.order_price))
                            return "order_price: string expected";
                    return null;
                };

                /**
                 * Creates a MsgSwapWithinBatch message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.liquidity.v1beta1.MsgSwapWithinBatch
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.liquidity.v1beta1.MsgSwapWithinBatch} MsgSwapWithinBatch
                 */
                MsgSwapWithinBatch.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.liquidity.v1beta1.MsgSwapWithinBatch)
                        return object;
                    let message = new $root.tendermint.liquidity.v1beta1.MsgSwapWithinBatch();
                    if (object.swap_requester_address != null)
                        message.swap_requester_address = String(object.swap_requester_address);
                    if (object.pool_id != null)
                        if ($util.Long)
                            (message.pool_id = $util.Long.fromValue(object.pool_id)).unsigned = true;
                        else if (typeof object.pool_id === "string")
                            message.pool_id = parseInt(object.pool_id, 10);
                        else if (typeof object.pool_id === "number")
                            message.pool_id = object.pool_id;
                        else if (typeof object.pool_id === "object")
                            message.pool_id = new $util.LongBits(object.pool_id.low >>> 0, object.pool_id.high >>> 0).toNumber(true);
                    if (object.swap_type_id != null)
                        message.swap_type_id = object.swap_type_id >>> 0;
                    if (object.offer_coin != null) {
                        if (typeof object.offer_coin !== "object")
                            throw TypeError(".tendermint.liquidity.v1beta1.MsgSwapWithinBatch.offer_coin: object expected");
                        message.offer_coin = $root.cosmos.base.v1beta1.Coin.fromObject(object.offer_coin);
                    }
                    if (object.demand_coin_denom != null)
                        message.demand_coin_denom = String(object.demand_coin_denom);
                    if (object.offer_coin_fee != null) {
                        if (typeof object.offer_coin_fee !== "object")
                            throw TypeError(".tendermint.liquidity.v1beta1.MsgSwapWithinBatch.offer_coin_fee: object expected");
                        message.offer_coin_fee = $root.cosmos.base.v1beta1.Coin.fromObject(object.offer_coin_fee);
                    }
                    if (object.order_price != null)
                        message.order_price = String(object.order_price);
                    return message;
                };

                /**
                 * Creates a plain object from a MsgSwapWithinBatch message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.liquidity.v1beta1.MsgSwapWithinBatch
                 * @static
                 * @param {tendermint.liquidity.v1beta1.MsgSwapWithinBatch} message MsgSwapWithinBatch
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgSwapWithinBatch.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.swap_requester_address = "";
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.pool_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.pool_id = options.longs === String ? "0" : 0;
                        object.swap_type_id = 0;
                        object.offer_coin = null;
                        object.demand_coin_denom = "";
                        object.offer_coin_fee = null;
                        object.order_price = "";
                    }
                    if (message.swap_requester_address != null && message.hasOwnProperty("swap_requester_address"))
                        object.swap_requester_address = message.swap_requester_address;
                    if (message.pool_id != null && message.hasOwnProperty("pool_id"))
                        if (typeof message.pool_id === "number")
                            object.pool_id = options.longs === String ? String(message.pool_id) : message.pool_id;
                        else
                            object.pool_id = options.longs === String ? $util.Long.prototype.toString.call(message.pool_id) : options.longs === Number ? new $util.LongBits(message.pool_id.low >>> 0, message.pool_id.high >>> 0).toNumber(true) : message.pool_id;
                    if (message.swap_type_id != null && message.hasOwnProperty("swap_type_id"))
                        object.swap_type_id = message.swap_type_id;
                    if (message.offer_coin != null && message.hasOwnProperty("offer_coin"))
                        object.offer_coin = $root.cosmos.base.v1beta1.Coin.toObject(message.offer_coin, options);
                    if (message.demand_coin_denom != null && message.hasOwnProperty("demand_coin_denom"))
                        object.demand_coin_denom = message.demand_coin_denom;
                    if (message.offer_coin_fee != null && message.hasOwnProperty("offer_coin_fee"))
                        object.offer_coin_fee = $root.cosmos.base.v1beta1.Coin.toObject(message.offer_coin_fee, options);
                    if (message.order_price != null && message.hasOwnProperty("order_price"))
                        object.order_price = message.order_price;
                    return object;
                };

                /**
                 * Converts this MsgSwapWithinBatch to JSON.
                 * @function toJSON
                 * @memberof tendermint.liquidity.v1beta1.MsgSwapWithinBatch
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgSwapWithinBatch.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return MsgSwapWithinBatch;
            })();

            v1beta1.MsgSwapWithinBatchResponse = (function() {

                /**
                 * Properties of a MsgSwapWithinBatchResponse.
                 * @memberof tendermint.liquidity.v1beta1
                 * @interface IMsgSwapWithinBatchResponse
                 */

                /**
                 * Constructs a new MsgSwapWithinBatchResponse.
                 * @memberof tendermint.liquidity.v1beta1
                 * @classdesc Represents a MsgSwapWithinBatchResponse.
                 * @implements IMsgSwapWithinBatchResponse
                 * @constructor
                 * @param {tendermint.liquidity.v1beta1.IMsgSwapWithinBatchResponse=} [properties] Properties to set
                 */
                function MsgSwapWithinBatchResponse(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Encodes the specified MsgSwapWithinBatchResponse message. Does not implicitly {@link tendermint.liquidity.v1beta1.MsgSwapWithinBatchResponse.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.liquidity.v1beta1.MsgSwapWithinBatchResponse
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IMsgSwapWithinBatchResponse} message MsgSwapWithinBatchResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgSwapWithinBatchResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };

                /**
                 * Encodes the specified MsgSwapWithinBatchResponse message, length delimited. Does not implicitly {@link tendermint.liquidity.v1beta1.MsgSwapWithinBatchResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.MsgSwapWithinBatchResponse
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IMsgSwapWithinBatchResponse} message MsgSwapWithinBatchResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgSwapWithinBatchResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a MsgSwapWithinBatchResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.liquidity.v1beta1.MsgSwapWithinBatchResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.liquidity.v1beta1.MsgSwapWithinBatchResponse} MsgSwapWithinBatchResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgSwapWithinBatchResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.liquidity.v1beta1.MsgSwapWithinBatchResponse();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a MsgSwapWithinBatchResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.MsgSwapWithinBatchResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.liquidity.v1beta1.MsgSwapWithinBatchResponse} MsgSwapWithinBatchResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgSwapWithinBatchResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a MsgSwapWithinBatchResponse message.
                 * @function verify
                 * @memberof tendermint.liquidity.v1beta1.MsgSwapWithinBatchResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgSwapWithinBatchResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };

                /**
                 * Creates a MsgSwapWithinBatchResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.liquidity.v1beta1.MsgSwapWithinBatchResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.liquidity.v1beta1.MsgSwapWithinBatchResponse} MsgSwapWithinBatchResponse
                 */
                MsgSwapWithinBatchResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.liquidity.v1beta1.MsgSwapWithinBatchResponse)
                        return object;
                    return new $root.tendermint.liquidity.v1beta1.MsgSwapWithinBatchResponse();
                };

                /**
                 * Creates a plain object from a MsgSwapWithinBatchResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.liquidity.v1beta1.MsgSwapWithinBatchResponse
                 * @static
                 * @param {tendermint.liquidity.v1beta1.MsgSwapWithinBatchResponse} message MsgSwapWithinBatchResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgSwapWithinBatchResponse.toObject = function toObject() {
                    return {};
                };

                /**
                 * Converts this MsgSwapWithinBatchResponse to JSON.
                 * @function toJSON
                 * @memberof tendermint.liquidity.v1beta1.MsgSwapWithinBatchResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgSwapWithinBatchResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return MsgSwapWithinBatchResponse;
            })();

            v1beta1.PoolRecord = (function() {

                /**
                 * Properties of a PoolRecord.
                 * @memberof tendermint.liquidity.v1beta1
                 * @interface IPoolRecord
                 * @property {tendermint.liquidity.v1beta1.IPool|null} [pool] PoolRecord pool
                 * @property {tendermint.liquidity.v1beta1.IPoolMetadata|null} [pool_metadata] PoolRecord pool_metadata
                 * @property {tendermint.liquidity.v1beta1.IPoolBatch|null} [pool_batch] PoolRecord pool_batch
                 * @property {Array.<tendermint.liquidity.v1beta1.IDepositMsgState>|null} [deposit_msg_states] PoolRecord deposit_msg_states
                 * @property {Array.<tendermint.liquidity.v1beta1.IWithdrawMsgState>|null} [withdraw_msg_states] PoolRecord withdraw_msg_states
                 * @property {Array.<tendermint.liquidity.v1beta1.ISwapMsgState>|null} [swap_msg_states] PoolRecord swap_msg_states
                 */

                /**
                 * Constructs a new PoolRecord.
                 * @memberof tendermint.liquidity.v1beta1
                 * @classdesc Represents a PoolRecord.
                 * @implements IPoolRecord
                 * @constructor
                 * @param {tendermint.liquidity.v1beta1.IPoolRecord=} [properties] Properties to set
                 */
                function PoolRecord(properties) {
                    this.deposit_msg_states = [];
                    this.withdraw_msg_states = [];
                    this.swap_msg_states = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * PoolRecord pool.
                 * @member {tendermint.liquidity.v1beta1.IPool|null|undefined} pool
                 * @memberof tendermint.liquidity.v1beta1.PoolRecord
                 * @instance
                 */
                PoolRecord.prototype.pool = null;

                /**
                 * PoolRecord pool_metadata.
                 * @member {tendermint.liquidity.v1beta1.IPoolMetadata|null|undefined} pool_metadata
                 * @memberof tendermint.liquidity.v1beta1.PoolRecord
                 * @instance
                 */
                PoolRecord.prototype.pool_metadata = null;

                /**
                 * PoolRecord pool_batch.
                 * @member {tendermint.liquidity.v1beta1.IPoolBatch|null|undefined} pool_batch
                 * @memberof tendermint.liquidity.v1beta1.PoolRecord
                 * @instance
                 */
                PoolRecord.prototype.pool_batch = null;

                /**
                 * PoolRecord deposit_msg_states.
                 * @member {Array.<tendermint.liquidity.v1beta1.IDepositMsgState>} deposit_msg_states
                 * @memberof tendermint.liquidity.v1beta1.PoolRecord
                 * @instance
                 */
                PoolRecord.prototype.deposit_msg_states = $util.emptyArray;

                /**
                 * PoolRecord withdraw_msg_states.
                 * @member {Array.<tendermint.liquidity.v1beta1.IWithdrawMsgState>} withdraw_msg_states
                 * @memberof tendermint.liquidity.v1beta1.PoolRecord
                 * @instance
                 */
                PoolRecord.prototype.withdraw_msg_states = $util.emptyArray;

                /**
                 * PoolRecord swap_msg_states.
                 * @member {Array.<tendermint.liquidity.v1beta1.ISwapMsgState>} swap_msg_states
                 * @memberof tendermint.liquidity.v1beta1.PoolRecord
                 * @instance
                 */
                PoolRecord.prototype.swap_msg_states = $util.emptyArray;

                /**
                 * Encodes the specified PoolRecord message. Does not implicitly {@link tendermint.liquidity.v1beta1.PoolRecord.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.liquidity.v1beta1.PoolRecord
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IPoolRecord} message PoolRecord message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PoolRecord.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.pool != null && Object.hasOwnProperty.call(message, "pool"))
                        $root.tendermint.liquidity.v1beta1.Pool.encode(message.pool, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.pool_metadata != null && Object.hasOwnProperty.call(message, "pool_metadata"))
                        $root.tendermint.liquidity.v1beta1.PoolMetadata.encode(message.pool_metadata, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.pool_batch != null && Object.hasOwnProperty.call(message, "pool_batch"))
                        $root.tendermint.liquidity.v1beta1.PoolBatch.encode(message.pool_batch, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.deposit_msg_states != null && message.deposit_msg_states.length)
                        for (let i = 0; i < message.deposit_msg_states.length; ++i)
                            $root.tendermint.liquidity.v1beta1.DepositMsgState.encode(message.deposit_msg_states[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.withdraw_msg_states != null && message.withdraw_msg_states.length)
                        for (let i = 0; i < message.withdraw_msg_states.length; ++i)
                            $root.tendermint.liquidity.v1beta1.WithdrawMsgState.encode(message.withdraw_msg_states[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.swap_msg_states != null && message.swap_msg_states.length)
                        for (let i = 0; i < message.swap_msg_states.length; ++i)
                            $root.tendermint.liquidity.v1beta1.SwapMsgState.encode(message.swap_msg_states[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified PoolRecord message, length delimited. Does not implicitly {@link tendermint.liquidity.v1beta1.PoolRecord.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.PoolRecord
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IPoolRecord} message PoolRecord message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PoolRecord.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a PoolRecord message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.liquidity.v1beta1.PoolRecord
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.liquidity.v1beta1.PoolRecord} PoolRecord
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PoolRecord.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.liquidity.v1beta1.PoolRecord();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.pool = $root.tendermint.liquidity.v1beta1.Pool.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.pool_metadata = $root.tendermint.liquidity.v1beta1.PoolMetadata.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.pool_batch = $root.tendermint.liquidity.v1beta1.PoolBatch.decode(reader, reader.uint32());
                            break;
                        case 4:
                            if (!(message.deposit_msg_states && message.deposit_msg_states.length))
                                message.deposit_msg_states = [];
                            message.deposit_msg_states.push($root.tendermint.liquidity.v1beta1.DepositMsgState.decode(reader, reader.uint32()));
                            break;
                        case 5:
                            if (!(message.withdraw_msg_states && message.withdraw_msg_states.length))
                                message.withdraw_msg_states = [];
                            message.withdraw_msg_states.push($root.tendermint.liquidity.v1beta1.WithdrawMsgState.decode(reader, reader.uint32()));
                            break;
                        case 6:
                            if (!(message.swap_msg_states && message.swap_msg_states.length))
                                message.swap_msg_states = [];
                            message.swap_msg_states.push($root.tendermint.liquidity.v1beta1.SwapMsgState.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a PoolRecord message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.PoolRecord
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.liquidity.v1beta1.PoolRecord} PoolRecord
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PoolRecord.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a PoolRecord message.
                 * @function verify
                 * @memberof tendermint.liquidity.v1beta1.PoolRecord
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                PoolRecord.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.pool != null && message.hasOwnProperty("pool")) {
                        let error = $root.tendermint.liquidity.v1beta1.Pool.verify(message.pool);
                        if (error)
                            return "pool." + error;
                    }
                    if (message.pool_metadata != null && message.hasOwnProperty("pool_metadata")) {
                        let error = $root.tendermint.liquidity.v1beta1.PoolMetadata.verify(message.pool_metadata);
                        if (error)
                            return "pool_metadata." + error;
                    }
                    if (message.pool_batch != null && message.hasOwnProperty("pool_batch")) {
                        let error = $root.tendermint.liquidity.v1beta1.PoolBatch.verify(message.pool_batch);
                        if (error)
                            return "pool_batch." + error;
                    }
                    if (message.deposit_msg_states != null && message.hasOwnProperty("deposit_msg_states")) {
                        if (!Array.isArray(message.deposit_msg_states))
                            return "deposit_msg_states: array expected";
                        for (let i = 0; i < message.deposit_msg_states.length; ++i) {
                            let error = $root.tendermint.liquidity.v1beta1.DepositMsgState.verify(message.deposit_msg_states[i]);
                            if (error)
                                return "deposit_msg_states." + error;
                        }
                    }
                    if (message.withdraw_msg_states != null && message.hasOwnProperty("withdraw_msg_states")) {
                        if (!Array.isArray(message.withdraw_msg_states))
                            return "withdraw_msg_states: array expected";
                        for (let i = 0; i < message.withdraw_msg_states.length; ++i) {
                            let error = $root.tendermint.liquidity.v1beta1.WithdrawMsgState.verify(message.withdraw_msg_states[i]);
                            if (error)
                                return "withdraw_msg_states." + error;
                        }
                    }
                    if (message.swap_msg_states != null && message.hasOwnProperty("swap_msg_states")) {
                        if (!Array.isArray(message.swap_msg_states))
                            return "swap_msg_states: array expected";
                        for (let i = 0; i < message.swap_msg_states.length; ++i) {
                            let error = $root.tendermint.liquidity.v1beta1.SwapMsgState.verify(message.swap_msg_states[i]);
                            if (error)
                                return "swap_msg_states." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a PoolRecord message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.liquidity.v1beta1.PoolRecord
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.liquidity.v1beta1.PoolRecord} PoolRecord
                 */
                PoolRecord.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.liquidity.v1beta1.PoolRecord)
                        return object;
                    let message = new $root.tendermint.liquidity.v1beta1.PoolRecord();
                    if (object.pool != null) {
                        if (typeof object.pool !== "object")
                            throw TypeError(".tendermint.liquidity.v1beta1.PoolRecord.pool: object expected");
                        message.pool = $root.tendermint.liquidity.v1beta1.Pool.fromObject(object.pool);
                    }
                    if (object.pool_metadata != null) {
                        if (typeof object.pool_metadata !== "object")
                            throw TypeError(".tendermint.liquidity.v1beta1.PoolRecord.pool_metadata: object expected");
                        message.pool_metadata = $root.tendermint.liquidity.v1beta1.PoolMetadata.fromObject(object.pool_metadata);
                    }
                    if (object.pool_batch != null) {
                        if (typeof object.pool_batch !== "object")
                            throw TypeError(".tendermint.liquidity.v1beta1.PoolRecord.pool_batch: object expected");
                        message.pool_batch = $root.tendermint.liquidity.v1beta1.PoolBatch.fromObject(object.pool_batch);
                    }
                    if (object.deposit_msg_states) {
                        if (!Array.isArray(object.deposit_msg_states))
                            throw TypeError(".tendermint.liquidity.v1beta1.PoolRecord.deposit_msg_states: array expected");
                        message.deposit_msg_states = [];
                        for (let i = 0; i < object.deposit_msg_states.length; ++i) {
                            if (typeof object.deposit_msg_states[i] !== "object")
                                throw TypeError(".tendermint.liquidity.v1beta1.PoolRecord.deposit_msg_states: object expected");
                            message.deposit_msg_states[i] = $root.tendermint.liquidity.v1beta1.DepositMsgState.fromObject(object.deposit_msg_states[i]);
                        }
                    }
                    if (object.withdraw_msg_states) {
                        if (!Array.isArray(object.withdraw_msg_states))
                            throw TypeError(".tendermint.liquidity.v1beta1.PoolRecord.withdraw_msg_states: array expected");
                        message.withdraw_msg_states = [];
                        for (let i = 0; i < object.withdraw_msg_states.length; ++i) {
                            if (typeof object.withdraw_msg_states[i] !== "object")
                                throw TypeError(".tendermint.liquidity.v1beta1.PoolRecord.withdraw_msg_states: object expected");
                            message.withdraw_msg_states[i] = $root.tendermint.liquidity.v1beta1.WithdrawMsgState.fromObject(object.withdraw_msg_states[i]);
                        }
                    }
                    if (object.swap_msg_states) {
                        if (!Array.isArray(object.swap_msg_states))
                            throw TypeError(".tendermint.liquidity.v1beta1.PoolRecord.swap_msg_states: array expected");
                        message.swap_msg_states = [];
                        for (let i = 0; i < object.swap_msg_states.length; ++i) {
                            if (typeof object.swap_msg_states[i] !== "object")
                                throw TypeError(".tendermint.liquidity.v1beta1.PoolRecord.swap_msg_states: object expected");
                            message.swap_msg_states[i] = $root.tendermint.liquidity.v1beta1.SwapMsgState.fromObject(object.swap_msg_states[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a PoolRecord message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.liquidity.v1beta1.PoolRecord
                 * @static
                 * @param {tendermint.liquidity.v1beta1.PoolRecord} message PoolRecord
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                PoolRecord.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults) {
                        object.deposit_msg_states = [];
                        object.withdraw_msg_states = [];
                        object.swap_msg_states = [];
                    }
                    if (options.defaults) {
                        object.pool = null;
                        object.pool_metadata = null;
                        object.pool_batch = null;
                    }
                    if (message.pool != null && message.hasOwnProperty("pool"))
                        object.pool = $root.tendermint.liquidity.v1beta1.Pool.toObject(message.pool, options);
                    if (message.pool_metadata != null && message.hasOwnProperty("pool_metadata"))
                        object.pool_metadata = $root.tendermint.liquidity.v1beta1.PoolMetadata.toObject(message.pool_metadata, options);
                    if (message.pool_batch != null && message.hasOwnProperty("pool_batch"))
                        object.pool_batch = $root.tendermint.liquidity.v1beta1.PoolBatch.toObject(message.pool_batch, options);
                    if (message.deposit_msg_states && message.deposit_msg_states.length) {
                        object.deposit_msg_states = [];
                        for (let j = 0; j < message.deposit_msg_states.length; ++j)
                            object.deposit_msg_states[j] = $root.tendermint.liquidity.v1beta1.DepositMsgState.toObject(message.deposit_msg_states[j], options);
                    }
                    if (message.withdraw_msg_states && message.withdraw_msg_states.length) {
                        object.withdraw_msg_states = [];
                        for (let j = 0; j < message.withdraw_msg_states.length; ++j)
                            object.withdraw_msg_states[j] = $root.tendermint.liquidity.v1beta1.WithdrawMsgState.toObject(message.withdraw_msg_states[j], options);
                    }
                    if (message.swap_msg_states && message.swap_msg_states.length) {
                        object.swap_msg_states = [];
                        for (let j = 0; j < message.swap_msg_states.length; ++j)
                            object.swap_msg_states[j] = $root.tendermint.liquidity.v1beta1.SwapMsgState.toObject(message.swap_msg_states[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this PoolRecord to JSON.
                 * @function toJSON
                 * @memberof tendermint.liquidity.v1beta1.PoolRecord
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                PoolRecord.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return PoolRecord;
            })();

            v1beta1.GenesisState = (function() {

                /**
                 * Properties of a GenesisState.
                 * @memberof tendermint.liquidity.v1beta1
                 * @interface IGenesisState
                 * @property {tendermint.liquidity.v1beta1.IParams|null} [params] GenesisState params
                 * @property {Array.<tendermint.liquidity.v1beta1.IPoolRecord>|null} [pool_records] GenesisState pool_records
                 */

                /**
                 * Constructs a new GenesisState.
                 * @memberof tendermint.liquidity.v1beta1
                 * @classdesc Represents a GenesisState.
                 * @implements IGenesisState
                 * @constructor
                 * @param {tendermint.liquidity.v1beta1.IGenesisState=} [properties] Properties to set
                 */
                function GenesisState(properties) {
                    this.pool_records = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GenesisState params.
                 * @member {tendermint.liquidity.v1beta1.IParams|null|undefined} params
                 * @memberof tendermint.liquidity.v1beta1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.params = null;

                /**
                 * GenesisState pool_records.
                 * @member {Array.<tendermint.liquidity.v1beta1.IPoolRecord>} pool_records
                 * @memberof tendermint.liquidity.v1beta1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.pool_records = $util.emptyArray;

                /**
                 * Encodes the specified GenesisState message. Does not implicitly {@link tendermint.liquidity.v1beta1.GenesisState.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.liquidity.v1beta1.GenesisState
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IGenesisState} message GenesisState message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GenesisState.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.params != null && Object.hasOwnProperty.call(message, "params"))
                        $root.tendermint.liquidity.v1beta1.Params.encode(message.params, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.pool_records != null && message.pool_records.length)
                        for (let i = 0; i < message.pool_records.length; ++i)
                            $root.tendermint.liquidity.v1beta1.PoolRecord.encode(message.pool_records[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified GenesisState message, length delimited. Does not implicitly {@link tendermint.liquidity.v1beta1.GenesisState.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.GenesisState
                 * @static
                 * @param {tendermint.liquidity.v1beta1.IGenesisState} message GenesisState message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GenesisState.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a GenesisState message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.liquidity.v1beta1.GenesisState
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.liquidity.v1beta1.GenesisState} GenesisState
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GenesisState.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.liquidity.v1beta1.GenesisState();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.params = $root.tendermint.liquidity.v1beta1.Params.decode(reader, reader.uint32());
                            break;
                        case 2:
                            if (!(message.pool_records && message.pool_records.length))
                                message.pool_records = [];
                            message.pool_records.push($root.tendermint.liquidity.v1beta1.PoolRecord.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a GenesisState message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.liquidity.v1beta1.GenesisState
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.liquidity.v1beta1.GenesisState} GenesisState
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GenesisState.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a GenesisState message.
                 * @function verify
                 * @memberof tendermint.liquidity.v1beta1.GenesisState
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GenesisState.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.params != null && message.hasOwnProperty("params")) {
                        let error = $root.tendermint.liquidity.v1beta1.Params.verify(message.params);
                        if (error)
                            return "params." + error;
                    }
                    if (message.pool_records != null && message.hasOwnProperty("pool_records")) {
                        if (!Array.isArray(message.pool_records))
                            return "pool_records: array expected";
                        for (let i = 0; i < message.pool_records.length; ++i) {
                            let error = $root.tendermint.liquidity.v1beta1.PoolRecord.verify(message.pool_records[i]);
                            if (error)
                                return "pool_records." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a GenesisState message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.liquidity.v1beta1.GenesisState
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.liquidity.v1beta1.GenesisState} GenesisState
                 */
                GenesisState.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.liquidity.v1beta1.GenesisState)
                        return object;
                    let message = new $root.tendermint.liquidity.v1beta1.GenesisState();
                    if (object.params != null) {
                        if (typeof object.params !== "object")
                            throw TypeError(".tendermint.liquidity.v1beta1.GenesisState.params: object expected");
                        message.params = $root.tendermint.liquidity.v1beta1.Params.fromObject(object.params);
                    }
                    if (object.pool_records) {
                        if (!Array.isArray(object.pool_records))
                            throw TypeError(".tendermint.liquidity.v1beta1.GenesisState.pool_records: array expected");
                        message.pool_records = [];
                        for (let i = 0; i < object.pool_records.length; ++i) {
                            if (typeof object.pool_records[i] !== "object")
                                throw TypeError(".tendermint.liquidity.v1beta1.GenesisState.pool_records: object expected");
                            message.pool_records[i] = $root.tendermint.liquidity.v1beta1.PoolRecord.fromObject(object.pool_records[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a GenesisState message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.liquidity.v1beta1.GenesisState
                 * @static
                 * @param {tendermint.liquidity.v1beta1.GenesisState} message GenesisState
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GenesisState.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.pool_records = [];
                    if (options.defaults)
                        object.params = null;
                    if (message.params != null && message.hasOwnProperty("params"))
                        object.params = $root.tendermint.liquidity.v1beta1.Params.toObject(message.params, options);
                    if (message.pool_records && message.pool_records.length) {
                        object.pool_records = [];
                        for (let j = 0; j < message.pool_records.length; ++j)
                            object.pool_records[j] = $root.tendermint.liquidity.v1beta1.PoolRecord.toObject(message.pool_records[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this GenesisState to JSON.
                 * @function toJSON
                 * @memberof tendermint.liquidity.v1beta1.GenesisState
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GenesisState.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return GenesisState;
            })();

            return v1beta1;
        })();

        return liquidity;
    })();

    return tendermint;
})();

export const gogoproto = $root.gogoproto = (() => {

    /**
     * Namespace gogoproto.
     * @exports gogoproto
     * @namespace
     */
    const gogoproto = {};

    return gogoproto;
})();

export const google = $root.google = (() => {

    /**
     * Namespace google.
     * @exports google
     * @namespace
     */
    const google = {};

    google.protobuf = (function() {

        /**
         * Namespace protobuf.
         * @memberof google
         * @namespace
         */
        const protobuf = {};

        protobuf.FileDescriptorSet = (function() {

            /**
             * Properties of a FileDescriptorSet.
             * @memberof google.protobuf
             * @interface IFileDescriptorSet
             * @property {Array.<google.protobuf.IFileDescriptorProto>|null} [file] FileDescriptorSet file
             */

            /**
             * Constructs a new FileDescriptorSet.
             * @memberof google.protobuf
             * @classdesc Represents a FileDescriptorSet.
             * @implements IFileDescriptorSet
             * @constructor
             * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
             */
            function FileDescriptorSet(properties) {
                this.file = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FileDescriptorSet file.
             * @member {Array.<google.protobuf.IFileDescriptorProto>} file
             * @memberof google.protobuf.FileDescriptorSet
             * @instance
             */
            FileDescriptorSet.prototype.file = $util.emptyArray;

            /**
             * Encodes the specified FileDescriptorSet message. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileDescriptorSet.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.file != null && message.file.length)
                    for (let i = 0; i < message.file.length; ++i)
                        $root.google.protobuf.FileDescriptorProto.encode(message.file[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified FileDescriptorSet message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileDescriptorSet.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FileDescriptorSet message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileDescriptorSet.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorSet();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.file && message.file.length))
                            message.file = [];
                        message.file.push($root.google.protobuf.FileDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FileDescriptorSet message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileDescriptorSet.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FileDescriptorSet message.
             * @function verify
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FileDescriptorSet.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.file != null && message.hasOwnProperty("file")) {
                    if (!Array.isArray(message.file))
                        return "file: array expected";
                    for (let i = 0; i < message.file.length; ++i) {
                        let error = $root.google.protobuf.FileDescriptorProto.verify(message.file[i]);
                        if (error)
                            return "file." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a FileDescriptorSet message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
             */
            FileDescriptorSet.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FileDescriptorSet)
                    return object;
                let message = new $root.google.protobuf.FileDescriptorSet();
                if (object.file) {
                    if (!Array.isArray(object.file))
                        throw TypeError(".google.protobuf.FileDescriptorSet.file: array expected");
                    message.file = [];
                    for (let i = 0; i < object.file.length; ++i) {
                        if (typeof object.file[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorSet.file: object expected");
                        message.file[i] = $root.google.protobuf.FileDescriptorProto.fromObject(object.file[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a FileDescriptorSet message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {google.protobuf.FileDescriptorSet} message FileDescriptorSet
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FileDescriptorSet.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.file = [];
                if (message.file && message.file.length) {
                    object.file = [];
                    for (let j = 0; j < message.file.length; ++j)
                        object.file[j] = $root.google.protobuf.FileDescriptorProto.toObject(message.file[j], options);
                }
                return object;
            };

            /**
             * Converts this FileDescriptorSet to JSON.
             * @function toJSON
             * @memberof google.protobuf.FileDescriptorSet
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FileDescriptorSet.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return FileDescriptorSet;
        })();

        protobuf.FileDescriptorProto = (function() {

            /**
             * Properties of a FileDescriptorProto.
             * @memberof google.protobuf
             * @interface IFileDescriptorProto
             * @property {string|null} [name] FileDescriptorProto name
             * @property {string|null} ["package"] FileDescriptorProto package
             * @property {Array.<string>|null} [dependency] FileDescriptorProto dependency
             * @property {Array.<number>|null} [public_dependency] FileDescriptorProto public_dependency
             * @property {Array.<number>|null} [weak_dependency] FileDescriptorProto weak_dependency
             * @property {Array.<google.protobuf.IDescriptorProto>|null} [message_type] FileDescriptorProto message_type
             * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enum_type] FileDescriptorProto enum_type
             * @property {Array.<google.protobuf.IServiceDescriptorProto>|null} [service] FileDescriptorProto service
             * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] FileDescriptorProto extension
             * @property {google.protobuf.IFileOptions|null} [options] FileDescriptorProto options
             * @property {google.protobuf.ISourceCodeInfo|null} [source_code_info] FileDescriptorProto source_code_info
             * @property {string|null} [syntax] FileDescriptorProto syntax
             */

            /**
             * Constructs a new FileDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a FileDescriptorProto.
             * @implements IFileDescriptorProto
             * @constructor
             * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
             */
            function FileDescriptorProto(properties) {
                this.dependency = [];
                this.public_dependency = [];
                this.weak_dependency = [];
                this.message_type = [];
                this.enum_type = [];
                this.service = [];
                this.extension = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FileDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.name = "";

            /**
             * FileDescriptorProto package.
             * @member {string} package
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype["package"] = "";

            /**
             * FileDescriptorProto dependency.
             * @member {Array.<string>} dependency
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.dependency = $util.emptyArray;

            /**
             * FileDescriptorProto public_dependency.
             * @member {Array.<number>} public_dependency
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.public_dependency = $util.emptyArray;

            /**
             * FileDescriptorProto weak_dependency.
             * @member {Array.<number>} weak_dependency
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.weak_dependency = $util.emptyArray;

            /**
             * FileDescriptorProto message_type.
             * @member {Array.<google.protobuf.IDescriptorProto>} message_type
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.message_type = $util.emptyArray;

            /**
             * FileDescriptorProto enum_type.
             * @member {Array.<google.protobuf.IEnumDescriptorProto>} enum_type
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.enum_type = $util.emptyArray;

            /**
             * FileDescriptorProto service.
             * @member {Array.<google.protobuf.IServiceDescriptorProto>} service
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.service = $util.emptyArray;

            /**
             * FileDescriptorProto extension.
             * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.extension = $util.emptyArray;

            /**
             * FileDescriptorProto options.
             * @member {google.protobuf.IFileOptions|null|undefined} options
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.options = null;

            /**
             * FileDescriptorProto source_code_info.
             * @member {google.protobuf.ISourceCodeInfo|null|undefined} source_code_info
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.source_code_info = null;

            /**
             * FileDescriptorProto syntax.
             * @member {string} syntax
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.syntax = "";

            /**
             * Encodes the specified FileDescriptorProto message. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message["package"] != null && Object.hasOwnProperty.call(message, "package"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message["package"]);
                if (message.dependency != null && message.dependency.length)
                    for (let i = 0; i < message.dependency.length; ++i)
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.dependency[i]);
                if (message.message_type != null && message.message_type.length)
                    for (let i = 0; i < message.message_type.length; ++i)
                        $root.google.protobuf.DescriptorProto.encode(message.message_type[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.enum_type != null && message.enum_type.length)
                    for (let i = 0; i < message.enum_type.length; ++i)
                        $root.google.protobuf.EnumDescriptorProto.encode(message.enum_type[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.service != null && message.service.length)
                    for (let i = 0; i < message.service.length; ++i)
                        $root.google.protobuf.ServiceDescriptorProto.encode(message.service[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.extension != null && message.extension.length)
                    for (let i = 0; i < message.extension.length; ++i)
                        $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.FileOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.source_code_info != null && Object.hasOwnProperty.call(message, "source_code_info"))
                    $root.google.protobuf.SourceCodeInfo.encode(message.source_code_info, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                if (message.public_dependency != null && message.public_dependency.length)
                    for (let i = 0; i < message.public_dependency.length; ++i)
                        writer.uint32(/* id 10, wireType 0 =*/80).int32(message.public_dependency[i]);
                if (message.weak_dependency != null && message.weak_dependency.length)
                    for (let i = 0; i < message.weak_dependency.length; ++i)
                        writer.uint32(/* id 11, wireType 0 =*/88).int32(message.weak_dependency[i]);
                if (message.syntax != null && Object.hasOwnProperty.call(message, "syntax"))
                    writer.uint32(/* id 12, wireType 2 =*/98).string(message.syntax);
                return writer;
            };

            /**
             * Encodes the specified FileDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FileDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorProto();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message["package"] = reader.string();
                        break;
                    case 3:
                        if (!(message.dependency && message.dependency.length))
                            message.dependency = [];
                        message.dependency.push(reader.string());
                        break;
                    case 10:
                        if (!(message.public_dependency && message.public_dependency.length))
                            message.public_dependency = [];
                        if ((tag & 7) === 2) {
                            let end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.public_dependency.push(reader.int32());
                        } else
                            message.public_dependency.push(reader.int32());
                        break;
                    case 11:
                        if (!(message.weak_dependency && message.weak_dependency.length))
                            message.weak_dependency = [];
                        if ((tag & 7) === 2) {
                            let end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.weak_dependency.push(reader.int32());
                        } else
                            message.weak_dependency.push(reader.int32());
                        break;
                    case 4:
                        if (!(message.message_type && message.message_type.length))
                            message.message_type = [];
                        message.message_type.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 5:
                        if (!(message.enum_type && message.enum_type.length))
                            message.enum_type = [];
                        message.enum_type.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 6:
                        if (!(message.service && message.service.length))
                            message.service = [];
                        message.service.push($root.google.protobuf.ServiceDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 7:
                        if (!(message.extension && message.extension.length))
                            message.extension = [];
                        message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 8:
                        message.options = $root.google.protobuf.FileOptions.decode(reader, reader.uint32());
                        break;
                    case 9:
                        message.source_code_info = $root.google.protobuf.SourceCodeInfo.decode(reader, reader.uint32());
                        break;
                    case 12:
                        message.syntax = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FileDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FileDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FileDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message["package"] != null && message.hasOwnProperty("package"))
                    if (!$util.isString(message["package"]))
                        return "package: string expected";
                if (message.dependency != null && message.hasOwnProperty("dependency")) {
                    if (!Array.isArray(message.dependency))
                        return "dependency: array expected";
                    for (let i = 0; i < message.dependency.length; ++i)
                        if (!$util.isString(message.dependency[i]))
                            return "dependency: string[] expected";
                }
                if (message.public_dependency != null && message.hasOwnProperty("public_dependency")) {
                    if (!Array.isArray(message.public_dependency))
                        return "public_dependency: array expected";
                    for (let i = 0; i < message.public_dependency.length; ++i)
                        if (!$util.isInteger(message.public_dependency[i]))
                            return "public_dependency: integer[] expected";
                }
                if (message.weak_dependency != null && message.hasOwnProperty("weak_dependency")) {
                    if (!Array.isArray(message.weak_dependency))
                        return "weak_dependency: array expected";
                    for (let i = 0; i < message.weak_dependency.length; ++i)
                        if (!$util.isInteger(message.weak_dependency[i]))
                            return "weak_dependency: integer[] expected";
                }
                if (message.message_type != null && message.hasOwnProperty("message_type")) {
                    if (!Array.isArray(message.message_type))
                        return "message_type: array expected";
                    for (let i = 0; i < message.message_type.length; ++i) {
                        let error = $root.google.protobuf.DescriptorProto.verify(message.message_type[i]);
                        if (error)
                            return "message_type." + error;
                    }
                }
                if (message.enum_type != null && message.hasOwnProperty("enum_type")) {
                    if (!Array.isArray(message.enum_type))
                        return "enum_type: array expected";
                    for (let i = 0; i < message.enum_type.length; ++i) {
                        let error = $root.google.protobuf.EnumDescriptorProto.verify(message.enum_type[i]);
                        if (error)
                            return "enum_type." + error;
                    }
                }
                if (message.service != null && message.hasOwnProperty("service")) {
                    if (!Array.isArray(message.service))
                        return "service: array expected";
                    for (let i = 0; i < message.service.length; ++i) {
                        let error = $root.google.protobuf.ServiceDescriptorProto.verify(message.service[i]);
                        if (error)
                            return "service." + error;
                    }
                }
                if (message.extension != null && message.hasOwnProperty("extension")) {
                    if (!Array.isArray(message.extension))
                        return "extension: array expected";
                    for (let i = 0; i < message.extension.length; ++i) {
                        let error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                        if (error)
                            return "extension." + error;
                    }
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.FileOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                if (message.source_code_info != null && message.hasOwnProperty("source_code_info")) {
                    let error = $root.google.protobuf.SourceCodeInfo.verify(message.source_code_info);
                    if (error)
                        return "source_code_info." + error;
                }
                if (message.syntax != null && message.hasOwnProperty("syntax"))
                    if (!$util.isString(message.syntax))
                        return "syntax: string expected";
                return null;
            };

            /**
             * Creates a FileDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
             */
            FileDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FileDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.FileDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object["package"] != null)
                    message["package"] = String(object["package"]);
                if (object.dependency) {
                    if (!Array.isArray(object.dependency))
                        throw TypeError(".google.protobuf.FileDescriptorProto.dependency: array expected");
                    message.dependency = [];
                    for (let i = 0; i < object.dependency.length; ++i)
                        message.dependency[i] = String(object.dependency[i]);
                }
                if (object.public_dependency) {
                    if (!Array.isArray(object.public_dependency))
                        throw TypeError(".google.protobuf.FileDescriptorProto.public_dependency: array expected");
                    message.public_dependency = [];
                    for (let i = 0; i < object.public_dependency.length; ++i)
                        message.public_dependency[i] = object.public_dependency[i] | 0;
                }
                if (object.weak_dependency) {
                    if (!Array.isArray(object.weak_dependency))
                        throw TypeError(".google.protobuf.FileDescriptorProto.weak_dependency: array expected");
                    message.weak_dependency = [];
                    for (let i = 0; i < object.weak_dependency.length; ++i)
                        message.weak_dependency[i] = object.weak_dependency[i] | 0;
                }
                if (object.message_type) {
                    if (!Array.isArray(object.message_type))
                        throw TypeError(".google.protobuf.FileDescriptorProto.message_type: array expected");
                    message.message_type = [];
                    for (let i = 0; i < object.message_type.length; ++i) {
                        if (typeof object.message_type[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.message_type: object expected");
                        message.message_type[i] = $root.google.protobuf.DescriptorProto.fromObject(object.message_type[i]);
                    }
                }
                if (object.enum_type) {
                    if (!Array.isArray(object.enum_type))
                        throw TypeError(".google.protobuf.FileDescriptorProto.enum_type: array expected");
                    message.enum_type = [];
                    for (let i = 0; i < object.enum_type.length; ++i) {
                        if (typeof object.enum_type[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.enum_type: object expected");
                        message.enum_type[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enum_type[i]);
                    }
                }
                if (object.service) {
                    if (!Array.isArray(object.service))
                        throw TypeError(".google.protobuf.FileDescriptorProto.service: array expected");
                    message.service = [];
                    for (let i = 0; i < object.service.length; ++i) {
                        if (typeof object.service[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.service: object expected");
                        message.service[i] = $root.google.protobuf.ServiceDescriptorProto.fromObject(object.service[i]);
                    }
                }
                if (object.extension) {
                    if (!Array.isArray(object.extension))
                        throw TypeError(".google.protobuf.FileDescriptorProto.extension: array expected");
                    message.extension = [];
                    for (let i = 0; i < object.extension.length; ++i) {
                        if (typeof object.extension[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.extension: object expected");
                        message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                    }
                }
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.FileDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.FileOptions.fromObject(object.options);
                }
                if (object.source_code_info != null) {
                    if (typeof object.source_code_info !== "object")
                        throw TypeError(".google.protobuf.FileDescriptorProto.source_code_info: object expected");
                    message.source_code_info = $root.google.protobuf.SourceCodeInfo.fromObject(object.source_code_info);
                }
                if (object.syntax != null)
                    message.syntax = String(object.syntax);
                return message;
            };

            /**
             * Creates a plain object from a FileDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {google.protobuf.FileDescriptorProto} message FileDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FileDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.dependency = [];
                    object.message_type = [];
                    object.enum_type = [];
                    object.service = [];
                    object.extension = [];
                    object.public_dependency = [];
                    object.weak_dependency = [];
                }
                if (options.defaults) {
                    object.name = "";
                    object["package"] = "";
                    object.options = null;
                    object.source_code_info = null;
                    object.syntax = "";
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message["package"] != null && message.hasOwnProperty("package"))
                    object["package"] = message["package"];
                if (message.dependency && message.dependency.length) {
                    object.dependency = [];
                    for (let j = 0; j < message.dependency.length; ++j)
                        object.dependency[j] = message.dependency[j];
                }
                if (message.message_type && message.message_type.length) {
                    object.message_type = [];
                    for (let j = 0; j < message.message_type.length; ++j)
                        object.message_type[j] = $root.google.protobuf.DescriptorProto.toObject(message.message_type[j], options);
                }
                if (message.enum_type && message.enum_type.length) {
                    object.enum_type = [];
                    for (let j = 0; j < message.enum_type.length; ++j)
                        object.enum_type[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enum_type[j], options);
                }
                if (message.service && message.service.length) {
                    object.service = [];
                    for (let j = 0; j < message.service.length; ++j)
                        object.service[j] = $root.google.protobuf.ServiceDescriptorProto.toObject(message.service[j], options);
                }
                if (message.extension && message.extension.length) {
                    object.extension = [];
                    for (let j = 0; j < message.extension.length; ++j)
                        object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                }
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.FileOptions.toObject(message.options, options);
                if (message.source_code_info != null && message.hasOwnProperty("source_code_info"))
                    object.source_code_info = $root.google.protobuf.SourceCodeInfo.toObject(message.source_code_info, options);
                if (message.public_dependency && message.public_dependency.length) {
                    object.public_dependency = [];
                    for (let j = 0; j < message.public_dependency.length; ++j)
                        object.public_dependency[j] = message.public_dependency[j];
                }
                if (message.weak_dependency && message.weak_dependency.length) {
                    object.weak_dependency = [];
                    for (let j = 0; j < message.weak_dependency.length; ++j)
                        object.weak_dependency[j] = message.weak_dependency[j];
                }
                if (message.syntax != null && message.hasOwnProperty("syntax"))
                    object.syntax = message.syntax;
                return object;
            };

            /**
             * Converts this FileDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FileDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return FileDescriptorProto;
        })();

        protobuf.DescriptorProto = (function() {

            /**
             * Properties of a DescriptorProto.
             * @memberof google.protobuf
             * @interface IDescriptorProto
             * @property {string|null} [name] DescriptorProto name
             * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [field] DescriptorProto field
             * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] DescriptorProto extension
             * @property {Array.<google.protobuf.IDescriptorProto>|null} [nested_type] DescriptorProto nested_type
             * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enum_type] DescriptorProto enum_type
             * @property {Array.<google.protobuf.DescriptorProto.IExtensionRange>|null} [extension_range] DescriptorProto extension_range
             * @property {Array.<google.protobuf.IOneofDescriptorProto>|null} [oneof_decl] DescriptorProto oneof_decl
             * @property {google.protobuf.IMessageOptions|null} [options] DescriptorProto options
             * @property {Array.<google.protobuf.DescriptorProto.IReservedRange>|null} [reserved_range] DescriptorProto reserved_range
             * @property {Array.<string>|null} [reserved_name] DescriptorProto reserved_name
             */

            /**
             * Constructs a new DescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a DescriptorProto.
             * @implements IDescriptorProto
             * @constructor
             * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
             */
            function DescriptorProto(properties) {
                this.field = [];
                this.extension = [];
                this.nested_type = [];
                this.enum_type = [];
                this.extension_range = [];
                this.oneof_decl = [];
                this.reserved_range = [];
                this.reserved_name = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * DescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.name = "";

            /**
             * DescriptorProto field.
             * @member {Array.<google.protobuf.IFieldDescriptorProto>} field
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.field = $util.emptyArray;

            /**
             * DescriptorProto extension.
             * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.extension = $util.emptyArray;

            /**
             * DescriptorProto nested_type.
             * @member {Array.<google.protobuf.IDescriptorProto>} nested_type
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.nested_type = $util.emptyArray;

            /**
             * DescriptorProto enum_type.
             * @member {Array.<google.protobuf.IEnumDescriptorProto>} enum_type
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.enum_type = $util.emptyArray;

            /**
             * DescriptorProto extension_range.
             * @member {Array.<google.protobuf.DescriptorProto.IExtensionRange>} extension_range
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.extension_range = $util.emptyArray;

            /**
             * DescriptorProto oneof_decl.
             * @member {Array.<google.protobuf.IOneofDescriptorProto>} oneof_decl
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.oneof_decl = $util.emptyArray;

            /**
             * DescriptorProto options.
             * @member {google.protobuf.IMessageOptions|null|undefined} options
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.options = null;

            /**
             * DescriptorProto reserved_range.
             * @member {Array.<google.protobuf.DescriptorProto.IReservedRange>} reserved_range
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.reserved_range = $util.emptyArray;

            /**
             * DescriptorProto reserved_name.
             * @member {Array.<string>} reserved_name
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.reserved_name = $util.emptyArray;

            /**
             * Encodes the specified DescriptorProto message. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.field != null && message.field.length)
                    for (let i = 0; i < message.field.length; ++i)
                        $root.google.protobuf.FieldDescriptorProto.encode(message.field[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.nested_type != null && message.nested_type.length)
                    for (let i = 0; i < message.nested_type.length; ++i)
                        $root.google.protobuf.DescriptorProto.encode(message.nested_type[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.enum_type != null && message.enum_type.length)
                    for (let i = 0; i < message.enum_type.length; ++i)
                        $root.google.protobuf.EnumDescriptorProto.encode(message.enum_type[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.extension_range != null && message.extension_range.length)
                    for (let i = 0; i < message.extension_range.length; ++i)
                        $root.google.protobuf.DescriptorProto.ExtensionRange.encode(message.extension_range[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.extension != null && message.extension.length)
                    for (let i = 0; i < message.extension.length; ++i)
                        $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.MessageOptions.encode(message.options, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.oneof_decl != null && message.oneof_decl.length)
                    for (let i = 0; i < message.oneof_decl.length; ++i)
                        $root.google.protobuf.OneofDescriptorProto.encode(message.oneof_decl[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.reserved_range != null && message.reserved_range.length)
                    for (let i = 0; i < message.reserved_range.length; ++i)
                        $root.google.protobuf.DescriptorProto.ReservedRange.encode(message.reserved_range[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                if (message.reserved_name != null && message.reserved_name.length)
                    for (let i = 0; i < message.reserved_name.length; ++i)
                        writer.uint32(/* id 10, wireType 2 =*/82).string(message.reserved_name[i]);
                return writer;
            };

            /**
             * Encodes the specified DescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a DescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.DescriptorProto} DescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        if (!(message.field && message.field.length))
                            message.field = [];
                        message.field.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 6:
                        if (!(message.extension && message.extension.length))
                            message.extension = [];
                        message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        if (!(message.nested_type && message.nested_type.length))
                            message.nested_type = [];
                        message.nested_type.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 4:
                        if (!(message.enum_type && message.enum_type.length))
                            message.enum_type = [];
                        message.enum_type.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 5:
                        if (!(message.extension_range && message.extension_range.length))
                            message.extension_range = [];
                        message.extension_range.push($root.google.protobuf.DescriptorProto.ExtensionRange.decode(reader, reader.uint32()));
                        break;
                    case 8:
                        if (!(message.oneof_decl && message.oneof_decl.length))
                            message.oneof_decl = [];
                        message.oneof_decl.push($root.google.protobuf.OneofDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 7:
                        message.options = $root.google.protobuf.MessageOptions.decode(reader, reader.uint32());
                        break;
                    case 9:
                        if (!(message.reserved_range && message.reserved_range.length))
                            message.reserved_range = [];
                        message.reserved_range.push($root.google.protobuf.DescriptorProto.ReservedRange.decode(reader, reader.uint32()));
                        break;
                    case 10:
                        if (!(message.reserved_name && message.reserved_name.length))
                            message.reserved_name = [];
                        message.reserved_name.push(reader.string());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a DescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.DescriptorProto} DescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a DescriptorProto message.
             * @function verify
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.field != null && message.hasOwnProperty("field")) {
                    if (!Array.isArray(message.field))
                        return "field: array expected";
                    for (let i = 0; i < message.field.length; ++i) {
                        let error = $root.google.protobuf.FieldDescriptorProto.verify(message.field[i]);
                        if (error)
                            return "field." + error;
                    }
                }
                if (message.extension != null && message.hasOwnProperty("extension")) {
                    if (!Array.isArray(message.extension))
                        return "extension: array expected";
                    for (let i = 0; i < message.extension.length; ++i) {
                        let error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                        if (error)
                            return "extension." + error;
                    }
                }
                if (message.nested_type != null && message.hasOwnProperty("nested_type")) {
                    if (!Array.isArray(message.nested_type))
                        return "nested_type: array expected";
                    for (let i = 0; i < message.nested_type.length; ++i) {
                        let error = $root.google.protobuf.DescriptorProto.verify(message.nested_type[i]);
                        if (error)
                            return "nested_type." + error;
                    }
                }
                if (message.enum_type != null && message.hasOwnProperty("enum_type")) {
                    if (!Array.isArray(message.enum_type))
                        return "enum_type: array expected";
                    for (let i = 0; i < message.enum_type.length; ++i) {
                        let error = $root.google.protobuf.EnumDescriptorProto.verify(message.enum_type[i]);
                        if (error)
                            return "enum_type." + error;
                    }
                }
                if (message.extension_range != null && message.hasOwnProperty("extension_range")) {
                    if (!Array.isArray(message.extension_range))
                        return "extension_range: array expected";
                    for (let i = 0; i < message.extension_range.length; ++i) {
                        let error = $root.google.protobuf.DescriptorProto.ExtensionRange.verify(message.extension_range[i]);
                        if (error)
                            return "extension_range." + error;
                    }
                }
                if (message.oneof_decl != null && message.hasOwnProperty("oneof_decl")) {
                    if (!Array.isArray(message.oneof_decl))
                        return "oneof_decl: array expected";
                    for (let i = 0; i < message.oneof_decl.length; ++i) {
                        let error = $root.google.protobuf.OneofDescriptorProto.verify(message.oneof_decl[i]);
                        if (error)
                            return "oneof_decl." + error;
                    }
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.MessageOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                if (message.reserved_range != null && message.hasOwnProperty("reserved_range")) {
                    if (!Array.isArray(message.reserved_range))
                        return "reserved_range: array expected";
                    for (let i = 0; i < message.reserved_range.length; ++i) {
                        let error = $root.google.protobuf.DescriptorProto.ReservedRange.verify(message.reserved_range[i]);
                        if (error)
                            return "reserved_range." + error;
                    }
                }
                if (message.reserved_name != null && message.hasOwnProperty("reserved_name")) {
                    if (!Array.isArray(message.reserved_name))
                        return "reserved_name: array expected";
                    for (let i = 0; i < message.reserved_name.length; ++i)
                        if (!$util.isString(message.reserved_name[i]))
                            return "reserved_name: string[] expected";
                }
                return null;
            };

            /**
             * Creates a DescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.DescriptorProto} DescriptorProto
             */
            DescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.DescriptorProto)
                    return object;
                let message = new $root.google.protobuf.DescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.field) {
                    if (!Array.isArray(object.field))
                        throw TypeError(".google.protobuf.DescriptorProto.field: array expected");
                    message.field = [];
                    for (let i = 0; i < object.field.length; ++i) {
                        if (typeof object.field[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.field: object expected");
                        message.field[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.field[i]);
                    }
                }
                if (object.extension) {
                    if (!Array.isArray(object.extension))
                        throw TypeError(".google.protobuf.DescriptorProto.extension: array expected");
                    message.extension = [];
                    for (let i = 0; i < object.extension.length; ++i) {
                        if (typeof object.extension[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.extension: object expected");
                        message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                    }
                }
                if (object.nested_type) {
                    if (!Array.isArray(object.nested_type))
                        throw TypeError(".google.protobuf.DescriptorProto.nested_type: array expected");
                    message.nested_type = [];
                    for (let i = 0; i < object.nested_type.length; ++i) {
                        if (typeof object.nested_type[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.nested_type: object expected");
                        message.nested_type[i] = $root.google.protobuf.DescriptorProto.fromObject(object.nested_type[i]);
                    }
                }
                if (object.enum_type) {
                    if (!Array.isArray(object.enum_type))
                        throw TypeError(".google.protobuf.DescriptorProto.enum_type: array expected");
                    message.enum_type = [];
                    for (let i = 0; i < object.enum_type.length; ++i) {
                        if (typeof object.enum_type[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.enum_type: object expected");
                        message.enum_type[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enum_type[i]);
                    }
                }
                if (object.extension_range) {
                    if (!Array.isArray(object.extension_range))
                        throw TypeError(".google.protobuf.DescriptorProto.extension_range: array expected");
                    message.extension_range = [];
                    for (let i = 0; i < object.extension_range.length; ++i) {
                        if (typeof object.extension_range[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.extension_range: object expected");
                        message.extension_range[i] = $root.google.protobuf.DescriptorProto.ExtensionRange.fromObject(object.extension_range[i]);
                    }
                }
                if (object.oneof_decl) {
                    if (!Array.isArray(object.oneof_decl))
                        throw TypeError(".google.protobuf.DescriptorProto.oneof_decl: array expected");
                    message.oneof_decl = [];
                    for (let i = 0; i < object.oneof_decl.length; ++i) {
                        if (typeof object.oneof_decl[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.oneof_decl: object expected");
                        message.oneof_decl[i] = $root.google.protobuf.OneofDescriptorProto.fromObject(object.oneof_decl[i]);
                    }
                }
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.DescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.MessageOptions.fromObject(object.options);
                }
                if (object.reserved_range) {
                    if (!Array.isArray(object.reserved_range))
                        throw TypeError(".google.protobuf.DescriptorProto.reserved_range: array expected");
                    message.reserved_range = [];
                    for (let i = 0; i < object.reserved_range.length; ++i) {
                        if (typeof object.reserved_range[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.reserved_range: object expected");
                        message.reserved_range[i] = $root.google.protobuf.DescriptorProto.ReservedRange.fromObject(object.reserved_range[i]);
                    }
                }
                if (object.reserved_name) {
                    if (!Array.isArray(object.reserved_name))
                        throw TypeError(".google.protobuf.DescriptorProto.reserved_name: array expected");
                    message.reserved_name = [];
                    for (let i = 0; i < object.reserved_name.length; ++i)
                        message.reserved_name[i] = String(object.reserved_name[i]);
                }
                return message;
            };

            /**
             * Creates a plain object from a DescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {google.protobuf.DescriptorProto} message DescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.field = [];
                    object.nested_type = [];
                    object.enum_type = [];
                    object.extension_range = [];
                    object.extension = [];
                    object.oneof_decl = [];
                    object.reserved_range = [];
                    object.reserved_name = [];
                }
                if (options.defaults) {
                    object.name = "";
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.field && message.field.length) {
                    object.field = [];
                    for (let j = 0; j < message.field.length; ++j)
                        object.field[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.field[j], options);
                }
                if (message.nested_type && message.nested_type.length) {
                    object.nested_type = [];
                    for (let j = 0; j < message.nested_type.length; ++j)
                        object.nested_type[j] = $root.google.protobuf.DescriptorProto.toObject(message.nested_type[j], options);
                }
                if (message.enum_type && message.enum_type.length) {
                    object.enum_type = [];
                    for (let j = 0; j < message.enum_type.length; ++j)
                        object.enum_type[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enum_type[j], options);
                }
                if (message.extension_range && message.extension_range.length) {
                    object.extension_range = [];
                    for (let j = 0; j < message.extension_range.length; ++j)
                        object.extension_range[j] = $root.google.protobuf.DescriptorProto.ExtensionRange.toObject(message.extension_range[j], options);
                }
                if (message.extension && message.extension.length) {
                    object.extension = [];
                    for (let j = 0; j < message.extension.length; ++j)
                        object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                }
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.MessageOptions.toObject(message.options, options);
                if (message.oneof_decl && message.oneof_decl.length) {
                    object.oneof_decl = [];
                    for (let j = 0; j < message.oneof_decl.length; ++j)
                        object.oneof_decl[j] = $root.google.protobuf.OneofDescriptorProto.toObject(message.oneof_decl[j], options);
                }
                if (message.reserved_range && message.reserved_range.length) {
                    object.reserved_range = [];
                    for (let j = 0; j < message.reserved_range.length; ++j)
                        object.reserved_range[j] = $root.google.protobuf.DescriptorProto.ReservedRange.toObject(message.reserved_range[j], options);
                }
                if (message.reserved_name && message.reserved_name.length) {
                    object.reserved_name = [];
                    for (let j = 0; j < message.reserved_name.length; ++j)
                        object.reserved_name[j] = message.reserved_name[j];
                }
                return object;
            };

            /**
             * Converts this DescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.DescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            DescriptorProto.ExtensionRange = (function() {

                /**
                 * Properties of an ExtensionRange.
                 * @memberof google.protobuf.DescriptorProto
                 * @interface IExtensionRange
                 * @property {number|null} [start] ExtensionRange start
                 * @property {number|null} [end] ExtensionRange end
                 */

                /**
                 * Constructs a new ExtensionRange.
                 * @memberof google.protobuf.DescriptorProto
                 * @classdesc Represents an ExtensionRange.
                 * @implements IExtensionRange
                 * @constructor
                 * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                 */
                function ExtensionRange(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ExtensionRange start.
                 * @member {number} start
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @instance
                 */
                ExtensionRange.prototype.start = 0;

                /**
                 * ExtensionRange end.
                 * @member {number} end
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @instance
                 */
                ExtensionRange.prototype.end = 0;

                /**
                 * Encodes the specified ExtensionRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionRange.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                    if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                    return writer;
                };

                /**
                 * Encodes the specified ExtensionRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionRange.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an ExtensionRange message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionRange.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.start = reader.int32();
                            break;
                        case 2:
                            message.end = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an ExtensionRange message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionRange.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an ExtensionRange message.
                 * @function verify
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ExtensionRange.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.start != null && message.hasOwnProperty("start"))
                        if (!$util.isInteger(message.start))
                            return "start: integer expected";
                    if (message.end != null && message.hasOwnProperty("end"))
                        if (!$util.isInteger(message.end))
                            return "end: integer expected";
                    return null;
                };

                /**
                 * Creates an ExtensionRange message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                 */
                ExtensionRange.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.DescriptorProto.ExtensionRange)
                        return object;
                    let message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                    if (object.start != null)
                        message.start = object.start | 0;
                    if (object.end != null)
                        message.end = object.end | 0;
                    return message;
                };

                /**
                 * Creates a plain object from an ExtensionRange message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.ExtensionRange} message ExtensionRange
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ExtensionRange.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.start = 0;
                        object.end = 0;
                    }
                    if (message.start != null && message.hasOwnProperty("start"))
                        object.start = message.start;
                    if (message.end != null && message.hasOwnProperty("end"))
                        object.end = message.end;
                    return object;
                };

                /**
                 * Converts this ExtensionRange to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ExtensionRange.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ExtensionRange;
            })();

            DescriptorProto.ReservedRange = (function() {

                /**
                 * Properties of a ReservedRange.
                 * @memberof google.protobuf.DescriptorProto
                 * @interface IReservedRange
                 * @property {number|null} [start] ReservedRange start
                 * @property {number|null} [end] ReservedRange end
                 */

                /**
                 * Constructs a new ReservedRange.
                 * @memberof google.protobuf.DescriptorProto
                 * @classdesc Represents a ReservedRange.
                 * @implements IReservedRange
                 * @constructor
                 * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                 */
                function ReservedRange(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ReservedRange start.
                 * @member {number} start
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @instance
                 */
                ReservedRange.prototype.start = 0;

                /**
                 * ReservedRange end.
                 * @member {number} end
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @instance
                 */
                ReservedRange.prototype.end = 0;

                /**
                 * Encodes the specified ReservedRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ReservedRange.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                    if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                    return writer;
                };

                /**
                 * Encodes the specified ReservedRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a ReservedRange message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ReservedRange.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.start = reader.int32();
                            break;
                        case 2:
                            message.end = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a ReservedRange message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ReservedRange.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a ReservedRange message.
                 * @function verify
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ReservedRange.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.start != null && message.hasOwnProperty("start"))
                        if (!$util.isInteger(message.start))
                            return "start: integer expected";
                    if (message.end != null && message.hasOwnProperty("end"))
                        if (!$util.isInteger(message.end))
                            return "end: integer expected";
                    return null;
                };

                /**
                 * Creates a ReservedRange message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                 */
                ReservedRange.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.DescriptorProto.ReservedRange)
                        return object;
                    let message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                    if (object.start != null)
                        message.start = object.start | 0;
                    if (object.end != null)
                        message.end = object.end | 0;
                    return message;
                };

                /**
                 * Creates a plain object from a ReservedRange message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.ReservedRange} message ReservedRange
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ReservedRange.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.start = 0;
                        object.end = 0;
                    }
                    if (message.start != null && message.hasOwnProperty("start"))
                        object.start = message.start;
                    if (message.end != null && message.hasOwnProperty("end"))
                        object.end = message.end;
                    return object;
                };

                /**
                 * Converts this ReservedRange to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ReservedRange.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ReservedRange;
            })();

            return DescriptorProto;
        })();

        protobuf.FieldDescriptorProto = (function() {

            /**
             * Properties of a FieldDescriptorProto.
             * @memberof google.protobuf
             * @interface IFieldDescriptorProto
             * @property {string|null} [name] FieldDescriptorProto name
             * @property {number|null} [number] FieldDescriptorProto number
             * @property {google.protobuf.FieldDescriptorProto.Label|null} [label] FieldDescriptorProto label
             * @property {google.protobuf.FieldDescriptorProto.Type|null} [type] FieldDescriptorProto type
             * @property {string|null} [type_name] FieldDescriptorProto type_name
             * @property {string|null} [extendee] FieldDescriptorProto extendee
             * @property {string|null} [default_value] FieldDescriptorProto default_value
             * @property {number|null} [oneof_index] FieldDescriptorProto oneof_index
             * @property {string|null} [json_name] FieldDescriptorProto json_name
             * @property {google.protobuf.IFieldOptions|null} [options] FieldDescriptorProto options
             */

            /**
             * Constructs a new FieldDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a FieldDescriptorProto.
             * @implements IFieldDescriptorProto
             * @constructor
             * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
             */
            function FieldDescriptorProto(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FieldDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.name = "";

            /**
             * FieldDescriptorProto number.
             * @member {number} number
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.number = 0;

            /**
             * FieldDescriptorProto label.
             * @member {google.protobuf.FieldDescriptorProto.Label} label
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.label = 1;

            /**
             * FieldDescriptorProto type.
             * @member {google.protobuf.FieldDescriptorProto.Type} type
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.type = 1;

            /**
             * FieldDescriptorProto type_name.
             * @member {string} type_name
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.type_name = "";

            /**
             * FieldDescriptorProto extendee.
             * @member {string} extendee
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.extendee = "";

            /**
             * FieldDescriptorProto default_value.
             * @member {string} default_value
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.default_value = "";

            /**
             * FieldDescriptorProto oneof_index.
             * @member {number} oneof_index
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.oneof_index = 0;

            /**
             * FieldDescriptorProto json_name.
             * @member {string} json_name
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.json_name = "";

            /**
             * FieldDescriptorProto options.
             * @member {google.protobuf.IFieldOptions|null|undefined} options
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.options = null;

            /**
             * Encodes the specified FieldDescriptorProto message. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FieldDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.extendee != null && Object.hasOwnProperty.call(message, "extendee"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.extendee);
                if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.number);
                if (message.label != null && Object.hasOwnProperty.call(message, "label"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.label);
                if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.type);
                if (message.type_name != null && Object.hasOwnProperty.call(message, "type_name"))
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.type_name);
                if (message.default_value != null && Object.hasOwnProperty.call(message, "default_value"))
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.default_value);
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.FieldOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.oneof_index != null && Object.hasOwnProperty.call(message, "oneof_index"))
                    writer.uint32(/* id 9, wireType 0 =*/72).int32(message.oneof_index);
                if (message.json_name != null && Object.hasOwnProperty.call(message, "json_name"))
                    writer.uint32(/* id 10, wireType 2 =*/82).string(message.json_name);
                return writer;
            };

            /**
             * Encodes the specified FieldDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FieldDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FieldDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FieldDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldDescriptorProto();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 3:
                        message.number = reader.int32();
                        break;
                    case 4:
                        message.label = reader.int32();
                        break;
                    case 5:
                        message.type = reader.int32();
                        break;
                    case 6:
                        message.type_name = reader.string();
                        break;
                    case 2:
                        message.extendee = reader.string();
                        break;
                    case 7:
                        message.default_value = reader.string();
                        break;
                    case 9:
                        message.oneof_index = reader.int32();
                        break;
                    case 10:
                        message.json_name = reader.string();
                        break;
                    case 8:
                        message.options = $root.google.protobuf.FieldOptions.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FieldDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FieldDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FieldDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FieldDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.number != null && message.hasOwnProperty("number"))
                    if (!$util.isInteger(message.number))
                        return "number: integer expected";
                if (message.label != null && message.hasOwnProperty("label"))
                    switch (message.label) {
                    default:
                        return "label: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                if (message.type != null && message.hasOwnProperty("type"))
                    switch (message.type) {
                    default:
                        return "type: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                        break;
                    }
                if (message.type_name != null && message.hasOwnProperty("type_name"))
                    if (!$util.isString(message.type_name))
                        return "type_name: string expected";
                if (message.extendee != null && message.hasOwnProperty("extendee"))
                    if (!$util.isString(message.extendee))
                        return "extendee: string expected";
                if (message.default_value != null && message.hasOwnProperty("default_value"))
                    if (!$util.isString(message.default_value))
                        return "default_value: string expected";
                if (message.oneof_index != null && message.hasOwnProperty("oneof_index"))
                    if (!$util.isInteger(message.oneof_index))
                        return "oneof_index: integer expected";
                if (message.json_name != null && message.hasOwnProperty("json_name"))
                    if (!$util.isString(message.json_name))
                        return "json_name: string expected";
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.FieldOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                return null;
            };

            /**
             * Creates a FieldDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
             */
            FieldDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FieldDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.FieldDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.number != null)
                    message.number = object.number | 0;
                switch (object.label) {
                case "LABEL_OPTIONAL":
                case 1:
                    message.label = 1;
                    break;
                case "LABEL_REQUIRED":
                case 2:
                    message.label = 2;
                    break;
                case "LABEL_REPEATED":
                case 3:
                    message.label = 3;
                    break;
                }
                switch (object.type) {
                case "TYPE_DOUBLE":
                case 1:
                    message.type = 1;
                    break;
                case "TYPE_FLOAT":
                case 2:
                    message.type = 2;
                    break;
                case "TYPE_INT64":
                case 3:
                    message.type = 3;
                    break;
                case "TYPE_UINT64":
                case 4:
                    message.type = 4;
                    break;
                case "TYPE_INT32":
                case 5:
                    message.type = 5;
                    break;
                case "TYPE_FIXED64":
                case 6:
                    message.type = 6;
                    break;
                case "TYPE_FIXED32":
                case 7:
                    message.type = 7;
                    break;
                case "TYPE_BOOL":
                case 8:
                    message.type = 8;
                    break;
                case "TYPE_STRING":
                case 9:
                    message.type = 9;
                    break;
                case "TYPE_GROUP":
                case 10:
                    message.type = 10;
                    break;
                case "TYPE_MESSAGE":
                case 11:
                    message.type = 11;
                    break;
                case "TYPE_BYTES":
                case 12:
                    message.type = 12;
                    break;
                case "TYPE_UINT32":
                case 13:
                    message.type = 13;
                    break;
                case "TYPE_ENUM":
                case 14:
                    message.type = 14;
                    break;
                case "TYPE_SFIXED32":
                case 15:
                    message.type = 15;
                    break;
                case "TYPE_SFIXED64":
                case 16:
                    message.type = 16;
                    break;
                case "TYPE_SINT32":
                case 17:
                    message.type = 17;
                    break;
                case "TYPE_SINT64":
                case 18:
                    message.type = 18;
                    break;
                }
                if (object.type_name != null)
                    message.type_name = String(object.type_name);
                if (object.extendee != null)
                    message.extendee = String(object.extendee);
                if (object.default_value != null)
                    message.default_value = String(object.default_value);
                if (object.oneof_index != null)
                    message.oneof_index = object.oneof_index | 0;
                if (object.json_name != null)
                    message.json_name = String(object.json_name);
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.FieldDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.FieldOptions.fromObject(object.options);
                }
                return message;
            };

            /**
             * Creates a plain object from a FieldDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {google.protobuf.FieldDescriptorProto} message FieldDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FieldDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.name = "";
                    object.extendee = "";
                    object.number = 0;
                    object.label = options.enums === String ? "LABEL_OPTIONAL" : 1;
                    object.type = options.enums === String ? "TYPE_DOUBLE" : 1;
                    object.type_name = "";
                    object.default_value = "";
                    object.options = null;
                    object.oneof_index = 0;
                    object.json_name = "";
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.extendee != null && message.hasOwnProperty("extendee"))
                    object.extendee = message.extendee;
                if (message.number != null && message.hasOwnProperty("number"))
                    object.number = message.number;
                if (message.label != null && message.hasOwnProperty("label"))
                    object.label = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Label[message.label] : message.label;
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Type[message.type] : message.type;
                if (message.type_name != null && message.hasOwnProperty("type_name"))
                    object.type_name = message.type_name;
                if (message.default_value != null && message.hasOwnProperty("default_value"))
                    object.default_value = message.default_value;
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.FieldOptions.toObject(message.options, options);
                if (message.oneof_index != null && message.hasOwnProperty("oneof_index"))
                    object.oneof_index = message.oneof_index;
                if (message.json_name != null && message.hasOwnProperty("json_name"))
                    object.json_name = message.json_name;
                return object;
            };

            /**
             * Converts this FieldDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FieldDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Type enum.
             * @name google.protobuf.FieldDescriptorProto.Type
             * @enum {number}
             * @property {number} TYPE_DOUBLE=1 TYPE_DOUBLE value
             * @property {number} TYPE_FLOAT=2 TYPE_FLOAT value
             * @property {number} TYPE_INT64=3 TYPE_INT64 value
             * @property {number} TYPE_UINT64=4 TYPE_UINT64 value
             * @property {number} TYPE_INT32=5 TYPE_INT32 value
             * @property {number} TYPE_FIXED64=6 TYPE_FIXED64 value
             * @property {number} TYPE_FIXED32=7 TYPE_FIXED32 value
             * @property {number} TYPE_BOOL=8 TYPE_BOOL value
             * @property {number} TYPE_STRING=9 TYPE_STRING value
             * @property {number} TYPE_GROUP=10 TYPE_GROUP value
             * @property {number} TYPE_MESSAGE=11 TYPE_MESSAGE value
             * @property {number} TYPE_BYTES=12 TYPE_BYTES value
             * @property {number} TYPE_UINT32=13 TYPE_UINT32 value
             * @property {number} TYPE_ENUM=14 TYPE_ENUM value
             * @property {number} TYPE_SFIXED32=15 TYPE_SFIXED32 value
             * @property {number} TYPE_SFIXED64=16 TYPE_SFIXED64 value
             * @property {number} TYPE_SINT32=17 TYPE_SINT32 value
             * @property {number} TYPE_SINT64=18 TYPE_SINT64 value
             */
            FieldDescriptorProto.Type = (function() {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "TYPE_DOUBLE"] = 1;
                values[valuesById[2] = "TYPE_FLOAT"] = 2;
                values[valuesById[3] = "TYPE_INT64"] = 3;
                values[valuesById[4] = "TYPE_UINT64"] = 4;
                values[valuesById[5] = "TYPE_INT32"] = 5;
                values[valuesById[6] = "TYPE_FIXED64"] = 6;
                values[valuesById[7] = "TYPE_FIXED32"] = 7;
                values[valuesById[8] = "TYPE_BOOL"] = 8;
                values[valuesById[9] = "TYPE_STRING"] = 9;
                values[valuesById[10] = "TYPE_GROUP"] = 10;
                values[valuesById[11] = "TYPE_MESSAGE"] = 11;
                values[valuesById[12] = "TYPE_BYTES"] = 12;
                values[valuesById[13] = "TYPE_UINT32"] = 13;
                values[valuesById[14] = "TYPE_ENUM"] = 14;
                values[valuesById[15] = "TYPE_SFIXED32"] = 15;
                values[valuesById[16] = "TYPE_SFIXED64"] = 16;
                values[valuesById[17] = "TYPE_SINT32"] = 17;
                values[valuesById[18] = "TYPE_SINT64"] = 18;
                return values;
            })();

            /**
             * Label enum.
             * @name google.protobuf.FieldDescriptorProto.Label
             * @enum {number}
             * @property {number} LABEL_OPTIONAL=1 LABEL_OPTIONAL value
             * @property {number} LABEL_REQUIRED=2 LABEL_REQUIRED value
             * @property {number} LABEL_REPEATED=3 LABEL_REPEATED value
             */
            FieldDescriptorProto.Label = (function() {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "LABEL_OPTIONAL"] = 1;
                values[valuesById[2] = "LABEL_REQUIRED"] = 2;
                values[valuesById[3] = "LABEL_REPEATED"] = 3;
                return values;
            })();

            return FieldDescriptorProto;
        })();

        protobuf.OneofDescriptorProto = (function() {

            /**
             * Properties of an OneofDescriptorProto.
             * @memberof google.protobuf
             * @interface IOneofDescriptorProto
             * @property {string|null} [name] OneofDescriptorProto name
             * @property {google.protobuf.IOneofOptions|null} [options] OneofDescriptorProto options
             */

            /**
             * Constructs a new OneofDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents an OneofDescriptorProto.
             * @implements IOneofDescriptorProto
             * @constructor
             * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
             */
            function OneofDescriptorProto(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * OneofDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.OneofDescriptorProto
             * @instance
             */
            OneofDescriptorProto.prototype.name = "";

            /**
             * OneofDescriptorProto options.
             * @member {google.protobuf.IOneofOptions|null|undefined} options
             * @memberof google.protobuf.OneofDescriptorProto
             * @instance
             */
            OneofDescriptorProto.prototype.options = null;

            /**
             * Encodes the specified OneofDescriptorProto message. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OneofDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.OneofOptions.encode(message.options, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified OneofDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OneofDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an OneofDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OneofDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofDescriptorProto();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message.options = $root.google.protobuf.OneofOptions.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an OneofDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OneofDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an OneofDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            OneofDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.OneofOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                return null;
            };

            /**
             * Creates an OneofDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
             */
            OneofDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.OneofDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.OneofDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.OneofDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.OneofOptions.fromObject(object.options);
                }
                return message;
            };

            /**
             * Creates a plain object from an OneofDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {google.protobuf.OneofDescriptorProto} message OneofDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            OneofDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.name = "";
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.OneofOptions.toObject(message.options, options);
                return object;
            };

            /**
             * Converts this OneofDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.OneofDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            OneofDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return OneofDescriptorProto;
        })();

        protobuf.EnumDescriptorProto = (function() {

            /**
             * Properties of an EnumDescriptorProto.
             * @memberof google.protobuf
             * @interface IEnumDescriptorProto
             * @property {string|null} [name] EnumDescriptorProto name
             * @property {Array.<google.protobuf.IEnumValueDescriptorProto>|null} [value] EnumDescriptorProto value
             * @property {google.protobuf.IEnumOptions|null} [options] EnumDescriptorProto options
             */

            /**
             * Constructs a new EnumDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents an EnumDescriptorProto.
             * @implements IEnumDescriptorProto
             * @constructor
             * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
             */
            function EnumDescriptorProto(properties) {
                this.value = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnumDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.name = "";

            /**
             * EnumDescriptorProto value.
             * @member {Array.<google.protobuf.IEnumValueDescriptorProto>} value
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.value = $util.emptyArray;

            /**
             * EnumDescriptorProto options.
             * @member {google.protobuf.IEnumOptions|null|undefined} options
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.options = null;

            /**
             * Encodes the specified EnumDescriptorProto message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.value != null && message.value.length)
                    for (let i = 0; i < message.value.length; ++i)
                        $root.google.protobuf.EnumValueDescriptorProto.encode(message.value[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.EnumOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified EnumDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EnumDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        if (!(message.value && message.value.length))
                            message.value = [];
                        message.value.push($root.google.protobuf.EnumValueDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        message.options = $root.google.protobuf.EnumOptions.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EnumDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EnumDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.value != null && message.hasOwnProperty("value")) {
                    if (!Array.isArray(message.value))
                        return "value: array expected";
                    for (let i = 0; i < message.value.length; ++i) {
                        let error = $root.google.protobuf.EnumValueDescriptorProto.verify(message.value[i]);
                        if (error)
                            return "value." + error;
                    }
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.EnumOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                return null;
            };

            /**
             * Creates an EnumDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
             */
            EnumDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.EnumDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.value) {
                    if (!Array.isArray(object.value))
                        throw TypeError(".google.protobuf.EnumDescriptorProto.value: array expected");
                    message.value = [];
                    for (let i = 0; i < object.value.length; ++i) {
                        if (typeof object.value[i] !== "object")
                            throw TypeError(".google.protobuf.EnumDescriptorProto.value: object expected");
                        message.value[i] = $root.google.protobuf.EnumValueDescriptorProto.fromObject(object.value[i]);
                    }
                }
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.EnumDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.EnumOptions.fromObject(object.options);
                }
                return message;
            };

            /**
             * Creates a plain object from an EnumDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {google.protobuf.EnumDescriptorProto} message EnumDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.value = [];
                if (options.defaults) {
                    object.name = "";
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.value && message.value.length) {
                    object.value = [];
                    for (let j = 0; j < message.value.length; ++j)
                        object.value[j] = $root.google.protobuf.EnumValueDescriptorProto.toObject(message.value[j], options);
                }
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.EnumOptions.toObject(message.options, options);
                return object;
            };

            /**
             * Converts this EnumDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EnumDescriptorProto;
        })();

        protobuf.EnumValueDescriptorProto = (function() {

            /**
             * Properties of an EnumValueDescriptorProto.
             * @memberof google.protobuf
             * @interface IEnumValueDescriptorProto
             * @property {string|null} [name] EnumValueDescriptorProto name
             * @property {number|null} [number] EnumValueDescriptorProto number
             * @property {google.protobuf.IEnumValueOptions|null} [options] EnumValueDescriptorProto options
             */

            /**
             * Constructs a new EnumValueDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents an EnumValueDescriptorProto.
             * @implements IEnumValueDescriptorProto
             * @constructor
             * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
             */
            function EnumValueDescriptorProto(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnumValueDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @instance
             */
            EnumValueDescriptorProto.prototype.name = "";

            /**
             * EnumValueDescriptorProto number.
             * @member {number} number
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @instance
             */
            EnumValueDescriptorProto.prototype.number = 0;

            /**
             * EnumValueDescriptorProto options.
             * @member {google.protobuf.IEnumValueOptions|null|undefined} options
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @instance
             */
            EnumValueDescriptorProto.prototype.options = null;

            /**
             * Encodes the specified EnumValueDescriptorProto message. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumValueDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.number);
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.EnumValueOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified EnumValueDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumValueDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EnumValueDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumValueDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueDescriptorProto();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message.number = reader.int32();
                        break;
                    case 3:
                        message.options = $root.google.protobuf.EnumValueOptions.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EnumValueDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumValueDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EnumValueDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumValueDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.number != null && message.hasOwnProperty("number"))
                    if (!$util.isInteger(message.number))
                        return "number: integer expected";
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.EnumValueOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                return null;
            };

            /**
             * Creates an EnumValueDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
             */
            EnumValueDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumValueDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.EnumValueDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.number != null)
                    message.number = object.number | 0;
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.EnumValueDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.EnumValueOptions.fromObject(object.options);
                }
                return message;
            };

            /**
             * Creates a plain object from an EnumValueDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {google.protobuf.EnumValueDescriptorProto} message EnumValueDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumValueDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.name = "";
                    object.number = 0;
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.number != null && message.hasOwnProperty("number"))
                    object.number = message.number;
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.EnumValueOptions.toObject(message.options, options);
                return object;
            };

            /**
             * Converts this EnumValueDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumValueDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EnumValueDescriptorProto;
        })();

        protobuf.ServiceDescriptorProto = (function() {

            /**
             * Properties of a ServiceDescriptorProto.
             * @memberof google.protobuf
             * @interface IServiceDescriptorProto
             * @property {string|null} [name] ServiceDescriptorProto name
             * @property {Array.<google.protobuf.IMethodDescriptorProto>|null} [method] ServiceDescriptorProto method
             * @property {google.protobuf.IServiceOptions|null} [options] ServiceDescriptorProto options
             */

            /**
             * Constructs a new ServiceDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a ServiceDescriptorProto.
             * @implements IServiceDescriptorProto
             * @constructor
             * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
             */
            function ServiceDescriptorProto(properties) {
                this.method = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ServiceDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.ServiceDescriptorProto
             * @instance
             */
            ServiceDescriptorProto.prototype.name = "";

            /**
             * ServiceDescriptorProto method.
             * @member {Array.<google.protobuf.IMethodDescriptorProto>} method
             * @memberof google.protobuf.ServiceDescriptorProto
             * @instance
             */
            ServiceDescriptorProto.prototype.method = $util.emptyArray;

            /**
             * ServiceDescriptorProto options.
             * @member {google.protobuf.IServiceOptions|null|undefined} options
             * @memberof google.protobuf.ServiceDescriptorProto
             * @instance
             */
            ServiceDescriptorProto.prototype.options = null;

            /**
             * Encodes the specified ServiceDescriptorProto message. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ServiceDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.method != null && message.method.length)
                    for (let i = 0; i < message.method.length; ++i)
                        $root.google.protobuf.MethodDescriptorProto.encode(message.method[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.ServiceOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ServiceDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ServiceDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ServiceDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ServiceDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceDescriptorProto();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        if (!(message.method && message.method.length))
                            message.method = [];
                        message.method.push($root.google.protobuf.MethodDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        message.options = $root.google.protobuf.ServiceOptions.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ServiceDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ServiceDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ServiceDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ServiceDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.method != null && message.hasOwnProperty("method")) {
                    if (!Array.isArray(message.method))
                        return "method: array expected";
                    for (let i = 0; i < message.method.length; ++i) {
                        let error = $root.google.protobuf.MethodDescriptorProto.verify(message.method[i]);
                        if (error)
                            return "method." + error;
                    }
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.ServiceOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                return null;
            };

            /**
             * Creates a ServiceDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
             */
            ServiceDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.ServiceDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.ServiceDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.method) {
                    if (!Array.isArray(object.method))
                        throw TypeError(".google.protobuf.ServiceDescriptorProto.method: array expected");
                    message.method = [];
                    for (let i = 0; i < object.method.length; ++i) {
                        if (typeof object.method[i] !== "object")
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.method: object expected");
                        message.method[i] = $root.google.protobuf.MethodDescriptorProto.fromObject(object.method[i]);
                    }
                }
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.ServiceDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.ServiceOptions.fromObject(object.options);
                }
                return message;
            };

            /**
             * Creates a plain object from a ServiceDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {google.protobuf.ServiceDescriptorProto} message ServiceDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ServiceDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.method = [];
                if (options.defaults) {
                    object.name = "";
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.method && message.method.length) {
                    object.method = [];
                    for (let j = 0; j < message.method.length; ++j)
                        object.method[j] = $root.google.protobuf.MethodDescriptorProto.toObject(message.method[j], options);
                }
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.ServiceOptions.toObject(message.options, options);
                return object;
            };

            /**
             * Converts this ServiceDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.ServiceDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ServiceDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ServiceDescriptorProto;
        })();

        protobuf.MethodDescriptorProto = (function() {

            /**
             * Properties of a MethodDescriptorProto.
             * @memberof google.protobuf
             * @interface IMethodDescriptorProto
             * @property {string|null} [name] MethodDescriptorProto name
             * @property {string|null} [input_type] MethodDescriptorProto input_type
             * @property {string|null} [output_type] MethodDescriptorProto output_type
             * @property {google.protobuf.IMethodOptions|null} [options] MethodDescriptorProto options
             * @property {boolean|null} [client_streaming] MethodDescriptorProto client_streaming
             * @property {boolean|null} [server_streaming] MethodDescriptorProto server_streaming
             */

            /**
             * Constructs a new MethodDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a MethodDescriptorProto.
             * @implements IMethodDescriptorProto
             * @constructor
             * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
             */
            function MethodDescriptorProto(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MethodDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.name = "";

            /**
             * MethodDescriptorProto input_type.
             * @member {string} input_type
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.input_type = "";

            /**
             * MethodDescriptorProto output_type.
             * @member {string} output_type
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.output_type = "";

            /**
             * MethodDescriptorProto options.
             * @member {google.protobuf.IMethodOptions|null|undefined} options
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.options = null;

            /**
             * MethodDescriptorProto client_streaming.
             * @member {boolean} client_streaming
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.client_streaming = false;

            /**
             * MethodDescriptorProto server_streaming.
             * @member {boolean} server_streaming
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.server_streaming = false;

            /**
             * Encodes the specified MethodDescriptorProto message. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MethodDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.input_type != null && Object.hasOwnProperty.call(message, "input_type"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.input_type);
                if (message.output_type != null && Object.hasOwnProperty.call(message, "output_type"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.output_type);
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.MethodOptions.encode(message.options, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.client_streaming != null && Object.hasOwnProperty.call(message, "client_streaming"))
                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.client_streaming);
                if (message.server_streaming != null && Object.hasOwnProperty.call(message, "server_streaming"))
                    writer.uint32(/* id 6, wireType 0 =*/48).bool(message.server_streaming);
                return writer;
            };

            /**
             * Encodes the specified MethodDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MethodDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MethodDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MethodDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodDescriptorProto();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message.input_type = reader.string();
                        break;
                    case 3:
                        message.output_type = reader.string();
                        break;
                    case 4:
                        message.options = $root.google.protobuf.MethodOptions.decode(reader, reader.uint32());
                        break;
                    case 5:
                        message.client_streaming = reader.bool();
                        break;
                    case 6:
                        message.server_streaming = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MethodDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MethodDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MethodDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MethodDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.input_type != null && message.hasOwnProperty("input_type"))
                    if (!$util.isString(message.input_type))
                        return "input_type: string expected";
                if (message.output_type != null && message.hasOwnProperty("output_type"))
                    if (!$util.isString(message.output_type))
                        return "output_type: string expected";
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.MethodOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                if (message.client_streaming != null && message.hasOwnProperty("client_streaming"))
                    if (typeof message.client_streaming !== "boolean")
                        return "client_streaming: boolean expected";
                if (message.server_streaming != null && message.hasOwnProperty("server_streaming"))
                    if (typeof message.server_streaming !== "boolean")
                        return "server_streaming: boolean expected";
                return null;
            };

            /**
             * Creates a MethodDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
             */
            MethodDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.MethodDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.MethodDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.input_type != null)
                    message.input_type = String(object.input_type);
                if (object.output_type != null)
                    message.output_type = String(object.output_type);
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.MethodDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.MethodOptions.fromObject(object.options);
                }
                if (object.client_streaming != null)
                    message.client_streaming = Boolean(object.client_streaming);
                if (object.server_streaming != null)
                    message.server_streaming = Boolean(object.server_streaming);
                return message;
            };

            /**
             * Creates a plain object from a MethodDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {google.protobuf.MethodDescriptorProto} message MethodDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MethodDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.name = "";
                    object.input_type = "";
                    object.output_type = "";
                    object.options = null;
                    object.client_streaming = false;
                    object.server_streaming = false;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.input_type != null && message.hasOwnProperty("input_type"))
                    object.input_type = message.input_type;
                if (message.output_type != null && message.hasOwnProperty("output_type"))
                    object.output_type = message.output_type;
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.MethodOptions.toObject(message.options, options);
                if (message.client_streaming != null && message.hasOwnProperty("client_streaming"))
                    object.client_streaming = message.client_streaming;
                if (message.server_streaming != null && message.hasOwnProperty("server_streaming"))
                    object.server_streaming = message.server_streaming;
                return object;
            };

            /**
             * Converts this MethodDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MethodDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MethodDescriptorProto;
        })();

        protobuf.FileOptions = (function() {

            /**
             * Properties of a FileOptions.
             * @memberof google.protobuf
             * @interface IFileOptions
             * @property {string|null} [java_package] FileOptions java_package
             * @property {string|null} [java_outer_classname] FileOptions java_outer_classname
             * @property {boolean|null} [java_multiple_files] FileOptions java_multiple_files
             * @property {boolean|null} [java_generate_equals_and_hash] FileOptions java_generate_equals_and_hash
             * @property {boolean|null} [java_string_check_utf8] FileOptions java_string_check_utf8
             * @property {google.protobuf.FileOptions.OptimizeMode|null} [optimize_for] FileOptions optimize_for
             * @property {string|null} [go_package] FileOptions go_package
             * @property {boolean|null} [cc_generic_services] FileOptions cc_generic_services
             * @property {boolean|null} [java_generic_services] FileOptions java_generic_services
             * @property {boolean|null} [py_generic_services] FileOptions py_generic_services
             * @property {boolean|null} [deprecated] FileOptions deprecated
             * @property {boolean|null} [cc_enable_arenas] FileOptions cc_enable_arenas
             * @property {string|null} [objc_class_prefix] FileOptions objc_class_prefix
             * @property {string|null} [csharp_namespace] FileOptions csharp_namespace
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] FileOptions uninterpreted_option
             * @property {boolean|null} [".gogoproto.goproto_getters_all"] FileOptions .gogoproto.goproto_getters_all
             * @property {boolean|null} [".gogoproto.goproto_enum_prefix_all"] FileOptions .gogoproto.goproto_enum_prefix_all
             * @property {boolean|null} [".gogoproto.goproto_stringer_all"] FileOptions .gogoproto.goproto_stringer_all
             * @property {boolean|null} [".gogoproto.verbose_equal_all"] FileOptions .gogoproto.verbose_equal_all
             * @property {boolean|null} [".gogoproto.face_all"] FileOptions .gogoproto.face_all
             * @property {boolean|null} [".gogoproto.gostring_all"] FileOptions .gogoproto.gostring_all
             * @property {boolean|null} [".gogoproto.populate_all"] FileOptions .gogoproto.populate_all
             * @property {boolean|null} [".gogoproto.stringer_all"] FileOptions .gogoproto.stringer_all
             * @property {boolean|null} [".gogoproto.onlyone_all"] FileOptions .gogoproto.onlyone_all
             * @property {boolean|null} [".gogoproto.equal_all"] FileOptions .gogoproto.equal_all
             * @property {boolean|null} [".gogoproto.description_all"] FileOptions .gogoproto.description_all
             * @property {boolean|null} [".gogoproto.testgen_all"] FileOptions .gogoproto.testgen_all
             * @property {boolean|null} [".gogoproto.benchgen_all"] FileOptions .gogoproto.benchgen_all
             * @property {boolean|null} [".gogoproto.marshaler_all"] FileOptions .gogoproto.marshaler_all
             * @property {boolean|null} [".gogoproto.unmarshaler_all"] FileOptions .gogoproto.unmarshaler_all
             * @property {boolean|null} [".gogoproto.stable_marshaler_all"] FileOptions .gogoproto.stable_marshaler_all
             * @property {boolean|null} [".gogoproto.sizer_all"] FileOptions .gogoproto.sizer_all
             * @property {boolean|null} [".gogoproto.goproto_enum_stringer_all"] FileOptions .gogoproto.goproto_enum_stringer_all
             * @property {boolean|null} [".gogoproto.enum_stringer_all"] FileOptions .gogoproto.enum_stringer_all
             * @property {boolean|null} [".gogoproto.unsafe_marshaler_all"] FileOptions .gogoproto.unsafe_marshaler_all
             * @property {boolean|null} [".gogoproto.unsafe_unmarshaler_all"] FileOptions .gogoproto.unsafe_unmarshaler_all
             * @property {boolean|null} [".gogoproto.goproto_extensions_map_all"] FileOptions .gogoproto.goproto_extensions_map_all
             * @property {boolean|null} [".gogoproto.goproto_unrecognized_all"] FileOptions .gogoproto.goproto_unrecognized_all
             * @property {boolean|null} [".gogoproto.gogoproto_import"] FileOptions .gogoproto.gogoproto_import
             * @property {boolean|null} [".gogoproto.protosizer_all"] FileOptions .gogoproto.protosizer_all
             * @property {boolean|null} [".gogoproto.compare_all"] FileOptions .gogoproto.compare_all
             * @property {boolean|null} [".gogoproto.typedecl_all"] FileOptions .gogoproto.typedecl_all
             * @property {boolean|null} [".gogoproto.enumdecl_all"] FileOptions .gogoproto.enumdecl_all
             * @property {boolean|null} [".gogoproto.goproto_registration"] FileOptions .gogoproto.goproto_registration
             * @property {boolean|null} [".gogoproto.messagename_all"] FileOptions .gogoproto.messagename_all
             * @property {boolean|null} [".gogoproto.goproto_sizecache_all"] FileOptions .gogoproto.goproto_sizecache_all
             * @property {boolean|null} [".gogoproto.goproto_unkeyed_all"] FileOptions .gogoproto.goproto_unkeyed_all
             */

            /**
             * Constructs a new FileOptions.
             * @memberof google.protobuf
             * @classdesc Represents a FileOptions.
             * @implements IFileOptions
             * @constructor
             * @param {google.protobuf.IFileOptions=} [properties] Properties to set
             */
            function FileOptions(properties) {
                this.uninterpreted_option = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FileOptions java_package.
             * @member {string} java_package
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.java_package = "";

            /**
             * FileOptions java_outer_classname.
             * @member {string} java_outer_classname
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.java_outer_classname = "";

            /**
             * FileOptions java_multiple_files.
             * @member {boolean} java_multiple_files
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.java_multiple_files = false;

            /**
             * FileOptions java_generate_equals_and_hash.
             * @member {boolean} java_generate_equals_and_hash
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.java_generate_equals_and_hash = false;

            /**
             * FileOptions java_string_check_utf8.
             * @member {boolean} java_string_check_utf8
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.java_string_check_utf8 = false;

            /**
             * FileOptions optimize_for.
             * @member {google.protobuf.FileOptions.OptimizeMode} optimize_for
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.optimize_for = 1;

            /**
             * FileOptions go_package.
             * @member {string} go_package
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.go_package = "";

            /**
             * FileOptions cc_generic_services.
             * @member {boolean} cc_generic_services
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.cc_generic_services = false;

            /**
             * FileOptions java_generic_services.
             * @member {boolean} java_generic_services
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.java_generic_services = false;

            /**
             * FileOptions py_generic_services.
             * @member {boolean} py_generic_services
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.py_generic_services = false;

            /**
             * FileOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.deprecated = false;

            /**
             * FileOptions cc_enable_arenas.
             * @member {boolean} cc_enable_arenas
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.cc_enable_arenas = false;

            /**
             * FileOptions objc_class_prefix.
             * @member {string} objc_class_prefix
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.objc_class_prefix = "";

            /**
             * FileOptions csharp_namespace.
             * @member {string} csharp_namespace
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.csharp_namespace = "";

            /**
             * FileOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * FileOptions .gogoproto.goproto_getters_all.
             * @member {boolean} .gogoproto.goproto_getters_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.goproto_getters_all"] = false;

            /**
             * FileOptions .gogoproto.goproto_enum_prefix_all.
             * @member {boolean} .gogoproto.goproto_enum_prefix_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.goproto_enum_prefix_all"] = false;

            /**
             * FileOptions .gogoproto.goproto_stringer_all.
             * @member {boolean} .gogoproto.goproto_stringer_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.goproto_stringer_all"] = false;

            /**
             * FileOptions .gogoproto.verbose_equal_all.
             * @member {boolean} .gogoproto.verbose_equal_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.verbose_equal_all"] = false;

            /**
             * FileOptions .gogoproto.face_all.
             * @member {boolean} .gogoproto.face_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.face_all"] = false;

            /**
             * FileOptions .gogoproto.gostring_all.
             * @member {boolean} .gogoproto.gostring_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.gostring_all"] = false;

            /**
             * FileOptions .gogoproto.populate_all.
             * @member {boolean} .gogoproto.populate_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.populate_all"] = false;

            /**
             * FileOptions .gogoproto.stringer_all.
             * @member {boolean} .gogoproto.stringer_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.stringer_all"] = false;

            /**
             * FileOptions .gogoproto.onlyone_all.
             * @member {boolean} .gogoproto.onlyone_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.onlyone_all"] = false;

            /**
             * FileOptions .gogoproto.equal_all.
             * @member {boolean} .gogoproto.equal_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.equal_all"] = false;

            /**
             * FileOptions .gogoproto.description_all.
             * @member {boolean} .gogoproto.description_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.description_all"] = false;

            /**
             * FileOptions .gogoproto.testgen_all.
             * @member {boolean} .gogoproto.testgen_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.testgen_all"] = false;

            /**
             * FileOptions .gogoproto.benchgen_all.
             * @member {boolean} .gogoproto.benchgen_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.benchgen_all"] = false;

            /**
             * FileOptions .gogoproto.marshaler_all.
             * @member {boolean} .gogoproto.marshaler_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.marshaler_all"] = false;

            /**
             * FileOptions .gogoproto.unmarshaler_all.
             * @member {boolean} .gogoproto.unmarshaler_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.unmarshaler_all"] = false;

            /**
             * FileOptions .gogoproto.stable_marshaler_all.
             * @member {boolean} .gogoproto.stable_marshaler_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.stable_marshaler_all"] = false;

            /**
             * FileOptions .gogoproto.sizer_all.
             * @member {boolean} .gogoproto.sizer_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.sizer_all"] = false;

            /**
             * FileOptions .gogoproto.goproto_enum_stringer_all.
             * @member {boolean} .gogoproto.goproto_enum_stringer_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.goproto_enum_stringer_all"] = false;

            /**
             * FileOptions .gogoproto.enum_stringer_all.
             * @member {boolean} .gogoproto.enum_stringer_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.enum_stringer_all"] = false;

            /**
             * FileOptions .gogoproto.unsafe_marshaler_all.
             * @member {boolean} .gogoproto.unsafe_marshaler_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.unsafe_marshaler_all"] = false;

            /**
             * FileOptions .gogoproto.unsafe_unmarshaler_all.
             * @member {boolean} .gogoproto.unsafe_unmarshaler_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.unsafe_unmarshaler_all"] = false;

            /**
             * FileOptions .gogoproto.goproto_extensions_map_all.
             * @member {boolean} .gogoproto.goproto_extensions_map_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.goproto_extensions_map_all"] = false;

            /**
             * FileOptions .gogoproto.goproto_unrecognized_all.
             * @member {boolean} .gogoproto.goproto_unrecognized_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.goproto_unrecognized_all"] = false;

            /**
             * FileOptions .gogoproto.gogoproto_import.
             * @member {boolean} .gogoproto.gogoproto_import
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.gogoproto_import"] = false;

            /**
             * FileOptions .gogoproto.protosizer_all.
             * @member {boolean} .gogoproto.protosizer_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.protosizer_all"] = false;

            /**
             * FileOptions .gogoproto.compare_all.
             * @member {boolean} .gogoproto.compare_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.compare_all"] = false;

            /**
             * FileOptions .gogoproto.typedecl_all.
             * @member {boolean} .gogoproto.typedecl_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.typedecl_all"] = false;

            /**
             * FileOptions .gogoproto.enumdecl_all.
             * @member {boolean} .gogoproto.enumdecl_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.enumdecl_all"] = false;

            /**
             * FileOptions .gogoproto.goproto_registration.
             * @member {boolean} .gogoproto.goproto_registration
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.goproto_registration"] = false;

            /**
             * FileOptions .gogoproto.messagename_all.
             * @member {boolean} .gogoproto.messagename_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.messagename_all"] = false;

            /**
             * FileOptions .gogoproto.goproto_sizecache_all.
             * @member {boolean} .gogoproto.goproto_sizecache_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.goproto_sizecache_all"] = false;

            /**
             * FileOptions .gogoproto.goproto_unkeyed_all.
             * @member {boolean} .gogoproto.goproto_unkeyed_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.goproto_unkeyed_all"] = false;

            /**
             * Encodes the specified FileOptions message. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.java_package != null && Object.hasOwnProperty.call(message, "java_package"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.java_package);
                if (message.java_outer_classname != null && Object.hasOwnProperty.call(message, "java_outer_classname"))
                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.java_outer_classname);
                if (message.optimize_for != null && Object.hasOwnProperty.call(message, "optimize_for"))
                    writer.uint32(/* id 9, wireType 0 =*/72).int32(message.optimize_for);
                if (message.java_multiple_files != null && Object.hasOwnProperty.call(message, "java_multiple_files"))
                    writer.uint32(/* id 10, wireType 0 =*/80).bool(message.java_multiple_files);
                if (message.go_package != null && Object.hasOwnProperty.call(message, "go_package"))
                    writer.uint32(/* id 11, wireType 2 =*/90).string(message.go_package);
                if (message.cc_generic_services != null && Object.hasOwnProperty.call(message, "cc_generic_services"))
                    writer.uint32(/* id 16, wireType 0 =*/128).bool(message.cc_generic_services);
                if (message.java_generic_services != null && Object.hasOwnProperty.call(message, "java_generic_services"))
                    writer.uint32(/* id 17, wireType 0 =*/136).bool(message.java_generic_services);
                if (message.py_generic_services != null && Object.hasOwnProperty.call(message, "py_generic_services"))
                    writer.uint32(/* id 18, wireType 0 =*/144).bool(message.py_generic_services);
                if (message.java_generate_equals_and_hash != null && Object.hasOwnProperty.call(message, "java_generate_equals_and_hash"))
                    writer.uint32(/* id 20, wireType 0 =*/160).bool(message.java_generate_equals_and_hash);
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 23, wireType 0 =*/184).bool(message.deprecated);
                if (message.java_string_check_utf8 != null && Object.hasOwnProperty.call(message, "java_string_check_utf8"))
                    writer.uint32(/* id 27, wireType 0 =*/216).bool(message.java_string_check_utf8);
                if (message.cc_enable_arenas != null && Object.hasOwnProperty.call(message, "cc_enable_arenas"))
                    writer.uint32(/* id 31, wireType 0 =*/248).bool(message.cc_enable_arenas);
                if (message.objc_class_prefix != null && Object.hasOwnProperty.call(message, "objc_class_prefix"))
                    writer.uint32(/* id 36, wireType 2 =*/290).string(message.objc_class_prefix);
                if (message.csharp_namespace != null && Object.hasOwnProperty.call(message, "csharp_namespace"))
                    writer.uint32(/* id 37, wireType 2 =*/298).string(message.csharp_namespace);
                if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                    for (let i = 0; i < message.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                if (message[".gogoproto.goproto_getters_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_getters_all"))
                    writer.uint32(/* id 63001, wireType 0 =*/504008).bool(message[".gogoproto.goproto_getters_all"]);
                if (message[".gogoproto.goproto_enum_prefix_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_enum_prefix_all"))
                    writer.uint32(/* id 63002, wireType 0 =*/504016).bool(message[".gogoproto.goproto_enum_prefix_all"]);
                if (message[".gogoproto.goproto_stringer_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_stringer_all"))
                    writer.uint32(/* id 63003, wireType 0 =*/504024).bool(message[".gogoproto.goproto_stringer_all"]);
                if (message[".gogoproto.verbose_equal_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.verbose_equal_all"))
                    writer.uint32(/* id 63004, wireType 0 =*/504032).bool(message[".gogoproto.verbose_equal_all"]);
                if (message[".gogoproto.face_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.face_all"))
                    writer.uint32(/* id 63005, wireType 0 =*/504040).bool(message[".gogoproto.face_all"]);
                if (message[".gogoproto.gostring_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.gostring_all"))
                    writer.uint32(/* id 63006, wireType 0 =*/504048).bool(message[".gogoproto.gostring_all"]);
                if (message[".gogoproto.populate_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.populate_all"))
                    writer.uint32(/* id 63007, wireType 0 =*/504056).bool(message[".gogoproto.populate_all"]);
                if (message[".gogoproto.stringer_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.stringer_all"))
                    writer.uint32(/* id 63008, wireType 0 =*/504064).bool(message[".gogoproto.stringer_all"]);
                if (message[".gogoproto.onlyone_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.onlyone_all"))
                    writer.uint32(/* id 63009, wireType 0 =*/504072).bool(message[".gogoproto.onlyone_all"]);
                if (message[".gogoproto.equal_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.equal_all"))
                    writer.uint32(/* id 63013, wireType 0 =*/504104).bool(message[".gogoproto.equal_all"]);
                if (message[".gogoproto.description_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.description_all"))
                    writer.uint32(/* id 63014, wireType 0 =*/504112).bool(message[".gogoproto.description_all"]);
                if (message[".gogoproto.testgen_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.testgen_all"))
                    writer.uint32(/* id 63015, wireType 0 =*/504120).bool(message[".gogoproto.testgen_all"]);
                if (message[".gogoproto.benchgen_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.benchgen_all"))
                    writer.uint32(/* id 63016, wireType 0 =*/504128).bool(message[".gogoproto.benchgen_all"]);
                if (message[".gogoproto.marshaler_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.marshaler_all"))
                    writer.uint32(/* id 63017, wireType 0 =*/504136).bool(message[".gogoproto.marshaler_all"]);
                if (message[".gogoproto.unmarshaler_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.unmarshaler_all"))
                    writer.uint32(/* id 63018, wireType 0 =*/504144).bool(message[".gogoproto.unmarshaler_all"]);
                if (message[".gogoproto.stable_marshaler_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.stable_marshaler_all"))
                    writer.uint32(/* id 63019, wireType 0 =*/504152).bool(message[".gogoproto.stable_marshaler_all"]);
                if (message[".gogoproto.sizer_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.sizer_all"))
                    writer.uint32(/* id 63020, wireType 0 =*/504160).bool(message[".gogoproto.sizer_all"]);
                if (message[".gogoproto.goproto_enum_stringer_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_enum_stringer_all"))
                    writer.uint32(/* id 63021, wireType 0 =*/504168).bool(message[".gogoproto.goproto_enum_stringer_all"]);
                if (message[".gogoproto.enum_stringer_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.enum_stringer_all"))
                    writer.uint32(/* id 63022, wireType 0 =*/504176).bool(message[".gogoproto.enum_stringer_all"]);
                if (message[".gogoproto.unsafe_marshaler_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.unsafe_marshaler_all"))
                    writer.uint32(/* id 63023, wireType 0 =*/504184).bool(message[".gogoproto.unsafe_marshaler_all"]);
                if (message[".gogoproto.unsafe_unmarshaler_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.unsafe_unmarshaler_all"))
                    writer.uint32(/* id 63024, wireType 0 =*/504192).bool(message[".gogoproto.unsafe_unmarshaler_all"]);
                if (message[".gogoproto.goproto_extensions_map_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_extensions_map_all"))
                    writer.uint32(/* id 63025, wireType 0 =*/504200).bool(message[".gogoproto.goproto_extensions_map_all"]);
                if (message[".gogoproto.goproto_unrecognized_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_unrecognized_all"))
                    writer.uint32(/* id 63026, wireType 0 =*/504208).bool(message[".gogoproto.goproto_unrecognized_all"]);
                if (message[".gogoproto.gogoproto_import"] != null && Object.hasOwnProperty.call(message, ".gogoproto.gogoproto_import"))
                    writer.uint32(/* id 63027, wireType 0 =*/504216).bool(message[".gogoproto.gogoproto_import"]);
                if (message[".gogoproto.protosizer_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.protosizer_all"))
                    writer.uint32(/* id 63028, wireType 0 =*/504224).bool(message[".gogoproto.protosizer_all"]);
                if (message[".gogoproto.compare_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.compare_all"))
                    writer.uint32(/* id 63029, wireType 0 =*/504232).bool(message[".gogoproto.compare_all"]);
                if (message[".gogoproto.typedecl_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.typedecl_all"))
                    writer.uint32(/* id 63030, wireType 0 =*/504240).bool(message[".gogoproto.typedecl_all"]);
                if (message[".gogoproto.enumdecl_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.enumdecl_all"))
                    writer.uint32(/* id 63031, wireType 0 =*/504248).bool(message[".gogoproto.enumdecl_all"]);
                if (message[".gogoproto.goproto_registration"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_registration"))
                    writer.uint32(/* id 63032, wireType 0 =*/504256).bool(message[".gogoproto.goproto_registration"]);
                if (message[".gogoproto.messagename_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.messagename_all"))
                    writer.uint32(/* id 63033, wireType 0 =*/504264).bool(message[".gogoproto.messagename_all"]);
                if (message[".gogoproto.goproto_sizecache_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_sizecache_all"))
                    writer.uint32(/* id 63034, wireType 0 =*/504272).bool(message[".gogoproto.goproto_sizecache_all"]);
                if (message[".gogoproto.goproto_unkeyed_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_unkeyed_all"))
                    writer.uint32(/* id 63035, wireType 0 =*/504280).bool(message[".gogoproto.goproto_unkeyed_all"]);
                return writer;
            };

            /**
             * Encodes the specified FileOptions message, length delimited. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FileOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FileOptions} FileOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.java_package = reader.string();
                        break;
                    case 8:
                        message.java_outer_classname = reader.string();
                        break;
                    case 10:
                        message.java_multiple_files = reader.bool();
                        break;
                    case 20:
                        message.java_generate_equals_and_hash = reader.bool();
                        break;
                    case 27:
                        message.java_string_check_utf8 = reader.bool();
                        break;
                    case 9:
                        message.optimize_for = reader.int32();
                        break;
                    case 11:
                        message.go_package = reader.string();
                        break;
                    case 16:
                        message.cc_generic_services = reader.bool();
                        break;
                    case 17:
                        message.java_generic_services = reader.bool();
                        break;
                    case 18:
                        message.py_generic_services = reader.bool();
                        break;
                    case 23:
                        message.deprecated = reader.bool();
                        break;
                    case 31:
                        message.cc_enable_arenas = reader.bool();
                        break;
                    case 36:
                        message.objc_class_prefix = reader.string();
                        break;
                    case 37:
                        message.csharp_namespace = reader.string();
                        break;
                    case 999:
                        if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                            message.uninterpreted_option = [];
                        message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    case 63001:
                        message[".gogoproto.goproto_getters_all"] = reader.bool();
                        break;
                    case 63002:
                        message[".gogoproto.goproto_enum_prefix_all"] = reader.bool();
                        break;
                    case 63003:
                        message[".gogoproto.goproto_stringer_all"] = reader.bool();
                        break;
                    case 63004:
                        message[".gogoproto.verbose_equal_all"] = reader.bool();
                        break;
                    case 63005:
                        message[".gogoproto.face_all"] = reader.bool();
                        break;
                    case 63006:
                        message[".gogoproto.gostring_all"] = reader.bool();
                        break;
                    case 63007:
                        message[".gogoproto.populate_all"] = reader.bool();
                        break;
                    case 63008:
                        message[".gogoproto.stringer_all"] = reader.bool();
                        break;
                    case 63009:
                        message[".gogoproto.onlyone_all"] = reader.bool();
                        break;
                    case 63013:
                        message[".gogoproto.equal_all"] = reader.bool();
                        break;
                    case 63014:
                        message[".gogoproto.description_all"] = reader.bool();
                        break;
                    case 63015:
                        message[".gogoproto.testgen_all"] = reader.bool();
                        break;
                    case 63016:
                        message[".gogoproto.benchgen_all"] = reader.bool();
                        break;
                    case 63017:
                        message[".gogoproto.marshaler_all"] = reader.bool();
                        break;
                    case 63018:
                        message[".gogoproto.unmarshaler_all"] = reader.bool();
                        break;
                    case 63019:
                        message[".gogoproto.stable_marshaler_all"] = reader.bool();
                        break;
                    case 63020:
                        message[".gogoproto.sizer_all"] = reader.bool();
                        break;
                    case 63021:
                        message[".gogoproto.goproto_enum_stringer_all"] = reader.bool();
                        break;
                    case 63022:
                        message[".gogoproto.enum_stringer_all"] = reader.bool();
                        break;
                    case 63023:
                        message[".gogoproto.unsafe_marshaler_all"] = reader.bool();
                        break;
                    case 63024:
                        message[".gogoproto.unsafe_unmarshaler_all"] = reader.bool();
                        break;
                    case 63025:
                        message[".gogoproto.goproto_extensions_map_all"] = reader.bool();
                        break;
                    case 63026:
                        message[".gogoproto.goproto_unrecognized_all"] = reader.bool();
                        break;
                    case 63027:
                        message[".gogoproto.gogoproto_import"] = reader.bool();
                        break;
                    case 63028:
                        message[".gogoproto.protosizer_all"] = reader.bool();
                        break;
                    case 63029:
                        message[".gogoproto.compare_all"] = reader.bool();
                        break;
                    case 63030:
                        message[".gogoproto.typedecl_all"] = reader.bool();
                        break;
                    case 63031:
                        message[".gogoproto.enumdecl_all"] = reader.bool();
                        break;
                    case 63032:
                        message[".gogoproto.goproto_registration"] = reader.bool();
                        break;
                    case 63033:
                        message[".gogoproto.messagename_all"] = reader.bool();
                        break;
                    case 63034:
                        message[".gogoproto.goproto_sizecache_all"] = reader.bool();
                        break;
                    case 63035:
                        message[".gogoproto.goproto_unkeyed_all"] = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FileOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FileOptions} FileOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FileOptions message.
             * @function verify
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FileOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.java_package != null && message.hasOwnProperty("java_package"))
                    if (!$util.isString(message.java_package))
                        return "java_package: string expected";
                if (message.java_outer_classname != null && message.hasOwnProperty("java_outer_classname"))
                    if (!$util.isString(message.java_outer_classname))
                        return "java_outer_classname: string expected";
                if (message.java_multiple_files != null && message.hasOwnProperty("java_multiple_files"))
                    if (typeof message.java_multiple_files !== "boolean")
                        return "java_multiple_files: boolean expected";
                if (message.java_generate_equals_and_hash != null && message.hasOwnProperty("java_generate_equals_and_hash"))
                    if (typeof message.java_generate_equals_and_hash !== "boolean")
                        return "java_generate_equals_and_hash: boolean expected";
                if (message.java_string_check_utf8 != null && message.hasOwnProperty("java_string_check_utf8"))
                    if (typeof message.java_string_check_utf8 !== "boolean")
                        return "java_string_check_utf8: boolean expected";
                if (message.optimize_for != null && message.hasOwnProperty("optimize_for"))
                    switch (message.optimize_for) {
                    default:
                        return "optimize_for: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                if (message.go_package != null && message.hasOwnProperty("go_package"))
                    if (!$util.isString(message.go_package))
                        return "go_package: string expected";
                if (message.cc_generic_services != null && message.hasOwnProperty("cc_generic_services"))
                    if (typeof message.cc_generic_services !== "boolean")
                        return "cc_generic_services: boolean expected";
                if (message.java_generic_services != null && message.hasOwnProperty("java_generic_services"))
                    if (typeof message.java_generic_services !== "boolean")
                        return "java_generic_services: boolean expected";
                if (message.py_generic_services != null && message.hasOwnProperty("py_generic_services"))
                    if (typeof message.py_generic_services !== "boolean")
                        return "py_generic_services: boolean expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.cc_enable_arenas != null && message.hasOwnProperty("cc_enable_arenas"))
                    if (typeof message.cc_enable_arenas !== "boolean")
                        return "cc_enable_arenas: boolean expected";
                if (message.objc_class_prefix != null && message.hasOwnProperty("objc_class_prefix"))
                    if (!$util.isString(message.objc_class_prefix))
                        return "objc_class_prefix: string expected";
                if (message.csharp_namespace != null && message.hasOwnProperty("csharp_namespace"))
                    if (!$util.isString(message.csharp_namespace))
                        return "csharp_namespace: string expected";
                if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                    if (!Array.isArray(message.uninterpreted_option))
                        return "uninterpreted_option: array expected";
                    for (let i = 0; i < message.uninterpreted_option.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                        if (error)
                            return "uninterpreted_option." + error;
                    }
                }
                if (message[".gogoproto.goproto_getters_all"] != null && message.hasOwnProperty(".gogoproto.goproto_getters_all"))
                    if (typeof message[".gogoproto.goproto_getters_all"] !== "boolean")
                        return ".gogoproto.goproto_getters_all: boolean expected";
                if (message[".gogoproto.goproto_enum_prefix_all"] != null && message.hasOwnProperty(".gogoproto.goproto_enum_prefix_all"))
                    if (typeof message[".gogoproto.goproto_enum_prefix_all"] !== "boolean")
                        return ".gogoproto.goproto_enum_prefix_all: boolean expected";
                if (message[".gogoproto.goproto_stringer_all"] != null && message.hasOwnProperty(".gogoproto.goproto_stringer_all"))
                    if (typeof message[".gogoproto.goproto_stringer_all"] !== "boolean")
                        return ".gogoproto.goproto_stringer_all: boolean expected";
                if (message[".gogoproto.verbose_equal_all"] != null && message.hasOwnProperty(".gogoproto.verbose_equal_all"))
                    if (typeof message[".gogoproto.verbose_equal_all"] !== "boolean")
                        return ".gogoproto.verbose_equal_all: boolean expected";
                if (message[".gogoproto.face_all"] != null && message.hasOwnProperty(".gogoproto.face_all"))
                    if (typeof message[".gogoproto.face_all"] !== "boolean")
                        return ".gogoproto.face_all: boolean expected";
                if (message[".gogoproto.gostring_all"] != null && message.hasOwnProperty(".gogoproto.gostring_all"))
                    if (typeof message[".gogoproto.gostring_all"] !== "boolean")
                        return ".gogoproto.gostring_all: boolean expected";
                if (message[".gogoproto.populate_all"] != null && message.hasOwnProperty(".gogoproto.populate_all"))
                    if (typeof message[".gogoproto.populate_all"] !== "boolean")
                        return ".gogoproto.populate_all: boolean expected";
                if (message[".gogoproto.stringer_all"] != null && message.hasOwnProperty(".gogoproto.stringer_all"))
                    if (typeof message[".gogoproto.stringer_all"] !== "boolean")
                        return ".gogoproto.stringer_all: boolean expected";
                if (message[".gogoproto.onlyone_all"] != null && message.hasOwnProperty(".gogoproto.onlyone_all"))
                    if (typeof message[".gogoproto.onlyone_all"] !== "boolean")
                        return ".gogoproto.onlyone_all: boolean expected";
                if (message[".gogoproto.equal_all"] != null && message.hasOwnProperty(".gogoproto.equal_all"))
                    if (typeof message[".gogoproto.equal_all"] !== "boolean")
                        return ".gogoproto.equal_all: boolean expected";
                if (message[".gogoproto.description_all"] != null && message.hasOwnProperty(".gogoproto.description_all"))
                    if (typeof message[".gogoproto.description_all"] !== "boolean")
                        return ".gogoproto.description_all: boolean expected";
                if (message[".gogoproto.testgen_all"] != null && message.hasOwnProperty(".gogoproto.testgen_all"))
                    if (typeof message[".gogoproto.testgen_all"] !== "boolean")
                        return ".gogoproto.testgen_all: boolean expected";
                if (message[".gogoproto.benchgen_all"] != null && message.hasOwnProperty(".gogoproto.benchgen_all"))
                    if (typeof message[".gogoproto.benchgen_all"] !== "boolean")
                        return ".gogoproto.benchgen_all: boolean expected";
                if (message[".gogoproto.marshaler_all"] != null && message.hasOwnProperty(".gogoproto.marshaler_all"))
                    if (typeof message[".gogoproto.marshaler_all"] !== "boolean")
                        return ".gogoproto.marshaler_all: boolean expected";
                if (message[".gogoproto.unmarshaler_all"] != null && message.hasOwnProperty(".gogoproto.unmarshaler_all"))
                    if (typeof message[".gogoproto.unmarshaler_all"] !== "boolean")
                        return ".gogoproto.unmarshaler_all: boolean expected";
                if (message[".gogoproto.stable_marshaler_all"] != null && message.hasOwnProperty(".gogoproto.stable_marshaler_all"))
                    if (typeof message[".gogoproto.stable_marshaler_all"] !== "boolean")
                        return ".gogoproto.stable_marshaler_all: boolean expected";
                if (message[".gogoproto.sizer_all"] != null && message.hasOwnProperty(".gogoproto.sizer_all"))
                    if (typeof message[".gogoproto.sizer_all"] !== "boolean")
                        return ".gogoproto.sizer_all: boolean expected";
                if (message[".gogoproto.goproto_enum_stringer_all"] != null && message.hasOwnProperty(".gogoproto.goproto_enum_stringer_all"))
                    if (typeof message[".gogoproto.goproto_enum_stringer_all"] !== "boolean")
                        return ".gogoproto.goproto_enum_stringer_all: boolean expected";
                if (message[".gogoproto.enum_stringer_all"] != null && message.hasOwnProperty(".gogoproto.enum_stringer_all"))
                    if (typeof message[".gogoproto.enum_stringer_all"] !== "boolean")
                        return ".gogoproto.enum_stringer_all: boolean expected";
                if (message[".gogoproto.unsafe_marshaler_all"] != null && message.hasOwnProperty(".gogoproto.unsafe_marshaler_all"))
                    if (typeof message[".gogoproto.unsafe_marshaler_all"] !== "boolean")
                        return ".gogoproto.unsafe_marshaler_all: boolean expected";
                if (message[".gogoproto.unsafe_unmarshaler_all"] != null && message.hasOwnProperty(".gogoproto.unsafe_unmarshaler_all"))
                    if (typeof message[".gogoproto.unsafe_unmarshaler_all"] !== "boolean")
                        return ".gogoproto.unsafe_unmarshaler_all: boolean expected";
                if (message[".gogoproto.goproto_extensions_map_all"] != null && message.hasOwnProperty(".gogoproto.goproto_extensions_map_all"))
                    if (typeof message[".gogoproto.goproto_extensions_map_all"] !== "boolean")
                        return ".gogoproto.goproto_extensions_map_all: boolean expected";
                if (message[".gogoproto.goproto_unrecognized_all"] != null && message.hasOwnProperty(".gogoproto.goproto_unrecognized_all"))
                    if (typeof message[".gogoproto.goproto_unrecognized_all"] !== "boolean")
                        return ".gogoproto.goproto_unrecognized_all: boolean expected";
                if (message[".gogoproto.gogoproto_import"] != null && message.hasOwnProperty(".gogoproto.gogoproto_import"))
                    if (typeof message[".gogoproto.gogoproto_import"] !== "boolean")
                        return ".gogoproto.gogoproto_import: boolean expected";
                if (message[".gogoproto.protosizer_all"] != null && message.hasOwnProperty(".gogoproto.protosizer_all"))
                    if (typeof message[".gogoproto.protosizer_all"] !== "boolean")
                        return ".gogoproto.protosizer_all: boolean expected";
                if (message[".gogoproto.compare_all"] != null && message.hasOwnProperty(".gogoproto.compare_all"))
                    if (typeof message[".gogoproto.compare_all"] !== "boolean")
                        return ".gogoproto.compare_all: boolean expected";
                if (message[".gogoproto.typedecl_all"] != null && message.hasOwnProperty(".gogoproto.typedecl_all"))
                    if (typeof message[".gogoproto.typedecl_all"] !== "boolean")
                        return ".gogoproto.typedecl_all: boolean expected";
                if (message[".gogoproto.enumdecl_all"] != null && message.hasOwnProperty(".gogoproto.enumdecl_all"))
                    if (typeof message[".gogoproto.enumdecl_all"] !== "boolean")
                        return ".gogoproto.enumdecl_all: boolean expected";
                if (message[".gogoproto.goproto_registration"] != null && message.hasOwnProperty(".gogoproto.goproto_registration"))
                    if (typeof message[".gogoproto.goproto_registration"] !== "boolean")
                        return ".gogoproto.goproto_registration: boolean expected";
                if (message[".gogoproto.messagename_all"] != null && message.hasOwnProperty(".gogoproto.messagename_all"))
                    if (typeof message[".gogoproto.messagename_all"] !== "boolean")
                        return ".gogoproto.messagename_all: boolean expected";
                if (message[".gogoproto.goproto_sizecache_all"] != null && message.hasOwnProperty(".gogoproto.goproto_sizecache_all"))
                    if (typeof message[".gogoproto.goproto_sizecache_all"] !== "boolean")
                        return ".gogoproto.goproto_sizecache_all: boolean expected";
                if (message[".gogoproto.goproto_unkeyed_all"] != null && message.hasOwnProperty(".gogoproto.goproto_unkeyed_all"))
                    if (typeof message[".gogoproto.goproto_unkeyed_all"] !== "boolean")
                        return ".gogoproto.goproto_unkeyed_all: boolean expected";
                return null;
            };

            /**
             * Creates a FileOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FileOptions} FileOptions
             */
            FileOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FileOptions)
                    return object;
                let message = new $root.google.protobuf.FileOptions();
                if (object.java_package != null)
                    message.java_package = String(object.java_package);
                if (object.java_outer_classname != null)
                    message.java_outer_classname = String(object.java_outer_classname);
                if (object.java_multiple_files != null)
                    message.java_multiple_files = Boolean(object.java_multiple_files);
                if (object.java_generate_equals_and_hash != null)
                    message.java_generate_equals_and_hash = Boolean(object.java_generate_equals_and_hash);
                if (object.java_string_check_utf8 != null)
                    message.java_string_check_utf8 = Boolean(object.java_string_check_utf8);
                switch (object.optimize_for) {
                case "SPEED":
                case 1:
                    message.optimize_for = 1;
                    break;
                case "CODE_SIZE":
                case 2:
                    message.optimize_for = 2;
                    break;
                case "LITE_RUNTIME":
                case 3:
                    message.optimize_for = 3;
                    break;
                }
                if (object.go_package != null)
                    message.go_package = String(object.go_package);
                if (object.cc_generic_services != null)
                    message.cc_generic_services = Boolean(object.cc_generic_services);
                if (object.java_generic_services != null)
                    message.java_generic_services = Boolean(object.java_generic_services);
                if (object.py_generic_services != null)
                    message.py_generic_services = Boolean(object.py_generic_services);
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.cc_enable_arenas != null)
                    message.cc_enable_arenas = Boolean(object.cc_enable_arenas);
                if (object.objc_class_prefix != null)
                    message.objc_class_prefix = String(object.objc_class_prefix);
                if (object.csharp_namespace != null)
                    message.csharp_namespace = String(object.csharp_namespace);
                if (object.uninterpreted_option) {
                    if (!Array.isArray(object.uninterpreted_option))
                        throw TypeError(".google.protobuf.FileOptions.uninterpreted_option: array expected");
                    message.uninterpreted_option = [];
                    for (let i = 0; i < object.uninterpreted_option.length; ++i) {
                        if (typeof object.uninterpreted_option[i] !== "object")
                            throw TypeError(".google.protobuf.FileOptions.uninterpreted_option: object expected");
                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                    }
                }
                if (object[".gogoproto.goproto_getters_all"] != null)
                    message[".gogoproto.goproto_getters_all"] = Boolean(object[".gogoproto.goproto_getters_all"]);
                if (object[".gogoproto.goproto_enum_prefix_all"] != null)
                    message[".gogoproto.goproto_enum_prefix_all"] = Boolean(object[".gogoproto.goproto_enum_prefix_all"]);
                if (object[".gogoproto.goproto_stringer_all"] != null)
                    message[".gogoproto.goproto_stringer_all"] = Boolean(object[".gogoproto.goproto_stringer_all"]);
                if (object[".gogoproto.verbose_equal_all"] != null)
                    message[".gogoproto.verbose_equal_all"] = Boolean(object[".gogoproto.verbose_equal_all"]);
                if (object[".gogoproto.face_all"] != null)
                    message[".gogoproto.face_all"] = Boolean(object[".gogoproto.face_all"]);
                if (object[".gogoproto.gostring_all"] != null)
                    message[".gogoproto.gostring_all"] = Boolean(object[".gogoproto.gostring_all"]);
                if (object[".gogoproto.populate_all"] != null)
                    message[".gogoproto.populate_all"] = Boolean(object[".gogoproto.populate_all"]);
                if (object[".gogoproto.stringer_all"] != null)
                    message[".gogoproto.stringer_all"] = Boolean(object[".gogoproto.stringer_all"]);
                if (object[".gogoproto.onlyone_all"] != null)
                    message[".gogoproto.onlyone_all"] = Boolean(object[".gogoproto.onlyone_all"]);
                if (object[".gogoproto.equal_all"] != null)
                    message[".gogoproto.equal_all"] = Boolean(object[".gogoproto.equal_all"]);
                if (object[".gogoproto.description_all"] != null)
                    message[".gogoproto.description_all"] = Boolean(object[".gogoproto.description_all"]);
                if (object[".gogoproto.testgen_all"] != null)
                    message[".gogoproto.testgen_all"] = Boolean(object[".gogoproto.testgen_all"]);
                if (object[".gogoproto.benchgen_all"] != null)
                    message[".gogoproto.benchgen_all"] = Boolean(object[".gogoproto.benchgen_all"]);
                if (object[".gogoproto.marshaler_all"] != null)
                    message[".gogoproto.marshaler_all"] = Boolean(object[".gogoproto.marshaler_all"]);
                if (object[".gogoproto.unmarshaler_all"] != null)
                    message[".gogoproto.unmarshaler_all"] = Boolean(object[".gogoproto.unmarshaler_all"]);
                if (object[".gogoproto.stable_marshaler_all"] != null)
                    message[".gogoproto.stable_marshaler_all"] = Boolean(object[".gogoproto.stable_marshaler_all"]);
                if (object[".gogoproto.sizer_all"] != null)
                    message[".gogoproto.sizer_all"] = Boolean(object[".gogoproto.sizer_all"]);
                if (object[".gogoproto.goproto_enum_stringer_all"] != null)
                    message[".gogoproto.goproto_enum_stringer_all"] = Boolean(object[".gogoproto.goproto_enum_stringer_all"]);
                if (object[".gogoproto.enum_stringer_all"] != null)
                    message[".gogoproto.enum_stringer_all"] = Boolean(object[".gogoproto.enum_stringer_all"]);
                if (object[".gogoproto.unsafe_marshaler_all"] != null)
                    message[".gogoproto.unsafe_marshaler_all"] = Boolean(object[".gogoproto.unsafe_marshaler_all"]);
                if (object[".gogoproto.unsafe_unmarshaler_all"] != null)
                    message[".gogoproto.unsafe_unmarshaler_all"] = Boolean(object[".gogoproto.unsafe_unmarshaler_all"]);
                if (object[".gogoproto.goproto_extensions_map_all"] != null)
                    message[".gogoproto.goproto_extensions_map_all"] = Boolean(object[".gogoproto.goproto_extensions_map_all"]);
                if (object[".gogoproto.goproto_unrecognized_all"] != null)
                    message[".gogoproto.goproto_unrecognized_all"] = Boolean(object[".gogoproto.goproto_unrecognized_all"]);
                if (object[".gogoproto.gogoproto_import"] != null)
                    message[".gogoproto.gogoproto_import"] = Boolean(object[".gogoproto.gogoproto_import"]);
                if (object[".gogoproto.protosizer_all"] != null)
                    message[".gogoproto.protosizer_all"] = Boolean(object[".gogoproto.protosizer_all"]);
                if (object[".gogoproto.compare_all"] != null)
                    message[".gogoproto.compare_all"] = Boolean(object[".gogoproto.compare_all"]);
                if (object[".gogoproto.typedecl_all"] != null)
                    message[".gogoproto.typedecl_all"] = Boolean(object[".gogoproto.typedecl_all"]);
                if (object[".gogoproto.enumdecl_all"] != null)
                    message[".gogoproto.enumdecl_all"] = Boolean(object[".gogoproto.enumdecl_all"]);
                if (object[".gogoproto.goproto_registration"] != null)
                    message[".gogoproto.goproto_registration"] = Boolean(object[".gogoproto.goproto_registration"]);
                if (object[".gogoproto.messagename_all"] != null)
                    message[".gogoproto.messagename_all"] = Boolean(object[".gogoproto.messagename_all"]);
                if (object[".gogoproto.goproto_sizecache_all"] != null)
                    message[".gogoproto.goproto_sizecache_all"] = Boolean(object[".gogoproto.goproto_sizecache_all"]);
                if (object[".gogoproto.goproto_unkeyed_all"] != null)
                    message[".gogoproto.goproto_unkeyed_all"] = Boolean(object[".gogoproto.goproto_unkeyed_all"]);
                return message;
            };

            /**
             * Creates a plain object from a FileOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {google.protobuf.FileOptions} message FileOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FileOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpreted_option = [];
                if (options.defaults) {
                    object.java_package = "";
                    object.java_outer_classname = "";
                    object.optimize_for = options.enums === String ? "SPEED" : 1;
                    object.java_multiple_files = false;
                    object.go_package = "";
                    object.cc_generic_services = false;
                    object.java_generic_services = false;
                    object.py_generic_services = false;
                    object.java_generate_equals_and_hash = false;
                    object.deprecated = false;
                    object.java_string_check_utf8 = false;
                    object.cc_enable_arenas = false;
                    object.objc_class_prefix = "";
                    object.csharp_namespace = "";
                    object[".gogoproto.goproto_getters_all"] = false;
                    object[".gogoproto.goproto_enum_prefix_all"] = false;
                    object[".gogoproto.goproto_stringer_all"] = false;
                    object[".gogoproto.verbose_equal_all"] = false;
                    object[".gogoproto.face_all"] = false;
                    object[".gogoproto.gostring_all"] = false;
                    object[".gogoproto.populate_all"] = false;
                    object[".gogoproto.stringer_all"] = false;
                    object[".gogoproto.onlyone_all"] = false;
                    object[".gogoproto.equal_all"] = false;
                    object[".gogoproto.description_all"] = false;
                    object[".gogoproto.testgen_all"] = false;
                    object[".gogoproto.benchgen_all"] = false;
                    object[".gogoproto.marshaler_all"] = false;
                    object[".gogoproto.unmarshaler_all"] = false;
                    object[".gogoproto.stable_marshaler_all"] = false;
                    object[".gogoproto.sizer_all"] = false;
                    object[".gogoproto.goproto_enum_stringer_all"] = false;
                    object[".gogoproto.enum_stringer_all"] = false;
                    object[".gogoproto.unsafe_marshaler_all"] = false;
                    object[".gogoproto.unsafe_unmarshaler_all"] = false;
                    object[".gogoproto.goproto_extensions_map_all"] = false;
                    object[".gogoproto.goproto_unrecognized_all"] = false;
                    object[".gogoproto.gogoproto_import"] = false;
                    object[".gogoproto.protosizer_all"] = false;
                    object[".gogoproto.compare_all"] = false;
                    object[".gogoproto.typedecl_all"] = false;
                    object[".gogoproto.enumdecl_all"] = false;
                    object[".gogoproto.goproto_registration"] = false;
                    object[".gogoproto.messagename_all"] = false;
                    object[".gogoproto.goproto_sizecache_all"] = false;
                    object[".gogoproto.goproto_unkeyed_all"] = false;
                }
                if (message.java_package != null && message.hasOwnProperty("java_package"))
                    object.java_package = message.java_package;
                if (message.java_outer_classname != null && message.hasOwnProperty("java_outer_classname"))
                    object.java_outer_classname = message.java_outer_classname;
                if (message.optimize_for != null && message.hasOwnProperty("optimize_for"))
                    object.optimize_for = options.enums === String ? $root.google.protobuf.FileOptions.OptimizeMode[message.optimize_for] : message.optimize_for;
                if (message.java_multiple_files != null && message.hasOwnProperty("java_multiple_files"))
                    object.java_multiple_files = message.java_multiple_files;
                if (message.go_package != null && message.hasOwnProperty("go_package"))
                    object.go_package = message.go_package;
                if (message.cc_generic_services != null && message.hasOwnProperty("cc_generic_services"))
                    object.cc_generic_services = message.cc_generic_services;
                if (message.java_generic_services != null && message.hasOwnProperty("java_generic_services"))
                    object.java_generic_services = message.java_generic_services;
                if (message.py_generic_services != null && message.hasOwnProperty("py_generic_services"))
                    object.py_generic_services = message.py_generic_services;
                if (message.java_generate_equals_and_hash != null && message.hasOwnProperty("java_generate_equals_and_hash"))
                    object.java_generate_equals_and_hash = message.java_generate_equals_and_hash;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.java_string_check_utf8 != null && message.hasOwnProperty("java_string_check_utf8"))
                    object.java_string_check_utf8 = message.java_string_check_utf8;
                if (message.cc_enable_arenas != null && message.hasOwnProperty("cc_enable_arenas"))
                    object.cc_enable_arenas = message.cc_enable_arenas;
                if (message.objc_class_prefix != null && message.hasOwnProperty("objc_class_prefix"))
                    object.objc_class_prefix = message.objc_class_prefix;
                if (message.csharp_namespace != null && message.hasOwnProperty("csharp_namespace"))
                    object.csharp_namespace = message.csharp_namespace;
                if (message.uninterpreted_option && message.uninterpreted_option.length) {
                    object.uninterpreted_option = [];
                    for (let j = 0; j < message.uninterpreted_option.length; ++j)
                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                }
                if (message[".gogoproto.goproto_getters_all"] != null && message.hasOwnProperty(".gogoproto.goproto_getters_all"))
                    object[".gogoproto.goproto_getters_all"] = message[".gogoproto.goproto_getters_all"];
                if (message[".gogoproto.goproto_enum_prefix_all"] != null && message.hasOwnProperty(".gogoproto.goproto_enum_prefix_all"))
                    object[".gogoproto.goproto_enum_prefix_all"] = message[".gogoproto.goproto_enum_prefix_all"];
                if (message[".gogoproto.goproto_stringer_all"] != null && message.hasOwnProperty(".gogoproto.goproto_stringer_all"))
                    object[".gogoproto.goproto_stringer_all"] = message[".gogoproto.goproto_stringer_all"];
                if (message[".gogoproto.verbose_equal_all"] != null && message.hasOwnProperty(".gogoproto.verbose_equal_all"))
                    object[".gogoproto.verbose_equal_all"] = message[".gogoproto.verbose_equal_all"];
                if (message[".gogoproto.face_all"] != null && message.hasOwnProperty(".gogoproto.face_all"))
                    object[".gogoproto.face_all"] = message[".gogoproto.face_all"];
                if (message[".gogoproto.gostring_all"] != null && message.hasOwnProperty(".gogoproto.gostring_all"))
                    object[".gogoproto.gostring_all"] = message[".gogoproto.gostring_all"];
                if (message[".gogoproto.populate_all"] != null && message.hasOwnProperty(".gogoproto.populate_all"))
                    object[".gogoproto.populate_all"] = message[".gogoproto.populate_all"];
                if (message[".gogoproto.stringer_all"] != null && message.hasOwnProperty(".gogoproto.stringer_all"))
                    object[".gogoproto.stringer_all"] = message[".gogoproto.stringer_all"];
                if (message[".gogoproto.onlyone_all"] != null && message.hasOwnProperty(".gogoproto.onlyone_all"))
                    object[".gogoproto.onlyone_all"] = message[".gogoproto.onlyone_all"];
                if (message[".gogoproto.equal_all"] != null && message.hasOwnProperty(".gogoproto.equal_all"))
                    object[".gogoproto.equal_all"] = message[".gogoproto.equal_all"];
                if (message[".gogoproto.description_all"] != null && message.hasOwnProperty(".gogoproto.description_all"))
                    object[".gogoproto.description_all"] = message[".gogoproto.description_all"];
                if (message[".gogoproto.testgen_all"] != null && message.hasOwnProperty(".gogoproto.testgen_all"))
                    object[".gogoproto.testgen_all"] = message[".gogoproto.testgen_all"];
                if (message[".gogoproto.benchgen_all"] != null && message.hasOwnProperty(".gogoproto.benchgen_all"))
                    object[".gogoproto.benchgen_all"] = message[".gogoproto.benchgen_all"];
                if (message[".gogoproto.marshaler_all"] != null && message.hasOwnProperty(".gogoproto.marshaler_all"))
                    object[".gogoproto.marshaler_all"] = message[".gogoproto.marshaler_all"];
                if (message[".gogoproto.unmarshaler_all"] != null && message.hasOwnProperty(".gogoproto.unmarshaler_all"))
                    object[".gogoproto.unmarshaler_all"] = message[".gogoproto.unmarshaler_all"];
                if (message[".gogoproto.stable_marshaler_all"] != null && message.hasOwnProperty(".gogoproto.stable_marshaler_all"))
                    object[".gogoproto.stable_marshaler_all"] = message[".gogoproto.stable_marshaler_all"];
                if (message[".gogoproto.sizer_all"] != null && message.hasOwnProperty(".gogoproto.sizer_all"))
                    object[".gogoproto.sizer_all"] = message[".gogoproto.sizer_all"];
                if (message[".gogoproto.goproto_enum_stringer_all"] != null && message.hasOwnProperty(".gogoproto.goproto_enum_stringer_all"))
                    object[".gogoproto.goproto_enum_stringer_all"] = message[".gogoproto.goproto_enum_stringer_all"];
                if (message[".gogoproto.enum_stringer_all"] != null && message.hasOwnProperty(".gogoproto.enum_stringer_all"))
                    object[".gogoproto.enum_stringer_all"] = message[".gogoproto.enum_stringer_all"];
                if (message[".gogoproto.unsafe_marshaler_all"] != null && message.hasOwnProperty(".gogoproto.unsafe_marshaler_all"))
                    object[".gogoproto.unsafe_marshaler_all"] = message[".gogoproto.unsafe_marshaler_all"];
                if (message[".gogoproto.unsafe_unmarshaler_all"] != null && message.hasOwnProperty(".gogoproto.unsafe_unmarshaler_all"))
                    object[".gogoproto.unsafe_unmarshaler_all"] = message[".gogoproto.unsafe_unmarshaler_all"];
                if (message[".gogoproto.goproto_extensions_map_all"] != null && message.hasOwnProperty(".gogoproto.goproto_extensions_map_all"))
                    object[".gogoproto.goproto_extensions_map_all"] = message[".gogoproto.goproto_extensions_map_all"];
                if (message[".gogoproto.goproto_unrecognized_all"] != null && message.hasOwnProperty(".gogoproto.goproto_unrecognized_all"))
                    object[".gogoproto.goproto_unrecognized_all"] = message[".gogoproto.goproto_unrecognized_all"];
                if (message[".gogoproto.gogoproto_import"] != null && message.hasOwnProperty(".gogoproto.gogoproto_import"))
                    object[".gogoproto.gogoproto_import"] = message[".gogoproto.gogoproto_import"];
                if (message[".gogoproto.protosizer_all"] != null && message.hasOwnProperty(".gogoproto.protosizer_all"))
                    object[".gogoproto.protosizer_all"] = message[".gogoproto.protosizer_all"];
                if (message[".gogoproto.compare_all"] != null && message.hasOwnProperty(".gogoproto.compare_all"))
                    object[".gogoproto.compare_all"] = message[".gogoproto.compare_all"];
                if (message[".gogoproto.typedecl_all"] != null && message.hasOwnProperty(".gogoproto.typedecl_all"))
                    object[".gogoproto.typedecl_all"] = message[".gogoproto.typedecl_all"];
                if (message[".gogoproto.enumdecl_all"] != null && message.hasOwnProperty(".gogoproto.enumdecl_all"))
                    object[".gogoproto.enumdecl_all"] = message[".gogoproto.enumdecl_all"];
                if (message[".gogoproto.goproto_registration"] != null && message.hasOwnProperty(".gogoproto.goproto_registration"))
                    object[".gogoproto.goproto_registration"] = message[".gogoproto.goproto_registration"];
                if (message[".gogoproto.messagename_all"] != null && message.hasOwnProperty(".gogoproto.messagename_all"))
                    object[".gogoproto.messagename_all"] = message[".gogoproto.messagename_all"];
                if (message[".gogoproto.goproto_sizecache_all"] != null && message.hasOwnProperty(".gogoproto.goproto_sizecache_all"))
                    object[".gogoproto.goproto_sizecache_all"] = message[".gogoproto.goproto_sizecache_all"];
                if (message[".gogoproto.goproto_unkeyed_all"] != null && message.hasOwnProperty(".gogoproto.goproto_unkeyed_all"))
                    object[".gogoproto.goproto_unkeyed_all"] = message[".gogoproto.goproto_unkeyed_all"];
                return object;
            };

            /**
             * Converts this FileOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.FileOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FileOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * OptimizeMode enum.
             * @name google.protobuf.FileOptions.OptimizeMode
             * @enum {number}
             * @property {number} SPEED=1 SPEED value
             * @property {number} CODE_SIZE=2 CODE_SIZE value
             * @property {number} LITE_RUNTIME=3 LITE_RUNTIME value
             */
            FileOptions.OptimizeMode = (function() {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "SPEED"] = 1;
                values[valuesById[2] = "CODE_SIZE"] = 2;
                values[valuesById[3] = "LITE_RUNTIME"] = 3;
                return values;
            })();

            return FileOptions;
        })();

        protobuf.MessageOptions = (function() {

            /**
             * Properties of a MessageOptions.
             * @memberof google.protobuf
             * @interface IMessageOptions
             * @property {boolean|null} [message_set_wire_format] MessageOptions message_set_wire_format
             * @property {boolean|null} [no_standard_descriptor_accessor] MessageOptions no_standard_descriptor_accessor
             * @property {boolean|null} [deprecated] MessageOptions deprecated
             * @property {boolean|null} [map_entry] MessageOptions map_entry
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] MessageOptions uninterpreted_option
             * @property {boolean|null} [".gogoproto.goproto_getters"] MessageOptions .gogoproto.goproto_getters
             * @property {boolean|null} [".gogoproto.goproto_stringer"] MessageOptions .gogoproto.goproto_stringer
             * @property {boolean|null} [".gogoproto.verbose_equal"] MessageOptions .gogoproto.verbose_equal
             * @property {boolean|null} [".gogoproto.face"] MessageOptions .gogoproto.face
             * @property {boolean|null} [".gogoproto.gostring"] MessageOptions .gogoproto.gostring
             * @property {boolean|null} [".gogoproto.populate"] MessageOptions .gogoproto.populate
             * @property {boolean|null} [".gogoproto.stringer"] MessageOptions .gogoproto.stringer
             * @property {boolean|null} [".gogoproto.onlyone"] MessageOptions .gogoproto.onlyone
             * @property {boolean|null} [".gogoproto.equal"] MessageOptions .gogoproto.equal
             * @property {boolean|null} [".gogoproto.description"] MessageOptions .gogoproto.description
             * @property {boolean|null} [".gogoproto.testgen"] MessageOptions .gogoproto.testgen
             * @property {boolean|null} [".gogoproto.benchgen"] MessageOptions .gogoproto.benchgen
             * @property {boolean|null} [".gogoproto.marshaler"] MessageOptions .gogoproto.marshaler
             * @property {boolean|null} [".gogoproto.unmarshaler"] MessageOptions .gogoproto.unmarshaler
             * @property {boolean|null} [".gogoproto.stable_marshaler"] MessageOptions .gogoproto.stable_marshaler
             * @property {boolean|null} [".gogoproto.sizer"] MessageOptions .gogoproto.sizer
             * @property {boolean|null} [".gogoproto.unsafe_marshaler"] MessageOptions .gogoproto.unsafe_marshaler
             * @property {boolean|null} [".gogoproto.unsafe_unmarshaler"] MessageOptions .gogoproto.unsafe_unmarshaler
             * @property {boolean|null} [".gogoproto.goproto_extensions_map"] MessageOptions .gogoproto.goproto_extensions_map
             * @property {boolean|null} [".gogoproto.goproto_unrecognized"] MessageOptions .gogoproto.goproto_unrecognized
             * @property {boolean|null} [".gogoproto.protosizer"] MessageOptions .gogoproto.protosizer
             * @property {boolean|null} [".gogoproto.compare"] MessageOptions .gogoproto.compare
             * @property {boolean|null} [".gogoproto.typedecl"] MessageOptions .gogoproto.typedecl
             * @property {boolean|null} [".gogoproto.messagename"] MessageOptions .gogoproto.messagename
             * @property {boolean|null} [".gogoproto.goproto_sizecache"] MessageOptions .gogoproto.goproto_sizecache
             * @property {boolean|null} [".gogoproto.goproto_unkeyed"] MessageOptions .gogoproto.goproto_unkeyed
             */

            /**
             * Constructs a new MessageOptions.
             * @memberof google.protobuf
             * @classdesc Represents a MessageOptions.
             * @implements IMessageOptions
             * @constructor
             * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
             */
            function MessageOptions(properties) {
                this.uninterpreted_option = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MessageOptions message_set_wire_format.
             * @member {boolean} message_set_wire_format
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.message_set_wire_format = false;

            /**
             * MessageOptions no_standard_descriptor_accessor.
             * @member {boolean} no_standard_descriptor_accessor
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.no_standard_descriptor_accessor = false;

            /**
             * MessageOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.deprecated = false;

            /**
             * MessageOptions map_entry.
             * @member {boolean} map_entry
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.map_entry = false;

            /**
             * MessageOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * MessageOptions .gogoproto.goproto_getters.
             * @member {boolean} .gogoproto.goproto_getters
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.goproto_getters"] = false;

            /**
             * MessageOptions .gogoproto.goproto_stringer.
             * @member {boolean} .gogoproto.goproto_stringer
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.goproto_stringer"] = false;

            /**
             * MessageOptions .gogoproto.verbose_equal.
             * @member {boolean} .gogoproto.verbose_equal
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.verbose_equal"] = false;

            /**
             * MessageOptions .gogoproto.face.
             * @member {boolean} .gogoproto.face
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.face"] = false;

            /**
             * MessageOptions .gogoproto.gostring.
             * @member {boolean} .gogoproto.gostring
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.gostring"] = false;

            /**
             * MessageOptions .gogoproto.populate.
             * @member {boolean} .gogoproto.populate
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.populate"] = false;

            /**
             * MessageOptions .gogoproto.stringer.
             * @member {boolean} .gogoproto.stringer
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.stringer"] = false;

            /**
             * MessageOptions .gogoproto.onlyone.
             * @member {boolean} .gogoproto.onlyone
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.onlyone"] = false;

            /**
             * MessageOptions .gogoproto.equal.
             * @member {boolean} .gogoproto.equal
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.equal"] = false;

            /**
             * MessageOptions .gogoproto.description.
             * @member {boolean} .gogoproto.description
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.description"] = false;

            /**
             * MessageOptions .gogoproto.testgen.
             * @member {boolean} .gogoproto.testgen
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.testgen"] = false;

            /**
             * MessageOptions .gogoproto.benchgen.
             * @member {boolean} .gogoproto.benchgen
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.benchgen"] = false;

            /**
             * MessageOptions .gogoproto.marshaler.
             * @member {boolean} .gogoproto.marshaler
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.marshaler"] = false;

            /**
             * MessageOptions .gogoproto.unmarshaler.
             * @member {boolean} .gogoproto.unmarshaler
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.unmarshaler"] = false;

            /**
             * MessageOptions .gogoproto.stable_marshaler.
             * @member {boolean} .gogoproto.stable_marshaler
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.stable_marshaler"] = false;

            /**
             * MessageOptions .gogoproto.sizer.
             * @member {boolean} .gogoproto.sizer
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.sizer"] = false;

            /**
             * MessageOptions .gogoproto.unsafe_marshaler.
             * @member {boolean} .gogoproto.unsafe_marshaler
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.unsafe_marshaler"] = false;

            /**
             * MessageOptions .gogoproto.unsafe_unmarshaler.
             * @member {boolean} .gogoproto.unsafe_unmarshaler
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.unsafe_unmarshaler"] = false;

            /**
             * MessageOptions .gogoproto.goproto_extensions_map.
             * @member {boolean} .gogoproto.goproto_extensions_map
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.goproto_extensions_map"] = false;

            /**
             * MessageOptions .gogoproto.goproto_unrecognized.
             * @member {boolean} .gogoproto.goproto_unrecognized
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.goproto_unrecognized"] = false;

            /**
             * MessageOptions .gogoproto.protosizer.
             * @member {boolean} .gogoproto.protosizer
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.protosizer"] = false;

            /**
             * MessageOptions .gogoproto.compare.
             * @member {boolean} .gogoproto.compare
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.compare"] = false;

            /**
             * MessageOptions .gogoproto.typedecl.
             * @member {boolean} .gogoproto.typedecl
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.typedecl"] = false;

            /**
             * MessageOptions .gogoproto.messagename.
             * @member {boolean} .gogoproto.messagename
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.messagename"] = false;

            /**
             * MessageOptions .gogoproto.goproto_sizecache.
             * @member {boolean} .gogoproto.goproto_sizecache
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.goproto_sizecache"] = false;

            /**
             * MessageOptions .gogoproto.goproto_unkeyed.
             * @member {boolean} .gogoproto.goproto_unkeyed
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.goproto_unkeyed"] = false;

            /**
             * Encodes the specified MessageOptions message. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MessageOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.message_set_wire_format != null && Object.hasOwnProperty.call(message, "message_set_wire_format"))
                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message.message_set_wire_format);
                if (message.no_standard_descriptor_accessor != null && Object.hasOwnProperty.call(message, "no_standard_descriptor_accessor"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.no_standard_descriptor_accessor);
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                if (message.map_entry != null && Object.hasOwnProperty.call(message, "map_entry"))
                    writer.uint32(/* id 7, wireType 0 =*/56).bool(message.map_entry);
                if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                    for (let i = 0; i < message.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                if (message[".gogoproto.goproto_getters"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_getters"))
                    writer.uint32(/* id 64001, wireType 0 =*/512008).bool(message[".gogoproto.goproto_getters"]);
                if (message[".gogoproto.goproto_stringer"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_stringer"))
                    writer.uint32(/* id 64003, wireType 0 =*/512024).bool(message[".gogoproto.goproto_stringer"]);
                if (message[".gogoproto.verbose_equal"] != null && Object.hasOwnProperty.call(message, ".gogoproto.verbose_equal"))
                    writer.uint32(/* id 64004, wireType 0 =*/512032).bool(message[".gogoproto.verbose_equal"]);
                if (message[".gogoproto.face"] != null && Object.hasOwnProperty.call(message, ".gogoproto.face"))
                    writer.uint32(/* id 64005, wireType 0 =*/512040).bool(message[".gogoproto.face"]);
                if (message[".gogoproto.gostring"] != null && Object.hasOwnProperty.call(message, ".gogoproto.gostring"))
                    writer.uint32(/* id 64006, wireType 0 =*/512048).bool(message[".gogoproto.gostring"]);
                if (message[".gogoproto.populate"] != null && Object.hasOwnProperty.call(message, ".gogoproto.populate"))
                    writer.uint32(/* id 64007, wireType 0 =*/512056).bool(message[".gogoproto.populate"]);
                if (message[".gogoproto.onlyone"] != null && Object.hasOwnProperty.call(message, ".gogoproto.onlyone"))
                    writer.uint32(/* id 64009, wireType 0 =*/512072).bool(message[".gogoproto.onlyone"]);
                if (message[".gogoproto.equal"] != null && Object.hasOwnProperty.call(message, ".gogoproto.equal"))
                    writer.uint32(/* id 64013, wireType 0 =*/512104).bool(message[".gogoproto.equal"]);
                if (message[".gogoproto.description"] != null && Object.hasOwnProperty.call(message, ".gogoproto.description"))
                    writer.uint32(/* id 64014, wireType 0 =*/512112).bool(message[".gogoproto.description"]);
                if (message[".gogoproto.testgen"] != null && Object.hasOwnProperty.call(message, ".gogoproto.testgen"))
                    writer.uint32(/* id 64015, wireType 0 =*/512120).bool(message[".gogoproto.testgen"]);
                if (message[".gogoproto.benchgen"] != null && Object.hasOwnProperty.call(message, ".gogoproto.benchgen"))
                    writer.uint32(/* id 64016, wireType 0 =*/512128).bool(message[".gogoproto.benchgen"]);
                if (message[".gogoproto.marshaler"] != null && Object.hasOwnProperty.call(message, ".gogoproto.marshaler"))
                    writer.uint32(/* id 64017, wireType 0 =*/512136).bool(message[".gogoproto.marshaler"]);
                if (message[".gogoproto.unmarshaler"] != null && Object.hasOwnProperty.call(message, ".gogoproto.unmarshaler"))
                    writer.uint32(/* id 64018, wireType 0 =*/512144).bool(message[".gogoproto.unmarshaler"]);
                if (message[".gogoproto.stable_marshaler"] != null && Object.hasOwnProperty.call(message, ".gogoproto.stable_marshaler"))
                    writer.uint32(/* id 64019, wireType 0 =*/512152).bool(message[".gogoproto.stable_marshaler"]);
                if (message[".gogoproto.sizer"] != null && Object.hasOwnProperty.call(message, ".gogoproto.sizer"))
                    writer.uint32(/* id 64020, wireType 0 =*/512160).bool(message[".gogoproto.sizer"]);
                if (message[".gogoproto.unsafe_marshaler"] != null && Object.hasOwnProperty.call(message, ".gogoproto.unsafe_marshaler"))
                    writer.uint32(/* id 64023, wireType 0 =*/512184).bool(message[".gogoproto.unsafe_marshaler"]);
                if (message[".gogoproto.unsafe_unmarshaler"] != null && Object.hasOwnProperty.call(message, ".gogoproto.unsafe_unmarshaler"))
                    writer.uint32(/* id 64024, wireType 0 =*/512192).bool(message[".gogoproto.unsafe_unmarshaler"]);
                if (message[".gogoproto.goproto_extensions_map"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_extensions_map"))
                    writer.uint32(/* id 64025, wireType 0 =*/512200).bool(message[".gogoproto.goproto_extensions_map"]);
                if (message[".gogoproto.goproto_unrecognized"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_unrecognized"))
                    writer.uint32(/* id 64026, wireType 0 =*/512208).bool(message[".gogoproto.goproto_unrecognized"]);
                if (message[".gogoproto.protosizer"] != null && Object.hasOwnProperty.call(message, ".gogoproto.protosizer"))
                    writer.uint32(/* id 64028, wireType 0 =*/512224).bool(message[".gogoproto.protosizer"]);
                if (message[".gogoproto.compare"] != null && Object.hasOwnProperty.call(message, ".gogoproto.compare"))
                    writer.uint32(/* id 64029, wireType 0 =*/512232).bool(message[".gogoproto.compare"]);
                if (message[".gogoproto.typedecl"] != null && Object.hasOwnProperty.call(message, ".gogoproto.typedecl"))
                    writer.uint32(/* id 64030, wireType 0 =*/512240).bool(message[".gogoproto.typedecl"]);
                if (message[".gogoproto.messagename"] != null && Object.hasOwnProperty.call(message, ".gogoproto.messagename"))
                    writer.uint32(/* id 64033, wireType 0 =*/512264).bool(message[".gogoproto.messagename"]);
                if (message[".gogoproto.goproto_sizecache"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_sizecache"))
                    writer.uint32(/* id 64034, wireType 0 =*/512272).bool(message[".gogoproto.goproto_sizecache"]);
                if (message[".gogoproto.goproto_unkeyed"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_unkeyed"))
                    writer.uint32(/* id 64035, wireType 0 =*/512280).bool(message[".gogoproto.goproto_unkeyed"]);
                if (message[".gogoproto.stringer"] != null && Object.hasOwnProperty.call(message, ".gogoproto.stringer"))
                    writer.uint32(/* id 67008, wireType 0 =*/536064).bool(message[".gogoproto.stringer"]);
                return writer;
            };

            /**
             * Encodes the specified MessageOptions message, length delimited. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MessageOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MessageOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.MessageOptions} MessageOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MessageOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MessageOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.message_set_wire_format = reader.bool();
                        break;
                    case 2:
                        message.no_standard_descriptor_accessor = reader.bool();
                        break;
                    case 3:
                        message.deprecated = reader.bool();
                        break;
                    case 7:
                        message.map_entry = reader.bool();
                        break;
                    case 999:
                        if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                            message.uninterpreted_option = [];
                        message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    case 64001:
                        message[".gogoproto.goproto_getters"] = reader.bool();
                        break;
                    case 64003:
                        message[".gogoproto.goproto_stringer"] = reader.bool();
                        break;
                    case 64004:
                        message[".gogoproto.verbose_equal"] = reader.bool();
                        break;
                    case 64005:
                        message[".gogoproto.face"] = reader.bool();
                        break;
                    case 64006:
                        message[".gogoproto.gostring"] = reader.bool();
                        break;
                    case 64007:
                        message[".gogoproto.populate"] = reader.bool();
                        break;
                    case 67008:
                        message[".gogoproto.stringer"] = reader.bool();
                        break;
                    case 64009:
                        message[".gogoproto.onlyone"] = reader.bool();
                        break;
                    case 64013:
                        message[".gogoproto.equal"] = reader.bool();
                        break;
                    case 64014:
                        message[".gogoproto.description"] = reader.bool();
                        break;
                    case 64015:
                        message[".gogoproto.testgen"] = reader.bool();
                        break;
                    case 64016:
                        message[".gogoproto.benchgen"] = reader.bool();
                        break;
                    case 64017:
                        message[".gogoproto.marshaler"] = reader.bool();
                        break;
                    case 64018:
                        message[".gogoproto.unmarshaler"] = reader.bool();
                        break;
                    case 64019:
                        message[".gogoproto.stable_marshaler"] = reader.bool();
                        break;
                    case 64020:
                        message[".gogoproto.sizer"] = reader.bool();
                        break;
                    case 64023:
                        message[".gogoproto.unsafe_marshaler"] = reader.bool();
                        break;
                    case 64024:
                        message[".gogoproto.unsafe_unmarshaler"] = reader.bool();
                        break;
                    case 64025:
                        message[".gogoproto.goproto_extensions_map"] = reader.bool();
                        break;
                    case 64026:
                        message[".gogoproto.goproto_unrecognized"] = reader.bool();
                        break;
                    case 64028:
                        message[".gogoproto.protosizer"] = reader.bool();
                        break;
                    case 64029:
                        message[".gogoproto.compare"] = reader.bool();
                        break;
                    case 64030:
                        message[".gogoproto.typedecl"] = reader.bool();
                        break;
                    case 64033:
                        message[".gogoproto.messagename"] = reader.bool();
                        break;
                    case 64034:
                        message[".gogoproto.goproto_sizecache"] = reader.bool();
                        break;
                    case 64035:
                        message[".gogoproto.goproto_unkeyed"] = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MessageOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.MessageOptions} MessageOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MessageOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MessageOptions message.
             * @function verify
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MessageOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.message_set_wire_format != null && message.hasOwnProperty("message_set_wire_format"))
                    if (typeof message.message_set_wire_format !== "boolean")
                        return "message_set_wire_format: boolean expected";
                if (message.no_standard_descriptor_accessor != null && message.hasOwnProperty("no_standard_descriptor_accessor"))
                    if (typeof message.no_standard_descriptor_accessor !== "boolean")
                        return "no_standard_descriptor_accessor: boolean expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.map_entry != null && message.hasOwnProperty("map_entry"))
                    if (typeof message.map_entry !== "boolean")
                        return "map_entry: boolean expected";
                if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                    if (!Array.isArray(message.uninterpreted_option))
                        return "uninterpreted_option: array expected";
                    for (let i = 0; i < message.uninterpreted_option.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                        if (error)
                            return "uninterpreted_option." + error;
                    }
                }
                if (message[".gogoproto.goproto_getters"] != null && message.hasOwnProperty(".gogoproto.goproto_getters"))
                    if (typeof message[".gogoproto.goproto_getters"] !== "boolean")
                        return ".gogoproto.goproto_getters: boolean expected";
                if (message[".gogoproto.goproto_stringer"] != null && message.hasOwnProperty(".gogoproto.goproto_stringer"))
                    if (typeof message[".gogoproto.goproto_stringer"] !== "boolean")
                        return ".gogoproto.goproto_stringer: boolean expected";
                if (message[".gogoproto.verbose_equal"] != null && message.hasOwnProperty(".gogoproto.verbose_equal"))
                    if (typeof message[".gogoproto.verbose_equal"] !== "boolean")
                        return ".gogoproto.verbose_equal: boolean expected";
                if (message[".gogoproto.face"] != null && message.hasOwnProperty(".gogoproto.face"))
                    if (typeof message[".gogoproto.face"] !== "boolean")
                        return ".gogoproto.face: boolean expected";
                if (message[".gogoproto.gostring"] != null && message.hasOwnProperty(".gogoproto.gostring"))
                    if (typeof message[".gogoproto.gostring"] !== "boolean")
                        return ".gogoproto.gostring: boolean expected";
                if (message[".gogoproto.populate"] != null && message.hasOwnProperty(".gogoproto.populate"))
                    if (typeof message[".gogoproto.populate"] !== "boolean")
                        return ".gogoproto.populate: boolean expected";
                if (message[".gogoproto.stringer"] != null && message.hasOwnProperty(".gogoproto.stringer"))
                    if (typeof message[".gogoproto.stringer"] !== "boolean")
                        return ".gogoproto.stringer: boolean expected";
                if (message[".gogoproto.onlyone"] != null && message.hasOwnProperty(".gogoproto.onlyone"))
                    if (typeof message[".gogoproto.onlyone"] !== "boolean")
                        return ".gogoproto.onlyone: boolean expected";
                if (message[".gogoproto.equal"] != null && message.hasOwnProperty(".gogoproto.equal"))
                    if (typeof message[".gogoproto.equal"] !== "boolean")
                        return ".gogoproto.equal: boolean expected";
                if (message[".gogoproto.description"] != null && message.hasOwnProperty(".gogoproto.description"))
                    if (typeof message[".gogoproto.description"] !== "boolean")
                        return ".gogoproto.description: boolean expected";
                if (message[".gogoproto.testgen"] != null && message.hasOwnProperty(".gogoproto.testgen"))
                    if (typeof message[".gogoproto.testgen"] !== "boolean")
                        return ".gogoproto.testgen: boolean expected";
                if (message[".gogoproto.benchgen"] != null && message.hasOwnProperty(".gogoproto.benchgen"))
                    if (typeof message[".gogoproto.benchgen"] !== "boolean")
                        return ".gogoproto.benchgen: boolean expected";
                if (message[".gogoproto.marshaler"] != null && message.hasOwnProperty(".gogoproto.marshaler"))
                    if (typeof message[".gogoproto.marshaler"] !== "boolean")
                        return ".gogoproto.marshaler: boolean expected";
                if (message[".gogoproto.unmarshaler"] != null && message.hasOwnProperty(".gogoproto.unmarshaler"))
                    if (typeof message[".gogoproto.unmarshaler"] !== "boolean")
                        return ".gogoproto.unmarshaler: boolean expected";
                if (message[".gogoproto.stable_marshaler"] != null && message.hasOwnProperty(".gogoproto.stable_marshaler"))
                    if (typeof message[".gogoproto.stable_marshaler"] !== "boolean")
                        return ".gogoproto.stable_marshaler: boolean expected";
                if (message[".gogoproto.sizer"] != null && message.hasOwnProperty(".gogoproto.sizer"))
                    if (typeof message[".gogoproto.sizer"] !== "boolean")
                        return ".gogoproto.sizer: boolean expected";
                if (message[".gogoproto.unsafe_marshaler"] != null && message.hasOwnProperty(".gogoproto.unsafe_marshaler"))
                    if (typeof message[".gogoproto.unsafe_marshaler"] !== "boolean")
                        return ".gogoproto.unsafe_marshaler: boolean expected";
                if (message[".gogoproto.unsafe_unmarshaler"] != null && message.hasOwnProperty(".gogoproto.unsafe_unmarshaler"))
                    if (typeof message[".gogoproto.unsafe_unmarshaler"] !== "boolean")
                        return ".gogoproto.unsafe_unmarshaler: boolean expected";
                if (message[".gogoproto.goproto_extensions_map"] != null && message.hasOwnProperty(".gogoproto.goproto_extensions_map"))
                    if (typeof message[".gogoproto.goproto_extensions_map"] !== "boolean")
                        return ".gogoproto.goproto_extensions_map: boolean expected";
                if (message[".gogoproto.goproto_unrecognized"] != null && message.hasOwnProperty(".gogoproto.goproto_unrecognized"))
                    if (typeof message[".gogoproto.goproto_unrecognized"] !== "boolean")
                        return ".gogoproto.goproto_unrecognized: boolean expected";
                if (message[".gogoproto.protosizer"] != null && message.hasOwnProperty(".gogoproto.protosizer"))
                    if (typeof message[".gogoproto.protosizer"] !== "boolean")
                        return ".gogoproto.protosizer: boolean expected";
                if (message[".gogoproto.compare"] != null && message.hasOwnProperty(".gogoproto.compare"))
                    if (typeof message[".gogoproto.compare"] !== "boolean")
                        return ".gogoproto.compare: boolean expected";
                if (message[".gogoproto.typedecl"] != null && message.hasOwnProperty(".gogoproto.typedecl"))
                    if (typeof message[".gogoproto.typedecl"] !== "boolean")
                        return ".gogoproto.typedecl: boolean expected";
                if (message[".gogoproto.messagename"] != null && message.hasOwnProperty(".gogoproto.messagename"))
                    if (typeof message[".gogoproto.messagename"] !== "boolean")
                        return ".gogoproto.messagename: boolean expected";
                if (message[".gogoproto.goproto_sizecache"] != null && message.hasOwnProperty(".gogoproto.goproto_sizecache"))
                    if (typeof message[".gogoproto.goproto_sizecache"] !== "boolean")
                        return ".gogoproto.goproto_sizecache: boolean expected";
                if (message[".gogoproto.goproto_unkeyed"] != null && message.hasOwnProperty(".gogoproto.goproto_unkeyed"))
                    if (typeof message[".gogoproto.goproto_unkeyed"] !== "boolean")
                        return ".gogoproto.goproto_unkeyed: boolean expected";
                return null;
            };

            /**
             * Creates a MessageOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.MessageOptions} MessageOptions
             */
            MessageOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.MessageOptions)
                    return object;
                let message = new $root.google.protobuf.MessageOptions();
                if (object.message_set_wire_format != null)
                    message.message_set_wire_format = Boolean(object.message_set_wire_format);
                if (object.no_standard_descriptor_accessor != null)
                    message.no_standard_descriptor_accessor = Boolean(object.no_standard_descriptor_accessor);
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.map_entry != null)
                    message.map_entry = Boolean(object.map_entry);
                if (object.uninterpreted_option) {
                    if (!Array.isArray(object.uninterpreted_option))
                        throw TypeError(".google.protobuf.MessageOptions.uninterpreted_option: array expected");
                    message.uninterpreted_option = [];
                    for (let i = 0; i < object.uninterpreted_option.length; ++i) {
                        if (typeof object.uninterpreted_option[i] !== "object")
                            throw TypeError(".google.protobuf.MessageOptions.uninterpreted_option: object expected");
                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                    }
                }
                if (object[".gogoproto.goproto_getters"] != null)
                    message[".gogoproto.goproto_getters"] = Boolean(object[".gogoproto.goproto_getters"]);
                if (object[".gogoproto.goproto_stringer"] != null)
                    message[".gogoproto.goproto_stringer"] = Boolean(object[".gogoproto.goproto_stringer"]);
                if (object[".gogoproto.verbose_equal"] != null)
                    message[".gogoproto.verbose_equal"] = Boolean(object[".gogoproto.verbose_equal"]);
                if (object[".gogoproto.face"] != null)
                    message[".gogoproto.face"] = Boolean(object[".gogoproto.face"]);
                if (object[".gogoproto.gostring"] != null)
                    message[".gogoproto.gostring"] = Boolean(object[".gogoproto.gostring"]);
                if (object[".gogoproto.populate"] != null)
                    message[".gogoproto.populate"] = Boolean(object[".gogoproto.populate"]);
                if (object[".gogoproto.stringer"] != null)
                    message[".gogoproto.stringer"] = Boolean(object[".gogoproto.stringer"]);
                if (object[".gogoproto.onlyone"] != null)
                    message[".gogoproto.onlyone"] = Boolean(object[".gogoproto.onlyone"]);
                if (object[".gogoproto.equal"] != null)
                    message[".gogoproto.equal"] = Boolean(object[".gogoproto.equal"]);
                if (object[".gogoproto.description"] != null)
                    message[".gogoproto.description"] = Boolean(object[".gogoproto.description"]);
                if (object[".gogoproto.testgen"] != null)
                    message[".gogoproto.testgen"] = Boolean(object[".gogoproto.testgen"]);
                if (object[".gogoproto.benchgen"] != null)
                    message[".gogoproto.benchgen"] = Boolean(object[".gogoproto.benchgen"]);
                if (object[".gogoproto.marshaler"] != null)
                    message[".gogoproto.marshaler"] = Boolean(object[".gogoproto.marshaler"]);
                if (object[".gogoproto.unmarshaler"] != null)
                    message[".gogoproto.unmarshaler"] = Boolean(object[".gogoproto.unmarshaler"]);
                if (object[".gogoproto.stable_marshaler"] != null)
                    message[".gogoproto.stable_marshaler"] = Boolean(object[".gogoproto.stable_marshaler"]);
                if (object[".gogoproto.sizer"] != null)
                    message[".gogoproto.sizer"] = Boolean(object[".gogoproto.sizer"]);
                if (object[".gogoproto.unsafe_marshaler"] != null)
                    message[".gogoproto.unsafe_marshaler"] = Boolean(object[".gogoproto.unsafe_marshaler"]);
                if (object[".gogoproto.unsafe_unmarshaler"] != null)
                    message[".gogoproto.unsafe_unmarshaler"] = Boolean(object[".gogoproto.unsafe_unmarshaler"]);
                if (object[".gogoproto.goproto_extensions_map"] != null)
                    message[".gogoproto.goproto_extensions_map"] = Boolean(object[".gogoproto.goproto_extensions_map"]);
                if (object[".gogoproto.goproto_unrecognized"] != null)
                    message[".gogoproto.goproto_unrecognized"] = Boolean(object[".gogoproto.goproto_unrecognized"]);
                if (object[".gogoproto.protosizer"] != null)
                    message[".gogoproto.protosizer"] = Boolean(object[".gogoproto.protosizer"]);
                if (object[".gogoproto.compare"] != null)
                    message[".gogoproto.compare"] = Boolean(object[".gogoproto.compare"]);
                if (object[".gogoproto.typedecl"] != null)
                    message[".gogoproto.typedecl"] = Boolean(object[".gogoproto.typedecl"]);
                if (object[".gogoproto.messagename"] != null)
                    message[".gogoproto.messagename"] = Boolean(object[".gogoproto.messagename"]);
                if (object[".gogoproto.goproto_sizecache"] != null)
                    message[".gogoproto.goproto_sizecache"] = Boolean(object[".gogoproto.goproto_sizecache"]);
                if (object[".gogoproto.goproto_unkeyed"] != null)
                    message[".gogoproto.goproto_unkeyed"] = Boolean(object[".gogoproto.goproto_unkeyed"]);
                return message;
            };

            /**
             * Creates a plain object from a MessageOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {google.protobuf.MessageOptions} message MessageOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MessageOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpreted_option = [];
                if (options.defaults) {
                    object.message_set_wire_format = false;
                    object.no_standard_descriptor_accessor = false;
                    object.deprecated = false;
                    object.map_entry = false;
                    object[".gogoproto.goproto_getters"] = false;
                    object[".gogoproto.goproto_stringer"] = false;
                    object[".gogoproto.verbose_equal"] = false;
                    object[".gogoproto.face"] = false;
                    object[".gogoproto.gostring"] = false;
                    object[".gogoproto.populate"] = false;
                    object[".gogoproto.onlyone"] = false;
                    object[".gogoproto.equal"] = false;
                    object[".gogoproto.description"] = false;
                    object[".gogoproto.testgen"] = false;
                    object[".gogoproto.benchgen"] = false;
                    object[".gogoproto.marshaler"] = false;
                    object[".gogoproto.unmarshaler"] = false;
                    object[".gogoproto.stable_marshaler"] = false;
                    object[".gogoproto.sizer"] = false;
                    object[".gogoproto.unsafe_marshaler"] = false;
                    object[".gogoproto.unsafe_unmarshaler"] = false;
                    object[".gogoproto.goproto_extensions_map"] = false;
                    object[".gogoproto.goproto_unrecognized"] = false;
                    object[".gogoproto.protosizer"] = false;
                    object[".gogoproto.compare"] = false;
                    object[".gogoproto.typedecl"] = false;
                    object[".gogoproto.messagename"] = false;
                    object[".gogoproto.goproto_sizecache"] = false;
                    object[".gogoproto.goproto_unkeyed"] = false;
                    object[".gogoproto.stringer"] = false;
                }
                if (message.message_set_wire_format != null && message.hasOwnProperty("message_set_wire_format"))
                    object.message_set_wire_format = message.message_set_wire_format;
                if (message.no_standard_descriptor_accessor != null && message.hasOwnProperty("no_standard_descriptor_accessor"))
                    object.no_standard_descriptor_accessor = message.no_standard_descriptor_accessor;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.map_entry != null && message.hasOwnProperty("map_entry"))
                    object.map_entry = message.map_entry;
                if (message.uninterpreted_option && message.uninterpreted_option.length) {
                    object.uninterpreted_option = [];
                    for (let j = 0; j < message.uninterpreted_option.length; ++j)
                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                }
                if (message[".gogoproto.goproto_getters"] != null && message.hasOwnProperty(".gogoproto.goproto_getters"))
                    object[".gogoproto.goproto_getters"] = message[".gogoproto.goproto_getters"];
                if (message[".gogoproto.goproto_stringer"] != null && message.hasOwnProperty(".gogoproto.goproto_stringer"))
                    object[".gogoproto.goproto_stringer"] = message[".gogoproto.goproto_stringer"];
                if (message[".gogoproto.verbose_equal"] != null && message.hasOwnProperty(".gogoproto.verbose_equal"))
                    object[".gogoproto.verbose_equal"] = message[".gogoproto.verbose_equal"];
                if (message[".gogoproto.face"] != null && message.hasOwnProperty(".gogoproto.face"))
                    object[".gogoproto.face"] = message[".gogoproto.face"];
                if (message[".gogoproto.gostring"] != null && message.hasOwnProperty(".gogoproto.gostring"))
                    object[".gogoproto.gostring"] = message[".gogoproto.gostring"];
                if (message[".gogoproto.populate"] != null && message.hasOwnProperty(".gogoproto.populate"))
                    object[".gogoproto.populate"] = message[".gogoproto.populate"];
                if (message[".gogoproto.onlyone"] != null && message.hasOwnProperty(".gogoproto.onlyone"))
                    object[".gogoproto.onlyone"] = message[".gogoproto.onlyone"];
                if (message[".gogoproto.equal"] != null && message.hasOwnProperty(".gogoproto.equal"))
                    object[".gogoproto.equal"] = message[".gogoproto.equal"];
                if (message[".gogoproto.description"] != null && message.hasOwnProperty(".gogoproto.description"))
                    object[".gogoproto.description"] = message[".gogoproto.description"];
                if (message[".gogoproto.testgen"] != null && message.hasOwnProperty(".gogoproto.testgen"))
                    object[".gogoproto.testgen"] = message[".gogoproto.testgen"];
                if (message[".gogoproto.benchgen"] != null && message.hasOwnProperty(".gogoproto.benchgen"))
                    object[".gogoproto.benchgen"] = message[".gogoproto.benchgen"];
                if (message[".gogoproto.marshaler"] != null && message.hasOwnProperty(".gogoproto.marshaler"))
                    object[".gogoproto.marshaler"] = message[".gogoproto.marshaler"];
                if (message[".gogoproto.unmarshaler"] != null && message.hasOwnProperty(".gogoproto.unmarshaler"))
                    object[".gogoproto.unmarshaler"] = message[".gogoproto.unmarshaler"];
                if (message[".gogoproto.stable_marshaler"] != null && message.hasOwnProperty(".gogoproto.stable_marshaler"))
                    object[".gogoproto.stable_marshaler"] = message[".gogoproto.stable_marshaler"];
                if (message[".gogoproto.sizer"] != null && message.hasOwnProperty(".gogoproto.sizer"))
                    object[".gogoproto.sizer"] = message[".gogoproto.sizer"];
                if (message[".gogoproto.unsafe_marshaler"] != null && message.hasOwnProperty(".gogoproto.unsafe_marshaler"))
                    object[".gogoproto.unsafe_marshaler"] = message[".gogoproto.unsafe_marshaler"];
                if (message[".gogoproto.unsafe_unmarshaler"] != null && message.hasOwnProperty(".gogoproto.unsafe_unmarshaler"))
                    object[".gogoproto.unsafe_unmarshaler"] = message[".gogoproto.unsafe_unmarshaler"];
                if (message[".gogoproto.goproto_extensions_map"] != null && message.hasOwnProperty(".gogoproto.goproto_extensions_map"))
                    object[".gogoproto.goproto_extensions_map"] = message[".gogoproto.goproto_extensions_map"];
                if (message[".gogoproto.goproto_unrecognized"] != null && message.hasOwnProperty(".gogoproto.goproto_unrecognized"))
                    object[".gogoproto.goproto_unrecognized"] = message[".gogoproto.goproto_unrecognized"];
                if (message[".gogoproto.protosizer"] != null && message.hasOwnProperty(".gogoproto.protosizer"))
                    object[".gogoproto.protosizer"] = message[".gogoproto.protosizer"];
                if (message[".gogoproto.compare"] != null && message.hasOwnProperty(".gogoproto.compare"))
                    object[".gogoproto.compare"] = message[".gogoproto.compare"];
                if (message[".gogoproto.typedecl"] != null && message.hasOwnProperty(".gogoproto.typedecl"))
                    object[".gogoproto.typedecl"] = message[".gogoproto.typedecl"];
                if (message[".gogoproto.messagename"] != null && message.hasOwnProperty(".gogoproto.messagename"))
                    object[".gogoproto.messagename"] = message[".gogoproto.messagename"];
                if (message[".gogoproto.goproto_sizecache"] != null && message.hasOwnProperty(".gogoproto.goproto_sizecache"))
                    object[".gogoproto.goproto_sizecache"] = message[".gogoproto.goproto_sizecache"];
                if (message[".gogoproto.goproto_unkeyed"] != null && message.hasOwnProperty(".gogoproto.goproto_unkeyed"))
                    object[".gogoproto.goproto_unkeyed"] = message[".gogoproto.goproto_unkeyed"];
                if (message[".gogoproto.stringer"] != null && message.hasOwnProperty(".gogoproto.stringer"))
                    object[".gogoproto.stringer"] = message[".gogoproto.stringer"];
                return object;
            };

            /**
             * Converts this MessageOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.MessageOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MessageOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MessageOptions;
        })();

        protobuf.FieldOptions = (function() {

            /**
             * Properties of a FieldOptions.
             * @memberof google.protobuf
             * @interface IFieldOptions
             * @property {google.protobuf.FieldOptions.CType|null} [ctype] FieldOptions ctype
             * @property {boolean|null} [packed] FieldOptions packed
             * @property {google.protobuf.FieldOptions.JSType|null} [jstype] FieldOptions jstype
             * @property {boolean|null} [lazy] FieldOptions lazy
             * @property {boolean|null} [deprecated] FieldOptions deprecated
             * @property {boolean|null} [weak] FieldOptions weak
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] FieldOptions uninterpreted_option
             * @property {boolean|null} [".gogoproto.nullable"] FieldOptions .gogoproto.nullable
             * @property {boolean|null} [".gogoproto.embed"] FieldOptions .gogoproto.embed
             * @property {string|null} [".gogoproto.customtype"] FieldOptions .gogoproto.customtype
             * @property {string|null} [".gogoproto.customname"] FieldOptions .gogoproto.customname
             * @property {string|null} [".gogoproto.jsontag"] FieldOptions .gogoproto.jsontag
             * @property {string|null} [".gogoproto.moretags"] FieldOptions .gogoproto.moretags
             * @property {string|null} [".gogoproto.casttype"] FieldOptions .gogoproto.casttype
             * @property {string|null} [".gogoproto.castkey"] FieldOptions .gogoproto.castkey
             * @property {string|null} [".gogoproto.castvalue"] FieldOptions .gogoproto.castvalue
             * @property {boolean|null} [".gogoproto.stdtime"] FieldOptions .gogoproto.stdtime
             * @property {boolean|null} [".gogoproto.stdduration"] FieldOptions .gogoproto.stdduration
             * @property {boolean|null} [".gogoproto.wktpointer"] FieldOptions .gogoproto.wktpointer
             * @property {string|null} [".gogoproto.castrepeated"] FieldOptions .gogoproto.castrepeated
             */

            /**
             * Constructs a new FieldOptions.
             * @memberof google.protobuf
             * @classdesc Represents a FieldOptions.
             * @implements IFieldOptions
             * @constructor
             * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
             */
            function FieldOptions(properties) {
                this.uninterpreted_option = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FieldOptions ctype.
             * @member {google.protobuf.FieldOptions.CType} ctype
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.ctype = 0;

            /**
             * FieldOptions packed.
             * @member {boolean} packed
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.packed = false;

            /**
             * FieldOptions jstype.
             * @member {google.protobuf.FieldOptions.JSType} jstype
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.jstype = 0;

            /**
             * FieldOptions lazy.
             * @member {boolean} lazy
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.lazy = false;

            /**
             * FieldOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.deprecated = false;

            /**
             * FieldOptions weak.
             * @member {boolean} weak
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.weak = false;

            /**
             * FieldOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * FieldOptions .gogoproto.nullable.
             * @member {boolean} .gogoproto.nullable
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.nullable"] = false;

            /**
             * FieldOptions .gogoproto.embed.
             * @member {boolean} .gogoproto.embed
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.embed"] = false;

            /**
             * FieldOptions .gogoproto.customtype.
             * @member {string} .gogoproto.customtype
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.customtype"] = "";

            /**
             * FieldOptions .gogoproto.customname.
             * @member {string} .gogoproto.customname
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.customname"] = "";

            /**
             * FieldOptions .gogoproto.jsontag.
             * @member {string} .gogoproto.jsontag
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.jsontag"] = "";

            /**
             * FieldOptions .gogoproto.moretags.
             * @member {string} .gogoproto.moretags
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.moretags"] = "";

            /**
             * FieldOptions .gogoproto.casttype.
             * @member {string} .gogoproto.casttype
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.casttype"] = "";

            /**
             * FieldOptions .gogoproto.castkey.
             * @member {string} .gogoproto.castkey
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.castkey"] = "";

            /**
             * FieldOptions .gogoproto.castvalue.
             * @member {string} .gogoproto.castvalue
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.castvalue"] = "";

            /**
             * FieldOptions .gogoproto.stdtime.
             * @member {boolean} .gogoproto.stdtime
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.stdtime"] = false;

            /**
             * FieldOptions .gogoproto.stdduration.
             * @member {boolean} .gogoproto.stdduration
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.stdduration"] = false;

            /**
             * FieldOptions .gogoproto.wktpointer.
             * @member {boolean} .gogoproto.wktpointer
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.wktpointer"] = false;

            /**
             * FieldOptions .gogoproto.castrepeated.
             * @member {string} .gogoproto.castrepeated
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.castrepeated"] = "";

            /**
             * Encodes the specified FieldOptions message. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FieldOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ctype != null && Object.hasOwnProperty.call(message, "ctype"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ctype);
                if (message.packed != null && Object.hasOwnProperty.call(message, "packed"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.packed);
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                if (message.lazy != null && Object.hasOwnProperty.call(message, "lazy"))
                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.lazy);
                if (message.jstype != null && Object.hasOwnProperty.call(message, "jstype"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.jstype);
                if (message.weak != null && Object.hasOwnProperty.call(message, "weak"))
                    writer.uint32(/* id 10, wireType 0 =*/80).bool(message.weak);
                if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                    for (let i = 0; i < message.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                if (message[".gogoproto.nullable"] != null && Object.hasOwnProperty.call(message, ".gogoproto.nullable"))
                    writer.uint32(/* id 65001, wireType 0 =*/520008).bool(message[".gogoproto.nullable"]);
                if (message[".gogoproto.embed"] != null && Object.hasOwnProperty.call(message, ".gogoproto.embed"))
                    writer.uint32(/* id 65002, wireType 0 =*/520016).bool(message[".gogoproto.embed"]);
                if (message[".gogoproto.customtype"] != null && Object.hasOwnProperty.call(message, ".gogoproto.customtype"))
                    writer.uint32(/* id 65003, wireType 2 =*/520026).string(message[".gogoproto.customtype"]);
                if (message[".gogoproto.customname"] != null && Object.hasOwnProperty.call(message, ".gogoproto.customname"))
                    writer.uint32(/* id 65004, wireType 2 =*/520034).string(message[".gogoproto.customname"]);
                if (message[".gogoproto.jsontag"] != null && Object.hasOwnProperty.call(message, ".gogoproto.jsontag"))
                    writer.uint32(/* id 65005, wireType 2 =*/520042).string(message[".gogoproto.jsontag"]);
                if (message[".gogoproto.moretags"] != null && Object.hasOwnProperty.call(message, ".gogoproto.moretags"))
                    writer.uint32(/* id 65006, wireType 2 =*/520050).string(message[".gogoproto.moretags"]);
                if (message[".gogoproto.casttype"] != null && Object.hasOwnProperty.call(message, ".gogoproto.casttype"))
                    writer.uint32(/* id 65007, wireType 2 =*/520058).string(message[".gogoproto.casttype"]);
                if (message[".gogoproto.castkey"] != null && Object.hasOwnProperty.call(message, ".gogoproto.castkey"))
                    writer.uint32(/* id 65008, wireType 2 =*/520066).string(message[".gogoproto.castkey"]);
                if (message[".gogoproto.castvalue"] != null && Object.hasOwnProperty.call(message, ".gogoproto.castvalue"))
                    writer.uint32(/* id 65009, wireType 2 =*/520074).string(message[".gogoproto.castvalue"]);
                if (message[".gogoproto.stdtime"] != null && Object.hasOwnProperty.call(message, ".gogoproto.stdtime"))
                    writer.uint32(/* id 65010, wireType 0 =*/520080).bool(message[".gogoproto.stdtime"]);
                if (message[".gogoproto.stdduration"] != null && Object.hasOwnProperty.call(message, ".gogoproto.stdduration"))
                    writer.uint32(/* id 65011, wireType 0 =*/520088).bool(message[".gogoproto.stdduration"]);
                if (message[".gogoproto.wktpointer"] != null && Object.hasOwnProperty.call(message, ".gogoproto.wktpointer"))
                    writer.uint32(/* id 65012, wireType 0 =*/520096).bool(message[".gogoproto.wktpointer"]);
                if (message[".gogoproto.castrepeated"] != null && Object.hasOwnProperty.call(message, ".gogoproto.castrepeated"))
                    writer.uint32(/* id 65013, wireType 2 =*/520106).string(message[".gogoproto.castrepeated"]);
                return writer;
            };

            /**
             * Encodes the specified FieldOptions message, length delimited. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FieldOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FieldOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FieldOptions} FieldOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FieldOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.ctype = reader.int32();
                        break;
                    case 2:
                        message.packed = reader.bool();
                        break;
                    case 6:
                        message.jstype = reader.int32();
                        break;
                    case 5:
                        message.lazy = reader.bool();
                        break;
                    case 3:
                        message.deprecated = reader.bool();
                        break;
                    case 10:
                        message.weak = reader.bool();
                        break;
                    case 999:
                        if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                            message.uninterpreted_option = [];
                        message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    case 65001:
                        message[".gogoproto.nullable"] = reader.bool();
                        break;
                    case 65002:
                        message[".gogoproto.embed"] = reader.bool();
                        break;
                    case 65003:
                        message[".gogoproto.customtype"] = reader.string();
                        break;
                    case 65004:
                        message[".gogoproto.customname"] = reader.string();
                        break;
                    case 65005:
                        message[".gogoproto.jsontag"] = reader.string();
                        break;
                    case 65006:
                        message[".gogoproto.moretags"] = reader.string();
                        break;
                    case 65007:
                        message[".gogoproto.casttype"] = reader.string();
                        break;
                    case 65008:
                        message[".gogoproto.castkey"] = reader.string();
                        break;
                    case 65009:
                        message[".gogoproto.castvalue"] = reader.string();
                        break;
                    case 65010:
                        message[".gogoproto.stdtime"] = reader.bool();
                        break;
                    case 65011:
                        message[".gogoproto.stdduration"] = reader.bool();
                        break;
                    case 65012:
                        message[".gogoproto.wktpointer"] = reader.bool();
                        break;
                    case 65013:
                        message[".gogoproto.castrepeated"] = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FieldOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FieldOptions} FieldOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FieldOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FieldOptions message.
             * @function verify
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FieldOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ctype != null && message.hasOwnProperty("ctype"))
                    switch (message.ctype) {
                    default:
                        return "ctype: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.packed != null && message.hasOwnProperty("packed"))
                    if (typeof message.packed !== "boolean")
                        return "packed: boolean expected";
                if (message.jstype != null && message.hasOwnProperty("jstype"))
                    switch (message.jstype) {
                    default:
                        return "jstype: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.lazy != null && message.hasOwnProperty("lazy"))
                    if (typeof message.lazy !== "boolean")
                        return "lazy: boolean expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.weak != null && message.hasOwnProperty("weak"))
                    if (typeof message.weak !== "boolean")
                        return "weak: boolean expected";
                if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                    if (!Array.isArray(message.uninterpreted_option))
                        return "uninterpreted_option: array expected";
                    for (let i = 0; i < message.uninterpreted_option.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                        if (error)
                            return "uninterpreted_option." + error;
                    }
                }
                if (message[".gogoproto.nullable"] != null && message.hasOwnProperty(".gogoproto.nullable"))
                    if (typeof message[".gogoproto.nullable"] !== "boolean")
                        return ".gogoproto.nullable: boolean expected";
                if (message[".gogoproto.embed"] != null && message.hasOwnProperty(".gogoproto.embed"))
                    if (typeof message[".gogoproto.embed"] !== "boolean")
                        return ".gogoproto.embed: boolean expected";
                if (message[".gogoproto.customtype"] != null && message.hasOwnProperty(".gogoproto.customtype"))
                    if (!$util.isString(message[".gogoproto.customtype"]))
                        return ".gogoproto.customtype: string expected";
                if (message[".gogoproto.customname"] != null && message.hasOwnProperty(".gogoproto.customname"))
                    if (!$util.isString(message[".gogoproto.customname"]))
                        return ".gogoproto.customname: string expected";
                if (message[".gogoproto.jsontag"] != null && message.hasOwnProperty(".gogoproto.jsontag"))
                    if (!$util.isString(message[".gogoproto.jsontag"]))
                        return ".gogoproto.jsontag: string expected";
                if (message[".gogoproto.moretags"] != null && message.hasOwnProperty(".gogoproto.moretags"))
                    if (!$util.isString(message[".gogoproto.moretags"]))
                        return ".gogoproto.moretags: string expected";
                if (message[".gogoproto.casttype"] != null && message.hasOwnProperty(".gogoproto.casttype"))
                    if (!$util.isString(message[".gogoproto.casttype"]))
                        return ".gogoproto.casttype: string expected";
                if (message[".gogoproto.castkey"] != null && message.hasOwnProperty(".gogoproto.castkey"))
                    if (!$util.isString(message[".gogoproto.castkey"]))
                        return ".gogoproto.castkey: string expected";
                if (message[".gogoproto.castvalue"] != null && message.hasOwnProperty(".gogoproto.castvalue"))
                    if (!$util.isString(message[".gogoproto.castvalue"]))
                        return ".gogoproto.castvalue: string expected";
                if (message[".gogoproto.stdtime"] != null && message.hasOwnProperty(".gogoproto.stdtime"))
                    if (typeof message[".gogoproto.stdtime"] !== "boolean")
                        return ".gogoproto.stdtime: boolean expected";
                if (message[".gogoproto.stdduration"] != null && message.hasOwnProperty(".gogoproto.stdduration"))
                    if (typeof message[".gogoproto.stdduration"] !== "boolean")
                        return ".gogoproto.stdduration: boolean expected";
                if (message[".gogoproto.wktpointer"] != null && message.hasOwnProperty(".gogoproto.wktpointer"))
                    if (typeof message[".gogoproto.wktpointer"] !== "boolean")
                        return ".gogoproto.wktpointer: boolean expected";
                if (message[".gogoproto.castrepeated"] != null && message.hasOwnProperty(".gogoproto.castrepeated"))
                    if (!$util.isString(message[".gogoproto.castrepeated"]))
                        return ".gogoproto.castrepeated: string expected";
                return null;
            };

            /**
             * Creates a FieldOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FieldOptions} FieldOptions
             */
            FieldOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FieldOptions)
                    return object;
                let message = new $root.google.protobuf.FieldOptions();
                switch (object.ctype) {
                case "STRING":
                case 0:
                    message.ctype = 0;
                    break;
                case "CORD":
                case 1:
                    message.ctype = 1;
                    break;
                case "STRING_PIECE":
                case 2:
                    message.ctype = 2;
                    break;
                }
                if (object.packed != null)
                    message.packed = Boolean(object.packed);
                switch (object.jstype) {
                case "JS_NORMAL":
                case 0:
                    message.jstype = 0;
                    break;
                case "JS_STRING":
                case 1:
                    message.jstype = 1;
                    break;
                case "JS_NUMBER":
                case 2:
                    message.jstype = 2;
                    break;
                }
                if (object.lazy != null)
                    message.lazy = Boolean(object.lazy);
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.weak != null)
                    message.weak = Boolean(object.weak);
                if (object.uninterpreted_option) {
                    if (!Array.isArray(object.uninterpreted_option))
                        throw TypeError(".google.protobuf.FieldOptions.uninterpreted_option: array expected");
                    message.uninterpreted_option = [];
                    for (let i = 0; i < object.uninterpreted_option.length; ++i) {
                        if (typeof object.uninterpreted_option[i] !== "object")
                            throw TypeError(".google.protobuf.FieldOptions.uninterpreted_option: object expected");
                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                    }
                }
                if (object[".gogoproto.nullable"] != null)
                    message[".gogoproto.nullable"] = Boolean(object[".gogoproto.nullable"]);
                if (object[".gogoproto.embed"] != null)
                    message[".gogoproto.embed"] = Boolean(object[".gogoproto.embed"]);
                if (object[".gogoproto.customtype"] != null)
                    message[".gogoproto.customtype"] = String(object[".gogoproto.customtype"]);
                if (object[".gogoproto.customname"] != null)
                    message[".gogoproto.customname"] = String(object[".gogoproto.customname"]);
                if (object[".gogoproto.jsontag"] != null)
                    message[".gogoproto.jsontag"] = String(object[".gogoproto.jsontag"]);
                if (object[".gogoproto.moretags"] != null)
                    message[".gogoproto.moretags"] = String(object[".gogoproto.moretags"]);
                if (object[".gogoproto.casttype"] != null)
                    message[".gogoproto.casttype"] = String(object[".gogoproto.casttype"]);
                if (object[".gogoproto.castkey"] != null)
                    message[".gogoproto.castkey"] = String(object[".gogoproto.castkey"]);
                if (object[".gogoproto.castvalue"] != null)
                    message[".gogoproto.castvalue"] = String(object[".gogoproto.castvalue"]);
                if (object[".gogoproto.stdtime"] != null)
                    message[".gogoproto.stdtime"] = Boolean(object[".gogoproto.stdtime"]);
                if (object[".gogoproto.stdduration"] != null)
                    message[".gogoproto.stdduration"] = Boolean(object[".gogoproto.stdduration"]);
                if (object[".gogoproto.wktpointer"] != null)
                    message[".gogoproto.wktpointer"] = Boolean(object[".gogoproto.wktpointer"]);
                if (object[".gogoproto.castrepeated"] != null)
                    message[".gogoproto.castrepeated"] = String(object[".gogoproto.castrepeated"]);
                return message;
            };

            /**
             * Creates a plain object from a FieldOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {google.protobuf.FieldOptions} message FieldOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FieldOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpreted_option = [];
                if (options.defaults) {
                    object.ctype = options.enums === String ? "STRING" : 0;
                    object.packed = false;
                    object.deprecated = false;
                    object.lazy = false;
                    object.jstype = options.enums === String ? "JS_NORMAL" : 0;
                    object.weak = false;
                    object[".gogoproto.nullable"] = false;
                    object[".gogoproto.embed"] = false;
                    object[".gogoproto.customtype"] = "";
                    object[".gogoproto.customname"] = "";
                    object[".gogoproto.jsontag"] = "";
                    object[".gogoproto.moretags"] = "";
                    object[".gogoproto.casttype"] = "";
                    object[".gogoproto.castkey"] = "";
                    object[".gogoproto.castvalue"] = "";
                    object[".gogoproto.stdtime"] = false;
                    object[".gogoproto.stdduration"] = false;
                    object[".gogoproto.wktpointer"] = false;
                    object[".gogoproto.castrepeated"] = "";
                }
                if (message.ctype != null && message.hasOwnProperty("ctype"))
                    object.ctype = options.enums === String ? $root.google.protobuf.FieldOptions.CType[message.ctype] : message.ctype;
                if (message.packed != null && message.hasOwnProperty("packed"))
                    object.packed = message.packed;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.lazy != null && message.hasOwnProperty("lazy"))
                    object.lazy = message.lazy;
                if (message.jstype != null && message.hasOwnProperty("jstype"))
                    object.jstype = options.enums === String ? $root.google.protobuf.FieldOptions.JSType[message.jstype] : message.jstype;
                if (message.weak != null && message.hasOwnProperty("weak"))
                    object.weak = message.weak;
                if (message.uninterpreted_option && message.uninterpreted_option.length) {
                    object.uninterpreted_option = [];
                    for (let j = 0; j < message.uninterpreted_option.length; ++j)
                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                }
                if (message[".gogoproto.nullable"] != null && message.hasOwnProperty(".gogoproto.nullable"))
                    object[".gogoproto.nullable"] = message[".gogoproto.nullable"];
                if (message[".gogoproto.embed"] != null && message.hasOwnProperty(".gogoproto.embed"))
                    object[".gogoproto.embed"] = message[".gogoproto.embed"];
                if (message[".gogoproto.customtype"] != null && message.hasOwnProperty(".gogoproto.customtype"))
                    object[".gogoproto.customtype"] = message[".gogoproto.customtype"];
                if (message[".gogoproto.customname"] != null && message.hasOwnProperty(".gogoproto.customname"))
                    object[".gogoproto.customname"] = message[".gogoproto.customname"];
                if (message[".gogoproto.jsontag"] != null && message.hasOwnProperty(".gogoproto.jsontag"))
                    object[".gogoproto.jsontag"] = message[".gogoproto.jsontag"];
                if (message[".gogoproto.moretags"] != null && message.hasOwnProperty(".gogoproto.moretags"))
                    object[".gogoproto.moretags"] = message[".gogoproto.moretags"];
                if (message[".gogoproto.casttype"] != null && message.hasOwnProperty(".gogoproto.casttype"))
                    object[".gogoproto.casttype"] = message[".gogoproto.casttype"];
                if (message[".gogoproto.castkey"] != null && message.hasOwnProperty(".gogoproto.castkey"))
                    object[".gogoproto.castkey"] = message[".gogoproto.castkey"];
                if (message[".gogoproto.castvalue"] != null && message.hasOwnProperty(".gogoproto.castvalue"))
                    object[".gogoproto.castvalue"] = message[".gogoproto.castvalue"];
                if (message[".gogoproto.stdtime"] != null && message.hasOwnProperty(".gogoproto.stdtime"))
                    object[".gogoproto.stdtime"] = message[".gogoproto.stdtime"];
                if (message[".gogoproto.stdduration"] != null && message.hasOwnProperty(".gogoproto.stdduration"))
                    object[".gogoproto.stdduration"] = message[".gogoproto.stdduration"];
                if (message[".gogoproto.wktpointer"] != null && message.hasOwnProperty(".gogoproto.wktpointer"))
                    object[".gogoproto.wktpointer"] = message[".gogoproto.wktpointer"];
                if (message[".gogoproto.castrepeated"] != null && message.hasOwnProperty(".gogoproto.castrepeated"))
                    object[".gogoproto.castrepeated"] = message[".gogoproto.castrepeated"];
                return object;
            };

            /**
             * Converts this FieldOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.FieldOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FieldOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * CType enum.
             * @name google.protobuf.FieldOptions.CType
             * @enum {number}
             * @property {number} STRING=0 STRING value
             * @property {number} CORD=1 CORD value
             * @property {number} STRING_PIECE=2 STRING_PIECE value
             */
            FieldOptions.CType = (function() {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "STRING"] = 0;
                values[valuesById[1] = "CORD"] = 1;
                values[valuesById[2] = "STRING_PIECE"] = 2;
                return values;
            })();

            /**
             * JSType enum.
             * @name google.protobuf.FieldOptions.JSType
             * @enum {number}
             * @property {number} JS_NORMAL=0 JS_NORMAL value
             * @property {number} JS_STRING=1 JS_STRING value
             * @property {number} JS_NUMBER=2 JS_NUMBER value
             */
            FieldOptions.JSType = (function() {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "JS_NORMAL"] = 0;
                values[valuesById[1] = "JS_STRING"] = 1;
                values[valuesById[2] = "JS_NUMBER"] = 2;
                return values;
            })();

            return FieldOptions;
        })();

        protobuf.OneofOptions = (function() {

            /**
             * Properties of an OneofOptions.
             * @memberof google.protobuf
             * @interface IOneofOptions
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] OneofOptions uninterpreted_option
             */

            /**
             * Constructs a new OneofOptions.
             * @memberof google.protobuf
             * @classdesc Represents an OneofOptions.
             * @implements IOneofOptions
             * @constructor
             * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
             */
            function OneofOptions(properties) {
                this.uninterpreted_option = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * OneofOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.OneofOptions
             * @instance
             */
            OneofOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * Encodes the specified OneofOptions message. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OneofOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                    for (let i = 0; i < message.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified OneofOptions message, length delimited. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OneofOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an OneofOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.OneofOptions} OneofOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OneofOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 999:
                        if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                            message.uninterpreted_option = [];
                        message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an OneofOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.OneofOptions} OneofOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OneofOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an OneofOptions message.
             * @function verify
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            OneofOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                    if (!Array.isArray(message.uninterpreted_option))
                        return "uninterpreted_option: array expected";
                    for (let i = 0; i < message.uninterpreted_option.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                        if (error)
                            return "uninterpreted_option." + error;
                    }
                }
                return null;
            };

            /**
             * Creates an OneofOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.OneofOptions} OneofOptions
             */
            OneofOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.OneofOptions)
                    return object;
                let message = new $root.google.protobuf.OneofOptions();
                if (object.uninterpreted_option) {
                    if (!Array.isArray(object.uninterpreted_option))
                        throw TypeError(".google.protobuf.OneofOptions.uninterpreted_option: array expected");
                    message.uninterpreted_option = [];
                    for (let i = 0; i < object.uninterpreted_option.length; ++i) {
                        if (typeof object.uninterpreted_option[i] !== "object")
                            throw TypeError(".google.protobuf.OneofOptions.uninterpreted_option: object expected");
                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from an OneofOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {google.protobuf.OneofOptions} message OneofOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            OneofOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpreted_option = [];
                if (message.uninterpreted_option && message.uninterpreted_option.length) {
                    object.uninterpreted_option = [];
                    for (let j = 0; j < message.uninterpreted_option.length; ++j)
                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                }
                return object;
            };

            /**
             * Converts this OneofOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.OneofOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            OneofOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return OneofOptions;
        })();

        protobuf.EnumOptions = (function() {

            /**
             * Properties of an EnumOptions.
             * @memberof google.protobuf
             * @interface IEnumOptions
             * @property {boolean|null} [allow_alias] EnumOptions allow_alias
             * @property {boolean|null} [deprecated] EnumOptions deprecated
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] EnumOptions uninterpreted_option
             * @property {boolean|null} [".gogoproto.goproto_enum_prefix"] EnumOptions .gogoproto.goproto_enum_prefix
             * @property {boolean|null} [".gogoproto.goproto_enum_stringer"] EnumOptions .gogoproto.goproto_enum_stringer
             * @property {boolean|null} [".gogoproto.enum_stringer"] EnumOptions .gogoproto.enum_stringer
             * @property {string|null} [".gogoproto.enum_customname"] EnumOptions .gogoproto.enum_customname
             * @property {boolean|null} [".gogoproto.enumdecl"] EnumOptions .gogoproto.enumdecl
             */

            /**
             * Constructs a new EnumOptions.
             * @memberof google.protobuf
             * @classdesc Represents an EnumOptions.
             * @implements IEnumOptions
             * @constructor
             * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
             */
            function EnumOptions(properties) {
                this.uninterpreted_option = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnumOptions allow_alias.
             * @member {boolean} allow_alias
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype.allow_alias = false;

            /**
             * EnumOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype.deprecated = false;

            /**
             * EnumOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * EnumOptions .gogoproto.goproto_enum_prefix.
             * @member {boolean} .gogoproto.goproto_enum_prefix
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype[".gogoproto.goproto_enum_prefix"] = false;

            /**
             * EnumOptions .gogoproto.goproto_enum_stringer.
             * @member {boolean} .gogoproto.goproto_enum_stringer
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype[".gogoproto.goproto_enum_stringer"] = false;

            /**
             * EnumOptions .gogoproto.enum_stringer.
             * @member {boolean} .gogoproto.enum_stringer
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype[".gogoproto.enum_stringer"] = false;

            /**
             * EnumOptions .gogoproto.enum_customname.
             * @member {string} .gogoproto.enum_customname
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype[".gogoproto.enum_customname"] = "";

            /**
             * EnumOptions .gogoproto.enumdecl.
             * @member {boolean} .gogoproto.enumdecl
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype[".gogoproto.enumdecl"] = false;

            /**
             * Encodes the specified EnumOptions message. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.allow_alias != null && Object.hasOwnProperty.call(message, "allow_alias"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.allow_alias);
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                    for (let i = 0; i < message.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                if (message[".gogoproto.goproto_enum_prefix"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_enum_prefix"))
                    writer.uint32(/* id 62001, wireType 0 =*/496008).bool(message[".gogoproto.goproto_enum_prefix"]);
                if (message[".gogoproto.goproto_enum_stringer"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_enum_stringer"))
                    writer.uint32(/* id 62021, wireType 0 =*/496168).bool(message[".gogoproto.goproto_enum_stringer"]);
                if (message[".gogoproto.enum_stringer"] != null && Object.hasOwnProperty.call(message, ".gogoproto.enum_stringer"))
                    writer.uint32(/* id 62022, wireType 0 =*/496176).bool(message[".gogoproto.enum_stringer"]);
                if (message[".gogoproto.enum_customname"] != null && Object.hasOwnProperty.call(message, ".gogoproto.enum_customname"))
                    writer.uint32(/* id 62023, wireType 2 =*/496186).string(message[".gogoproto.enum_customname"]);
                if (message[".gogoproto.enumdecl"] != null && Object.hasOwnProperty.call(message, ".gogoproto.enumdecl"))
                    writer.uint32(/* id 62024, wireType 0 =*/496192).bool(message[".gogoproto.enumdecl"]);
                return writer;
            };

            /**
             * Encodes the specified EnumOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EnumOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.EnumOptions} EnumOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 2:
                        message.allow_alias = reader.bool();
                        break;
                    case 3:
                        message.deprecated = reader.bool();
                        break;
                    case 999:
                        if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                            message.uninterpreted_option = [];
                        message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    case 62001:
                        message[".gogoproto.goproto_enum_prefix"] = reader.bool();
                        break;
                    case 62021:
                        message[".gogoproto.goproto_enum_stringer"] = reader.bool();
                        break;
                    case 62022:
                        message[".gogoproto.enum_stringer"] = reader.bool();
                        break;
                    case 62023:
                        message[".gogoproto.enum_customname"] = reader.string();
                        break;
                    case 62024:
                        message[".gogoproto.enumdecl"] = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EnumOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.EnumOptions} EnumOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EnumOptions message.
             * @function verify
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.allow_alias != null && message.hasOwnProperty("allow_alias"))
                    if (typeof message.allow_alias !== "boolean")
                        return "allow_alias: boolean expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                    if (!Array.isArray(message.uninterpreted_option))
                        return "uninterpreted_option: array expected";
                    for (let i = 0; i < message.uninterpreted_option.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                        if (error)
                            return "uninterpreted_option." + error;
                    }
                }
                if (message[".gogoproto.goproto_enum_prefix"] != null && message.hasOwnProperty(".gogoproto.goproto_enum_prefix"))
                    if (typeof message[".gogoproto.goproto_enum_prefix"] !== "boolean")
                        return ".gogoproto.goproto_enum_prefix: boolean expected";
                if (message[".gogoproto.goproto_enum_stringer"] != null && message.hasOwnProperty(".gogoproto.goproto_enum_stringer"))
                    if (typeof message[".gogoproto.goproto_enum_stringer"] !== "boolean")
                        return ".gogoproto.goproto_enum_stringer: boolean expected";
                if (message[".gogoproto.enum_stringer"] != null && message.hasOwnProperty(".gogoproto.enum_stringer"))
                    if (typeof message[".gogoproto.enum_stringer"] !== "boolean")
                        return ".gogoproto.enum_stringer: boolean expected";
                if (message[".gogoproto.enum_customname"] != null && message.hasOwnProperty(".gogoproto.enum_customname"))
                    if (!$util.isString(message[".gogoproto.enum_customname"]))
                        return ".gogoproto.enum_customname: string expected";
                if (message[".gogoproto.enumdecl"] != null && message.hasOwnProperty(".gogoproto.enumdecl"))
                    if (typeof message[".gogoproto.enumdecl"] !== "boolean")
                        return ".gogoproto.enumdecl: boolean expected";
                return null;
            };

            /**
             * Creates an EnumOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumOptions} EnumOptions
             */
            EnumOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumOptions)
                    return object;
                let message = new $root.google.protobuf.EnumOptions();
                if (object.allow_alias != null)
                    message.allow_alias = Boolean(object.allow_alias);
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.uninterpreted_option) {
                    if (!Array.isArray(object.uninterpreted_option))
                        throw TypeError(".google.protobuf.EnumOptions.uninterpreted_option: array expected");
                    message.uninterpreted_option = [];
                    for (let i = 0; i < object.uninterpreted_option.length; ++i) {
                        if (typeof object.uninterpreted_option[i] !== "object")
                            throw TypeError(".google.protobuf.EnumOptions.uninterpreted_option: object expected");
                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                    }
                }
                if (object[".gogoproto.goproto_enum_prefix"] != null)
                    message[".gogoproto.goproto_enum_prefix"] = Boolean(object[".gogoproto.goproto_enum_prefix"]);
                if (object[".gogoproto.goproto_enum_stringer"] != null)
                    message[".gogoproto.goproto_enum_stringer"] = Boolean(object[".gogoproto.goproto_enum_stringer"]);
                if (object[".gogoproto.enum_stringer"] != null)
                    message[".gogoproto.enum_stringer"] = Boolean(object[".gogoproto.enum_stringer"]);
                if (object[".gogoproto.enum_customname"] != null)
                    message[".gogoproto.enum_customname"] = String(object[".gogoproto.enum_customname"]);
                if (object[".gogoproto.enumdecl"] != null)
                    message[".gogoproto.enumdecl"] = Boolean(object[".gogoproto.enumdecl"]);
                return message;
            };

            /**
             * Creates a plain object from an EnumOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {google.protobuf.EnumOptions} message EnumOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpreted_option = [];
                if (options.defaults) {
                    object.allow_alias = false;
                    object.deprecated = false;
                    object[".gogoproto.goproto_enum_prefix"] = false;
                    object[".gogoproto.goproto_enum_stringer"] = false;
                    object[".gogoproto.enum_stringer"] = false;
                    object[".gogoproto.enum_customname"] = "";
                    object[".gogoproto.enumdecl"] = false;
                }
                if (message.allow_alias != null && message.hasOwnProperty("allow_alias"))
                    object.allow_alias = message.allow_alias;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.uninterpreted_option && message.uninterpreted_option.length) {
                    object.uninterpreted_option = [];
                    for (let j = 0; j < message.uninterpreted_option.length; ++j)
                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                }
                if (message[".gogoproto.goproto_enum_prefix"] != null && message.hasOwnProperty(".gogoproto.goproto_enum_prefix"))
                    object[".gogoproto.goproto_enum_prefix"] = message[".gogoproto.goproto_enum_prefix"];
                if (message[".gogoproto.goproto_enum_stringer"] != null && message.hasOwnProperty(".gogoproto.goproto_enum_stringer"))
                    object[".gogoproto.goproto_enum_stringer"] = message[".gogoproto.goproto_enum_stringer"];
                if (message[".gogoproto.enum_stringer"] != null && message.hasOwnProperty(".gogoproto.enum_stringer"))
                    object[".gogoproto.enum_stringer"] = message[".gogoproto.enum_stringer"];
                if (message[".gogoproto.enum_customname"] != null && message.hasOwnProperty(".gogoproto.enum_customname"))
                    object[".gogoproto.enum_customname"] = message[".gogoproto.enum_customname"];
                if (message[".gogoproto.enumdecl"] != null && message.hasOwnProperty(".gogoproto.enumdecl"))
                    object[".gogoproto.enumdecl"] = message[".gogoproto.enumdecl"];
                return object;
            };

            /**
             * Converts this EnumOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.EnumOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EnumOptions;
        })();

        protobuf.EnumValueOptions = (function() {

            /**
             * Properties of an EnumValueOptions.
             * @memberof google.protobuf
             * @interface IEnumValueOptions
             * @property {boolean|null} [deprecated] EnumValueOptions deprecated
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] EnumValueOptions uninterpreted_option
             * @property {string|null} [".gogoproto.enumvalue_customname"] EnumValueOptions .gogoproto.enumvalue_customname
             */

            /**
             * Constructs a new EnumValueOptions.
             * @memberof google.protobuf
             * @classdesc Represents an EnumValueOptions.
             * @implements IEnumValueOptions
             * @constructor
             * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
             */
            function EnumValueOptions(properties) {
                this.uninterpreted_option = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnumValueOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.EnumValueOptions
             * @instance
             */
            EnumValueOptions.prototype.deprecated = false;

            /**
             * EnumValueOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.EnumValueOptions
             * @instance
             */
            EnumValueOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * EnumValueOptions .gogoproto.enumvalue_customname.
             * @member {string} .gogoproto.enumvalue_customname
             * @memberof google.protobuf.EnumValueOptions
             * @instance
             */
            EnumValueOptions.prototype[".gogoproto.enumvalue_customname"] = "";

            /**
             * Encodes the specified EnumValueOptions message. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumValueOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message.deprecated);
                if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                    for (let i = 0; i < message.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                if (message[".gogoproto.enumvalue_customname"] != null && Object.hasOwnProperty.call(message, ".gogoproto.enumvalue_customname"))
                    writer.uint32(/* id 66001, wireType 2 =*/528010).string(message[".gogoproto.enumvalue_customname"]);
                return writer;
            };

            /**
             * Encodes the specified EnumValueOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumValueOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EnumValueOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumValueOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.deprecated = reader.bool();
                        break;
                    case 999:
                        if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                            message.uninterpreted_option = [];
                        message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    case 66001:
                        message[".gogoproto.enumvalue_customname"] = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EnumValueOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumValueOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EnumValueOptions message.
             * @function verify
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumValueOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                    if (!Array.isArray(message.uninterpreted_option))
                        return "uninterpreted_option: array expected";
                    for (let i = 0; i < message.uninterpreted_option.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                        if (error)
                            return "uninterpreted_option." + error;
                    }
                }
                if (message[".gogoproto.enumvalue_customname"] != null && message.hasOwnProperty(".gogoproto.enumvalue_customname"))
                    if (!$util.isString(message[".gogoproto.enumvalue_customname"]))
                        return ".gogoproto.enumvalue_customname: string expected";
                return null;
            };

            /**
             * Creates an EnumValueOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
             */
            EnumValueOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumValueOptions)
                    return object;
                let message = new $root.google.protobuf.EnumValueOptions();
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.uninterpreted_option) {
                    if (!Array.isArray(object.uninterpreted_option))
                        throw TypeError(".google.protobuf.EnumValueOptions.uninterpreted_option: array expected");
                    message.uninterpreted_option = [];
                    for (let i = 0; i < object.uninterpreted_option.length; ++i) {
                        if (typeof object.uninterpreted_option[i] !== "object")
                            throw TypeError(".google.protobuf.EnumValueOptions.uninterpreted_option: object expected");
                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                    }
                }
                if (object[".gogoproto.enumvalue_customname"] != null)
                    message[".gogoproto.enumvalue_customname"] = String(object[".gogoproto.enumvalue_customname"]);
                return message;
            };

            /**
             * Creates a plain object from an EnumValueOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {google.protobuf.EnumValueOptions} message EnumValueOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumValueOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpreted_option = [];
                if (options.defaults) {
                    object.deprecated = false;
                    object[".gogoproto.enumvalue_customname"] = "";
                }
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.uninterpreted_option && message.uninterpreted_option.length) {
                    object.uninterpreted_option = [];
                    for (let j = 0; j < message.uninterpreted_option.length; ++j)
                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                }
                if (message[".gogoproto.enumvalue_customname"] != null && message.hasOwnProperty(".gogoproto.enumvalue_customname"))
                    object[".gogoproto.enumvalue_customname"] = message[".gogoproto.enumvalue_customname"];
                return object;
            };

            /**
             * Converts this EnumValueOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.EnumValueOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumValueOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EnumValueOptions;
        })();

        protobuf.ServiceOptions = (function() {

            /**
             * Properties of a ServiceOptions.
             * @memberof google.protobuf
             * @interface IServiceOptions
             * @property {boolean|null} [deprecated] ServiceOptions deprecated
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] ServiceOptions uninterpreted_option
             */

            /**
             * Constructs a new ServiceOptions.
             * @memberof google.protobuf
             * @classdesc Represents a ServiceOptions.
             * @implements IServiceOptions
             * @constructor
             * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
             */
            function ServiceOptions(properties) {
                this.uninterpreted_option = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ServiceOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.ServiceOptions
             * @instance
             */
            ServiceOptions.prototype.deprecated = false;

            /**
             * ServiceOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.ServiceOptions
             * @instance
             */
            ServiceOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * Encodes the specified ServiceOptions message. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ServiceOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                    for (let i = 0; i < message.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ServiceOptions message, length delimited. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ServiceOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ServiceOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.ServiceOptions} ServiceOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ServiceOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 33:
                        message.deprecated = reader.bool();
                        break;
                    case 999:
                        if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                            message.uninterpreted_option = [];
                        message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ServiceOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.ServiceOptions} ServiceOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ServiceOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ServiceOptions message.
             * @function verify
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ServiceOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                    if (!Array.isArray(message.uninterpreted_option))
                        return "uninterpreted_option: array expected";
                    for (let i = 0; i < message.uninterpreted_option.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                        if (error)
                            return "uninterpreted_option." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a ServiceOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.ServiceOptions} ServiceOptions
             */
            ServiceOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.ServiceOptions)
                    return object;
                let message = new $root.google.protobuf.ServiceOptions();
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.uninterpreted_option) {
                    if (!Array.isArray(object.uninterpreted_option))
                        throw TypeError(".google.protobuf.ServiceOptions.uninterpreted_option: array expected");
                    message.uninterpreted_option = [];
                    for (let i = 0; i < object.uninterpreted_option.length; ++i) {
                        if (typeof object.uninterpreted_option[i] !== "object")
                            throw TypeError(".google.protobuf.ServiceOptions.uninterpreted_option: object expected");
                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a ServiceOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {google.protobuf.ServiceOptions} message ServiceOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ServiceOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpreted_option = [];
                if (options.defaults)
                    object.deprecated = false;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.uninterpreted_option && message.uninterpreted_option.length) {
                    object.uninterpreted_option = [];
                    for (let j = 0; j < message.uninterpreted_option.length; ++j)
                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                }
                return object;
            };

            /**
             * Converts this ServiceOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.ServiceOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ServiceOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ServiceOptions;
        })();

        protobuf.MethodOptions = (function() {

            /**
             * Properties of a MethodOptions.
             * @memberof google.protobuf
             * @interface IMethodOptions
             * @property {boolean|null} [deprecated] MethodOptions deprecated
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] MethodOptions uninterpreted_option
             * @property {google.api.IHttpRule|null} [".google.api.http"] MethodOptions .google.api.http
             */

            /**
             * Constructs a new MethodOptions.
             * @memberof google.protobuf
             * @classdesc Represents a MethodOptions.
             * @implements IMethodOptions
             * @constructor
             * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
             */
            function MethodOptions(properties) {
                this.uninterpreted_option = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MethodOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.MethodOptions
             * @instance
             */
            MethodOptions.prototype.deprecated = false;

            /**
             * MethodOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.MethodOptions
             * @instance
             */
            MethodOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * MethodOptions .google.api.http.
             * @member {google.api.IHttpRule|null|undefined} .google.api.http
             * @memberof google.protobuf.MethodOptions
             * @instance
             */
            MethodOptions.prototype[".google.api.http"] = null;

            /**
             * Encodes the specified MethodOptions message. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MethodOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                    for (let i = 0; i < message.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                if (message[".google.api.http"] != null && Object.hasOwnProperty.call(message, ".google.api.http"))
                    $root.google.api.HttpRule.encode(message[".google.api.http"], writer.uint32(/* id 72295728, wireType 2 =*/578365826).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified MethodOptions message, length delimited. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MethodOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MethodOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.MethodOptions} MethodOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MethodOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 33:
                        message.deprecated = reader.bool();
                        break;
                    case 999:
                        if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                            message.uninterpreted_option = [];
                        message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    case 72295728:
                        message[".google.api.http"] = $root.google.api.HttpRule.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MethodOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.MethodOptions} MethodOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MethodOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MethodOptions message.
             * @function verify
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MethodOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                    if (!Array.isArray(message.uninterpreted_option))
                        return "uninterpreted_option: array expected";
                    for (let i = 0; i < message.uninterpreted_option.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                        if (error)
                            return "uninterpreted_option." + error;
                    }
                }
                if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http")) {
                    let error = $root.google.api.HttpRule.verify(message[".google.api.http"]);
                    if (error)
                        return ".google.api.http." + error;
                }
                return null;
            };

            /**
             * Creates a MethodOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.MethodOptions} MethodOptions
             */
            MethodOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.MethodOptions)
                    return object;
                let message = new $root.google.protobuf.MethodOptions();
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.uninterpreted_option) {
                    if (!Array.isArray(object.uninterpreted_option))
                        throw TypeError(".google.protobuf.MethodOptions.uninterpreted_option: array expected");
                    message.uninterpreted_option = [];
                    for (let i = 0; i < object.uninterpreted_option.length; ++i) {
                        if (typeof object.uninterpreted_option[i] !== "object")
                            throw TypeError(".google.protobuf.MethodOptions.uninterpreted_option: object expected");
                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                    }
                }
                if (object[".google.api.http"] != null) {
                    if (typeof object[".google.api.http"] !== "object")
                        throw TypeError(".google.protobuf.MethodOptions..google.api.http: object expected");
                    message[".google.api.http"] = $root.google.api.HttpRule.fromObject(object[".google.api.http"]);
                }
                return message;
            };

            /**
             * Creates a plain object from a MethodOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {google.protobuf.MethodOptions} message MethodOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MethodOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpreted_option = [];
                if (options.defaults) {
                    object.deprecated = false;
                    object[".google.api.http"] = null;
                }
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.uninterpreted_option && message.uninterpreted_option.length) {
                    object.uninterpreted_option = [];
                    for (let j = 0; j < message.uninterpreted_option.length; ++j)
                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                }
                if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http"))
                    object[".google.api.http"] = $root.google.api.HttpRule.toObject(message[".google.api.http"], options);
                return object;
            };

            /**
             * Converts this MethodOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.MethodOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MethodOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MethodOptions;
        })();

        protobuf.UninterpretedOption = (function() {

            /**
             * Properties of an UninterpretedOption.
             * @memberof google.protobuf
             * @interface IUninterpretedOption
             * @property {Array.<google.protobuf.UninterpretedOption.INamePart>|null} [name] UninterpretedOption name
             * @property {string|null} [identifier_value] UninterpretedOption identifier_value
             * @property {Long|null} [positive_int_value] UninterpretedOption positive_int_value
             * @property {Long|null} [negative_int_value] UninterpretedOption negative_int_value
             * @property {number|null} [double_value] UninterpretedOption double_value
             * @property {Uint8Array|null} [string_value] UninterpretedOption string_value
             * @property {string|null} [aggregate_value] UninterpretedOption aggregate_value
             */

            /**
             * Constructs a new UninterpretedOption.
             * @memberof google.protobuf
             * @classdesc Represents an UninterpretedOption.
             * @implements IUninterpretedOption
             * @constructor
             * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
             */
            function UninterpretedOption(properties) {
                this.name = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * UninterpretedOption name.
             * @member {Array.<google.protobuf.UninterpretedOption.INamePart>} name
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.name = $util.emptyArray;

            /**
             * UninterpretedOption identifier_value.
             * @member {string} identifier_value
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.identifier_value = "";

            /**
             * UninterpretedOption positive_int_value.
             * @member {Long} positive_int_value
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.positive_int_value = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * UninterpretedOption negative_int_value.
             * @member {Long} negative_int_value
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.negative_int_value = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * UninterpretedOption double_value.
             * @member {number} double_value
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.double_value = 0;

            /**
             * UninterpretedOption string_value.
             * @member {Uint8Array} string_value
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.string_value = $util.newBuffer([]);

            /**
             * UninterpretedOption aggregate_value.
             * @member {string} aggregate_value
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.aggregate_value = "";

            /**
             * Encodes the specified UninterpretedOption message. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UninterpretedOption.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && message.name.length)
                    for (let i = 0; i < message.name.length; ++i)
                        $root.google.protobuf.UninterpretedOption.NamePart.encode(message.name[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.identifier_value != null && Object.hasOwnProperty.call(message, "identifier_value"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.identifier_value);
                if (message.positive_int_value != null && Object.hasOwnProperty.call(message, "positive_int_value"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.positive_int_value);
                if (message.negative_int_value != null && Object.hasOwnProperty.call(message, "negative_int_value"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int64(message.negative_int_value);
                if (message.double_value != null && Object.hasOwnProperty.call(message, "double_value"))
                    writer.uint32(/* id 6, wireType 1 =*/49).double(message.double_value);
                if (message.string_value != null && Object.hasOwnProperty.call(message, "string_value"))
                    writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.string_value);
                if (message.aggregate_value != null && Object.hasOwnProperty.call(message, "aggregate_value"))
                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.aggregate_value);
                return writer;
            };

            /**
             * Encodes the specified UninterpretedOption message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UninterpretedOption.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an UninterpretedOption message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UninterpretedOption.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 2:
                        if (!(message.name && message.name.length))
                            message.name = [];
                        message.name.push($root.google.protobuf.UninterpretedOption.NamePart.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        message.identifier_value = reader.string();
                        break;
                    case 4:
                        message.positive_int_value = reader.uint64();
                        break;
                    case 5:
                        message.negative_int_value = reader.int64();
                        break;
                    case 6:
                        message.double_value = reader.double();
                        break;
                    case 7:
                        message.string_value = reader.bytes();
                        break;
                    case 8:
                        message.aggregate_value = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an UninterpretedOption message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UninterpretedOption.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an UninterpretedOption message.
             * @function verify
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            UninterpretedOption.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name")) {
                    if (!Array.isArray(message.name))
                        return "name: array expected";
                    for (let i = 0; i < message.name.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.NamePart.verify(message.name[i]);
                        if (error)
                            return "name." + error;
                    }
                }
                if (message.identifier_value != null && message.hasOwnProperty("identifier_value"))
                    if (!$util.isString(message.identifier_value))
                        return "identifier_value: string expected";
                if (message.positive_int_value != null && message.hasOwnProperty("positive_int_value"))
                    if (!$util.isInteger(message.positive_int_value) && !(message.positive_int_value && $util.isInteger(message.positive_int_value.low) && $util.isInteger(message.positive_int_value.high)))
                        return "positive_int_value: integer|Long expected";
                if (message.negative_int_value != null && message.hasOwnProperty("negative_int_value"))
                    if (!$util.isInteger(message.negative_int_value) && !(message.negative_int_value && $util.isInteger(message.negative_int_value.low) && $util.isInteger(message.negative_int_value.high)))
                        return "negative_int_value: integer|Long expected";
                if (message.double_value != null && message.hasOwnProperty("double_value"))
                    if (typeof message.double_value !== "number")
                        return "double_value: number expected";
                if (message.string_value != null && message.hasOwnProperty("string_value"))
                    if (!(message.string_value && typeof message.string_value.length === "number" || $util.isString(message.string_value)))
                        return "string_value: buffer expected";
                if (message.aggregate_value != null && message.hasOwnProperty("aggregate_value"))
                    if (!$util.isString(message.aggregate_value))
                        return "aggregate_value: string expected";
                return null;
            };

            /**
             * Creates an UninterpretedOption message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
             */
            UninterpretedOption.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.UninterpretedOption)
                    return object;
                let message = new $root.google.protobuf.UninterpretedOption();
                if (object.name) {
                    if (!Array.isArray(object.name))
                        throw TypeError(".google.protobuf.UninterpretedOption.name: array expected");
                    message.name = [];
                    for (let i = 0; i < object.name.length; ++i) {
                        if (typeof object.name[i] !== "object")
                            throw TypeError(".google.protobuf.UninterpretedOption.name: object expected");
                        message.name[i] = $root.google.protobuf.UninterpretedOption.NamePart.fromObject(object.name[i]);
                    }
                }
                if (object.identifier_value != null)
                    message.identifier_value = String(object.identifier_value);
                if (object.positive_int_value != null)
                    if ($util.Long)
                        (message.positive_int_value = $util.Long.fromValue(object.positive_int_value)).unsigned = true;
                    else if (typeof object.positive_int_value === "string")
                        message.positive_int_value = parseInt(object.positive_int_value, 10);
                    else if (typeof object.positive_int_value === "number")
                        message.positive_int_value = object.positive_int_value;
                    else if (typeof object.positive_int_value === "object")
                        message.positive_int_value = new $util.LongBits(object.positive_int_value.low >>> 0, object.positive_int_value.high >>> 0).toNumber(true);
                if (object.negative_int_value != null)
                    if ($util.Long)
                        (message.negative_int_value = $util.Long.fromValue(object.negative_int_value)).unsigned = false;
                    else if (typeof object.negative_int_value === "string")
                        message.negative_int_value = parseInt(object.negative_int_value, 10);
                    else if (typeof object.negative_int_value === "number")
                        message.negative_int_value = object.negative_int_value;
                    else if (typeof object.negative_int_value === "object")
                        message.negative_int_value = new $util.LongBits(object.negative_int_value.low >>> 0, object.negative_int_value.high >>> 0).toNumber();
                if (object.double_value != null)
                    message.double_value = Number(object.double_value);
                if (object.string_value != null)
                    if (typeof object.string_value === "string")
                        $util.base64.decode(object.string_value, message.string_value = $util.newBuffer($util.base64.length(object.string_value)), 0);
                    else if (object.string_value.length)
                        message.string_value = object.string_value;
                if (object.aggregate_value != null)
                    message.aggregate_value = String(object.aggregate_value);
                return message;
            };

            /**
             * Creates a plain object from an UninterpretedOption message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {google.protobuf.UninterpretedOption} message UninterpretedOption
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            UninterpretedOption.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.name = [];
                if (options.defaults) {
                    object.identifier_value = "";
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.positive_int_value = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.positive_int_value = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.negative_int_value = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.negative_int_value = options.longs === String ? "0" : 0;
                    object.double_value = 0;
                    if (options.bytes === String)
                        object.string_value = "";
                    else {
                        object.string_value = [];
                        if (options.bytes !== Array)
                            object.string_value = $util.newBuffer(object.string_value);
                    }
                    object.aggregate_value = "";
                }
                if (message.name && message.name.length) {
                    object.name = [];
                    for (let j = 0; j < message.name.length; ++j)
                        object.name[j] = $root.google.protobuf.UninterpretedOption.NamePart.toObject(message.name[j], options);
                }
                if (message.identifier_value != null && message.hasOwnProperty("identifier_value"))
                    object.identifier_value = message.identifier_value;
                if (message.positive_int_value != null && message.hasOwnProperty("positive_int_value"))
                    if (typeof message.positive_int_value === "number")
                        object.positive_int_value = options.longs === String ? String(message.positive_int_value) : message.positive_int_value;
                    else
                        object.positive_int_value = options.longs === String ? $util.Long.prototype.toString.call(message.positive_int_value) : options.longs === Number ? new $util.LongBits(message.positive_int_value.low >>> 0, message.positive_int_value.high >>> 0).toNumber(true) : message.positive_int_value;
                if (message.negative_int_value != null && message.hasOwnProperty("negative_int_value"))
                    if (typeof message.negative_int_value === "number")
                        object.negative_int_value = options.longs === String ? String(message.negative_int_value) : message.negative_int_value;
                    else
                        object.negative_int_value = options.longs === String ? $util.Long.prototype.toString.call(message.negative_int_value) : options.longs === Number ? new $util.LongBits(message.negative_int_value.low >>> 0, message.negative_int_value.high >>> 0).toNumber() : message.negative_int_value;
                if (message.double_value != null && message.hasOwnProperty("double_value"))
                    object.double_value = options.json && !isFinite(message.double_value) ? String(message.double_value) : message.double_value;
                if (message.string_value != null && message.hasOwnProperty("string_value"))
                    object.string_value = options.bytes === String ? $util.base64.encode(message.string_value, 0, message.string_value.length) : options.bytes === Array ? Array.prototype.slice.call(message.string_value) : message.string_value;
                if (message.aggregate_value != null && message.hasOwnProperty("aggregate_value"))
                    object.aggregate_value = message.aggregate_value;
                return object;
            };

            /**
             * Converts this UninterpretedOption to JSON.
             * @function toJSON
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            UninterpretedOption.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            UninterpretedOption.NamePart = (function() {

                /**
                 * Properties of a NamePart.
                 * @memberof google.protobuf.UninterpretedOption
                 * @interface INamePart
                 * @property {string} name_part NamePart name_part
                 * @property {boolean} is_extension NamePart is_extension
                 */

                /**
                 * Constructs a new NamePart.
                 * @memberof google.protobuf.UninterpretedOption
                 * @classdesc Represents a NamePart.
                 * @implements INamePart
                 * @constructor
                 * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                 */
                function NamePart(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * NamePart name_part.
                 * @member {string} name_part
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @instance
                 */
                NamePart.prototype.name_part = "";

                /**
                 * NamePart is_extension.
                 * @member {boolean} is_extension
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @instance
                 */
                NamePart.prototype.is_extension = false;

                /**
                 * Encodes the specified NamePart message. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                NamePart.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name_part);
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.is_extension);
                    return writer;
                };

                /**
                 * Encodes the specified NamePart message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                NamePart.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a NamePart message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                NamePart.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption.NamePart();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name_part = reader.string();
                            break;
                        case 2:
                            message.is_extension = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("name_part"))
                        throw $util.ProtocolError("missing required 'name_part'", { instance: message });
                    if (!message.hasOwnProperty("is_extension"))
                        throw $util.ProtocolError("missing required 'is_extension'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a NamePart message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                NamePart.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a NamePart message.
                 * @function verify
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                NamePart.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isString(message.name_part))
                        return "name_part: string expected";
                    if (typeof message.is_extension !== "boolean")
                        return "is_extension: boolean expected";
                    return null;
                };

                /**
                 * Creates a NamePart message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                 */
                NamePart.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.UninterpretedOption.NamePart)
                        return object;
                    let message = new $root.google.protobuf.UninterpretedOption.NamePart();
                    if (object.name_part != null)
                        message.name_part = String(object.name_part);
                    if (object.is_extension != null)
                        message.is_extension = Boolean(object.is_extension);
                    return message;
                };

                /**
                 * Creates a plain object from a NamePart message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {google.protobuf.UninterpretedOption.NamePart} message NamePart
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                NamePart.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.name_part = "";
                        object.is_extension = false;
                    }
                    if (message.name_part != null && message.hasOwnProperty("name_part"))
                        object.name_part = message.name_part;
                    if (message.is_extension != null && message.hasOwnProperty("is_extension"))
                        object.is_extension = message.is_extension;
                    return object;
                };

                /**
                 * Converts this NamePart to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                NamePart.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return NamePart;
            })();

            return UninterpretedOption;
        })();

        protobuf.SourceCodeInfo = (function() {

            /**
             * Properties of a SourceCodeInfo.
             * @memberof google.protobuf
             * @interface ISourceCodeInfo
             * @property {Array.<google.protobuf.SourceCodeInfo.ILocation>|null} [location] SourceCodeInfo location
             */

            /**
             * Constructs a new SourceCodeInfo.
             * @memberof google.protobuf
             * @classdesc Represents a SourceCodeInfo.
             * @implements ISourceCodeInfo
             * @constructor
             * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
             */
            function SourceCodeInfo(properties) {
                this.location = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SourceCodeInfo location.
             * @member {Array.<google.protobuf.SourceCodeInfo.ILocation>} location
             * @memberof google.protobuf.SourceCodeInfo
             * @instance
             */
            SourceCodeInfo.prototype.location = $util.emptyArray;

            /**
             * Encodes the specified SourceCodeInfo message. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SourceCodeInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.location != null && message.location.length)
                    for (let i = 0; i < message.location.length; ++i)
                        $root.google.protobuf.SourceCodeInfo.Location.encode(message.location[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified SourceCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SourceCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SourceCodeInfo message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SourceCodeInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.location && message.location.length))
                            message.location = [];
                        message.location.push($root.google.protobuf.SourceCodeInfo.Location.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SourceCodeInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SourceCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SourceCodeInfo message.
             * @function verify
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SourceCodeInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.location != null && message.hasOwnProperty("location")) {
                    if (!Array.isArray(message.location))
                        return "location: array expected";
                    for (let i = 0; i < message.location.length; ++i) {
                        let error = $root.google.protobuf.SourceCodeInfo.Location.verify(message.location[i]);
                        if (error)
                            return "location." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a SourceCodeInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
             */
            SourceCodeInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.SourceCodeInfo)
                    return object;
                let message = new $root.google.protobuf.SourceCodeInfo();
                if (object.location) {
                    if (!Array.isArray(object.location))
                        throw TypeError(".google.protobuf.SourceCodeInfo.location: array expected");
                    message.location = [];
                    for (let i = 0; i < object.location.length; ++i) {
                        if (typeof object.location[i] !== "object")
                            throw TypeError(".google.protobuf.SourceCodeInfo.location: object expected");
                        message.location[i] = $root.google.protobuf.SourceCodeInfo.Location.fromObject(object.location[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a SourceCodeInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {google.protobuf.SourceCodeInfo} message SourceCodeInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SourceCodeInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.location = [];
                if (message.location && message.location.length) {
                    object.location = [];
                    for (let j = 0; j < message.location.length; ++j)
                        object.location[j] = $root.google.protobuf.SourceCodeInfo.Location.toObject(message.location[j], options);
                }
                return object;
            };

            /**
             * Converts this SourceCodeInfo to JSON.
             * @function toJSON
             * @memberof google.protobuf.SourceCodeInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SourceCodeInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            SourceCodeInfo.Location = (function() {

                /**
                 * Properties of a Location.
                 * @memberof google.protobuf.SourceCodeInfo
                 * @interface ILocation
                 * @property {Array.<number>|null} [path] Location path
                 * @property {Array.<number>|null} [span] Location span
                 * @property {string|null} [leading_comments] Location leading_comments
                 * @property {string|null} [trailing_comments] Location trailing_comments
                 * @property {Array.<string>|null} [leading_detached_comments] Location leading_detached_comments
                 */

                /**
                 * Constructs a new Location.
                 * @memberof google.protobuf.SourceCodeInfo
                 * @classdesc Represents a Location.
                 * @implements ILocation
                 * @constructor
                 * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                 */
                function Location(properties) {
                    this.path = [];
                    this.span = [];
                    this.leading_detached_comments = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Location path.
                 * @member {Array.<number>} path
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.path = $util.emptyArray;

                /**
                 * Location span.
                 * @member {Array.<number>} span
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.span = $util.emptyArray;

                /**
                 * Location leading_comments.
                 * @member {string} leading_comments
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.leading_comments = "";

                /**
                 * Location trailing_comments.
                 * @member {string} trailing_comments
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.trailing_comments = "";

                /**
                 * Location leading_detached_comments.
                 * @member {Array.<string>} leading_detached_comments
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.leading_detached_comments = $util.emptyArray;

                /**
                 * Encodes the specified Location message. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Location.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.path != null && message.path.length) {
                        writer.uint32(/* id 1, wireType 2 =*/10).fork();
                        for (let i = 0; i < message.path.length; ++i)
                            writer.int32(message.path[i]);
                        writer.ldelim();
                    }
                    if (message.span != null && message.span.length) {
                        writer.uint32(/* id 2, wireType 2 =*/18).fork();
                        for (let i = 0; i < message.span.length; ++i)
                            writer.int32(message.span[i]);
                        writer.ldelim();
                    }
                    if (message.leading_comments != null && Object.hasOwnProperty.call(message, "leading_comments"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.leading_comments);
                    if (message.trailing_comments != null && Object.hasOwnProperty.call(message, "trailing_comments"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.trailing_comments);
                    if (message.leading_detached_comments != null && message.leading_detached_comments.length)
                        for (let i = 0; i < message.leading_detached_comments.length; ++i)
                            writer.uint32(/* id 6, wireType 2 =*/50).string(message.leading_detached_comments[i]);
                    return writer;
                };

                /**
                 * Encodes the specified Location message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Location.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Location message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.SourceCodeInfo.Location} Location
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Location.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo.Location();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.path && message.path.length))
                                message.path = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.path.push(reader.int32());
                            } else
                                message.path.push(reader.int32());
                            break;
                        case 2:
                            if (!(message.span && message.span.length))
                                message.span = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.span.push(reader.int32());
                            } else
                                message.span.push(reader.int32());
                            break;
                        case 3:
                            message.leading_comments = reader.string();
                            break;
                        case 4:
                            message.trailing_comments = reader.string();
                            break;
                        case 6:
                            if (!(message.leading_detached_comments && message.leading_detached_comments.length))
                                message.leading_detached_comments = [];
                            message.leading_detached_comments.push(reader.string());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Location message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.SourceCodeInfo.Location} Location
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Location.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Location message.
                 * @function verify
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Location.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.path != null && message.hasOwnProperty("path")) {
                        if (!Array.isArray(message.path))
                            return "path: array expected";
                        for (let i = 0; i < message.path.length; ++i)
                            if (!$util.isInteger(message.path[i]))
                                return "path: integer[] expected";
                    }
                    if (message.span != null && message.hasOwnProperty("span")) {
                        if (!Array.isArray(message.span))
                            return "span: array expected";
                        for (let i = 0; i < message.span.length; ++i)
                            if (!$util.isInteger(message.span[i]))
                                return "span: integer[] expected";
                    }
                    if (message.leading_comments != null && message.hasOwnProperty("leading_comments"))
                        if (!$util.isString(message.leading_comments))
                            return "leading_comments: string expected";
                    if (message.trailing_comments != null && message.hasOwnProperty("trailing_comments"))
                        if (!$util.isString(message.trailing_comments))
                            return "trailing_comments: string expected";
                    if (message.leading_detached_comments != null && message.hasOwnProperty("leading_detached_comments")) {
                        if (!Array.isArray(message.leading_detached_comments))
                            return "leading_detached_comments: array expected";
                        for (let i = 0; i < message.leading_detached_comments.length; ++i)
                            if (!$util.isString(message.leading_detached_comments[i]))
                                return "leading_detached_comments: string[] expected";
                    }
                    return null;
                };

                /**
                 * Creates a Location message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.SourceCodeInfo.Location} Location
                 */
                Location.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.SourceCodeInfo.Location)
                        return object;
                    let message = new $root.google.protobuf.SourceCodeInfo.Location();
                    if (object.path) {
                        if (!Array.isArray(object.path))
                            throw TypeError(".google.protobuf.SourceCodeInfo.Location.path: array expected");
                        message.path = [];
                        for (let i = 0; i < object.path.length; ++i)
                            message.path[i] = object.path[i] | 0;
                    }
                    if (object.span) {
                        if (!Array.isArray(object.span))
                            throw TypeError(".google.protobuf.SourceCodeInfo.Location.span: array expected");
                        message.span = [];
                        for (let i = 0; i < object.span.length; ++i)
                            message.span[i] = object.span[i] | 0;
                    }
                    if (object.leading_comments != null)
                        message.leading_comments = String(object.leading_comments);
                    if (object.trailing_comments != null)
                        message.trailing_comments = String(object.trailing_comments);
                    if (object.leading_detached_comments) {
                        if (!Array.isArray(object.leading_detached_comments))
                            throw TypeError(".google.protobuf.SourceCodeInfo.Location.leading_detached_comments: array expected");
                        message.leading_detached_comments = [];
                        for (let i = 0; i < object.leading_detached_comments.length; ++i)
                            message.leading_detached_comments[i] = String(object.leading_detached_comments[i]);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a Location message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {google.protobuf.SourceCodeInfo.Location} message Location
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Location.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults) {
                        object.path = [];
                        object.span = [];
                        object.leading_detached_comments = [];
                    }
                    if (options.defaults) {
                        object.leading_comments = "";
                        object.trailing_comments = "";
                    }
                    if (message.path && message.path.length) {
                        object.path = [];
                        for (let j = 0; j < message.path.length; ++j)
                            object.path[j] = message.path[j];
                    }
                    if (message.span && message.span.length) {
                        object.span = [];
                        for (let j = 0; j < message.span.length; ++j)
                            object.span[j] = message.span[j];
                    }
                    if (message.leading_comments != null && message.hasOwnProperty("leading_comments"))
                        object.leading_comments = message.leading_comments;
                    if (message.trailing_comments != null && message.hasOwnProperty("trailing_comments"))
                        object.trailing_comments = message.trailing_comments;
                    if (message.leading_detached_comments && message.leading_detached_comments.length) {
                        object.leading_detached_comments = [];
                        for (let j = 0; j < message.leading_detached_comments.length; ++j)
                            object.leading_detached_comments[j] = message.leading_detached_comments[j];
                    }
                    return object;
                };

                /**
                 * Converts this Location to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Location.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Location;
            })();

            return SourceCodeInfo;
        })();

        protobuf.GeneratedCodeInfo = (function() {

            /**
             * Properties of a GeneratedCodeInfo.
             * @memberof google.protobuf
             * @interface IGeneratedCodeInfo
             * @property {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>|null} [annotation] GeneratedCodeInfo annotation
             */

            /**
             * Constructs a new GeneratedCodeInfo.
             * @memberof google.protobuf
             * @classdesc Represents a GeneratedCodeInfo.
             * @implements IGeneratedCodeInfo
             * @constructor
             * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
             */
            function GeneratedCodeInfo(properties) {
                this.annotation = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GeneratedCodeInfo annotation.
             * @member {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>} annotation
             * @memberof google.protobuf.GeneratedCodeInfo
             * @instance
             */
            GeneratedCodeInfo.prototype.annotation = $util.emptyArray;

            /**
             * Encodes the specified GeneratedCodeInfo message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GeneratedCodeInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.annotation != null && message.annotation.length)
                    for (let i = 0; i < message.annotation.length; ++i)
                        $root.google.protobuf.GeneratedCodeInfo.Annotation.encode(message.annotation[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GeneratedCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GeneratedCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GeneratedCodeInfo message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GeneratedCodeInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.annotation && message.annotation.length))
                            message.annotation = [];
                        message.annotation.push($root.google.protobuf.GeneratedCodeInfo.Annotation.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GeneratedCodeInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GeneratedCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GeneratedCodeInfo message.
             * @function verify
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GeneratedCodeInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.annotation != null && message.hasOwnProperty("annotation")) {
                    if (!Array.isArray(message.annotation))
                        return "annotation: array expected";
                    for (let i = 0; i < message.annotation.length; ++i) {
                        let error = $root.google.protobuf.GeneratedCodeInfo.Annotation.verify(message.annotation[i]);
                        if (error)
                            return "annotation." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a GeneratedCodeInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
             */
            GeneratedCodeInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.GeneratedCodeInfo)
                    return object;
                let message = new $root.google.protobuf.GeneratedCodeInfo();
                if (object.annotation) {
                    if (!Array.isArray(object.annotation))
                        throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: array expected");
                    message.annotation = [];
                    for (let i = 0; i < object.annotation.length; ++i) {
                        if (typeof object.annotation[i] !== "object")
                            throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: object expected");
                        message.annotation[i] = $root.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(object.annotation[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a GeneratedCodeInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {google.protobuf.GeneratedCodeInfo} message GeneratedCodeInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GeneratedCodeInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.annotation = [];
                if (message.annotation && message.annotation.length) {
                    object.annotation = [];
                    for (let j = 0; j < message.annotation.length; ++j)
                        object.annotation[j] = $root.google.protobuf.GeneratedCodeInfo.Annotation.toObject(message.annotation[j], options);
                }
                return object;
            };

            /**
             * Converts this GeneratedCodeInfo to JSON.
             * @function toJSON
             * @memberof google.protobuf.GeneratedCodeInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GeneratedCodeInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            GeneratedCodeInfo.Annotation = (function() {

                /**
                 * Properties of an Annotation.
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @interface IAnnotation
                 * @property {Array.<number>|null} [path] Annotation path
                 * @property {string|null} [source_file] Annotation source_file
                 * @property {number|null} [begin] Annotation begin
                 * @property {number|null} [end] Annotation end
                 */

                /**
                 * Constructs a new Annotation.
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @classdesc Represents an Annotation.
                 * @implements IAnnotation
                 * @constructor
                 * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                 */
                function Annotation(properties) {
                    this.path = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Annotation path.
                 * @member {Array.<number>} path
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.path = $util.emptyArray;

                /**
                 * Annotation source_file.
                 * @member {string} source_file
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.source_file = "";

                /**
                 * Annotation begin.
                 * @member {number} begin
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.begin = 0;

                /**
                 * Annotation end.
                 * @member {number} end
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.end = 0;

                /**
                 * Encodes the specified Annotation message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Annotation.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.path != null && message.path.length) {
                        writer.uint32(/* id 1, wireType 2 =*/10).fork();
                        for (let i = 0; i < message.path.length; ++i)
                            writer.int32(message.path[i]);
                        writer.ldelim();
                    }
                    if (message.source_file != null && Object.hasOwnProperty.call(message, "source_file"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.source_file);
                    if (message.begin != null && Object.hasOwnProperty.call(message, "begin"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.begin);
                    if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.end);
                    return writer;
                };

                /**
                 * Encodes the specified Annotation message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Annotation.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an Annotation message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Annotation.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.path && message.path.length))
                                message.path = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.path.push(reader.int32());
                            } else
                                message.path.push(reader.int32());
                            break;
                        case 2:
                            message.source_file = reader.string();
                            break;
                        case 3:
                            message.begin = reader.int32();
                            break;
                        case 4:
                            message.end = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an Annotation message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Annotation.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an Annotation message.
                 * @function verify
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Annotation.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.path != null && message.hasOwnProperty("path")) {
                        if (!Array.isArray(message.path))
                            return "path: array expected";
                        for (let i = 0; i < message.path.length; ++i)
                            if (!$util.isInteger(message.path[i]))
                                return "path: integer[] expected";
                    }
                    if (message.source_file != null && message.hasOwnProperty("source_file"))
                        if (!$util.isString(message.source_file))
                            return "source_file: string expected";
                    if (message.begin != null && message.hasOwnProperty("begin"))
                        if (!$util.isInteger(message.begin))
                            return "begin: integer expected";
                    if (message.end != null && message.hasOwnProperty("end"))
                        if (!$util.isInteger(message.end))
                            return "end: integer expected";
                    return null;
                };

                /**
                 * Creates an Annotation message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                 */
                Annotation.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.GeneratedCodeInfo.Annotation)
                        return object;
                    let message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                    if (object.path) {
                        if (!Array.isArray(object.path))
                            throw TypeError(".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected");
                        message.path = [];
                        for (let i = 0; i < object.path.length; ++i)
                            message.path[i] = object.path[i] | 0;
                    }
                    if (object.source_file != null)
                        message.source_file = String(object.source_file);
                    if (object.begin != null)
                        message.begin = object.begin | 0;
                    if (object.end != null)
                        message.end = object.end | 0;
                    return message;
                };

                /**
                 * Creates a plain object from an Annotation message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo.Annotation} message Annotation
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Annotation.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.path = [];
                    if (options.defaults) {
                        object.source_file = "";
                        object.begin = 0;
                        object.end = 0;
                    }
                    if (message.path && message.path.length) {
                        object.path = [];
                        for (let j = 0; j < message.path.length; ++j)
                            object.path[j] = message.path[j];
                    }
                    if (message.source_file != null && message.hasOwnProperty("source_file"))
                        object.source_file = message.source_file;
                    if (message.begin != null && message.hasOwnProperty("begin"))
                        object.begin = message.begin;
                    if (message.end != null && message.hasOwnProperty("end"))
                        object.end = message.end;
                    return object;
                };

                /**
                 * Converts this Annotation to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Annotation.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Annotation;
            })();

            return GeneratedCodeInfo;
        })();

        return protobuf;
    })();

    google.api = (function() {

        /**
         * Namespace api.
         * @memberof google
         * @namespace
         */
        const api = {};

        api.Http = (function() {

            /**
             * Properties of a Http.
             * @memberof google.api
             * @interface IHttp
             * @property {Array.<google.api.IHttpRule>|null} [rules] Http rules
             * @property {boolean|null} [fully_decode_reserved_expansion] Http fully_decode_reserved_expansion
             */

            /**
             * Constructs a new Http.
             * @memberof google.api
             * @classdesc Represents a Http.
             * @implements IHttp
             * @constructor
             * @param {google.api.IHttp=} [properties] Properties to set
             */
            function Http(properties) {
                this.rules = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Http rules.
             * @member {Array.<google.api.IHttpRule>} rules
             * @memberof google.api.Http
             * @instance
             */
            Http.prototype.rules = $util.emptyArray;

            /**
             * Http fully_decode_reserved_expansion.
             * @member {boolean} fully_decode_reserved_expansion
             * @memberof google.api.Http
             * @instance
             */
            Http.prototype.fully_decode_reserved_expansion = false;

            /**
             * Encodes the specified Http message. Does not implicitly {@link google.api.Http.verify|verify} messages.
             * @function encode
             * @memberof google.api.Http
             * @static
             * @param {google.api.IHttp} message Http message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Http.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rules != null && message.rules.length)
                    for (let i = 0; i < message.rules.length; ++i)
                        $root.google.api.HttpRule.encode(message.rules[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.fully_decode_reserved_expansion != null && Object.hasOwnProperty.call(message, "fully_decode_reserved_expansion"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.fully_decode_reserved_expansion);
                return writer;
            };

            /**
             * Encodes the specified Http message, length delimited. Does not implicitly {@link google.api.Http.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.api.Http
             * @static
             * @param {google.api.IHttp} message Http message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Http.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Http message from the specified reader or buffer.
             * @function decode
             * @memberof google.api.Http
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.api.Http} Http
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Http.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.Http();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.rules && message.rules.length))
                            message.rules = [];
                        message.rules.push($root.google.api.HttpRule.decode(reader, reader.uint32()));
                        break;
                    case 2:
                        message.fully_decode_reserved_expansion = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Http message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.api.Http
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.api.Http} Http
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Http.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Http message.
             * @function verify
             * @memberof google.api.Http
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Http.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rules != null && message.hasOwnProperty("rules")) {
                    if (!Array.isArray(message.rules))
                        return "rules: array expected";
                    for (let i = 0; i < message.rules.length; ++i) {
                        let error = $root.google.api.HttpRule.verify(message.rules[i]);
                        if (error)
                            return "rules." + error;
                    }
                }
                if (message.fully_decode_reserved_expansion != null && message.hasOwnProperty("fully_decode_reserved_expansion"))
                    if (typeof message.fully_decode_reserved_expansion !== "boolean")
                        return "fully_decode_reserved_expansion: boolean expected";
                return null;
            };

            /**
             * Creates a Http message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.api.Http
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.api.Http} Http
             */
            Http.fromObject = function fromObject(object) {
                if (object instanceof $root.google.api.Http)
                    return object;
                let message = new $root.google.api.Http();
                if (object.rules) {
                    if (!Array.isArray(object.rules))
                        throw TypeError(".google.api.Http.rules: array expected");
                    message.rules = [];
                    for (let i = 0; i < object.rules.length; ++i) {
                        if (typeof object.rules[i] !== "object")
                            throw TypeError(".google.api.Http.rules: object expected");
                        message.rules[i] = $root.google.api.HttpRule.fromObject(object.rules[i]);
                    }
                }
                if (object.fully_decode_reserved_expansion != null)
                    message.fully_decode_reserved_expansion = Boolean(object.fully_decode_reserved_expansion);
                return message;
            };

            /**
             * Creates a plain object from a Http message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.api.Http
             * @static
             * @param {google.api.Http} message Http
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Http.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.rules = [];
                if (options.defaults)
                    object.fully_decode_reserved_expansion = false;
                if (message.rules && message.rules.length) {
                    object.rules = [];
                    for (let j = 0; j < message.rules.length; ++j)
                        object.rules[j] = $root.google.api.HttpRule.toObject(message.rules[j], options);
                }
                if (message.fully_decode_reserved_expansion != null && message.hasOwnProperty("fully_decode_reserved_expansion"))
                    object.fully_decode_reserved_expansion = message.fully_decode_reserved_expansion;
                return object;
            };

            /**
             * Converts this Http to JSON.
             * @function toJSON
             * @memberof google.api.Http
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Http.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Http;
        })();

        api.HttpRule = (function() {

            /**
             * Properties of a HttpRule.
             * @memberof google.api
             * @interface IHttpRule
             * @property {string|null} [selector] HttpRule selector
             * @property {string|null} [get] HttpRule get
             * @property {string|null} [put] HttpRule put
             * @property {string|null} [post] HttpRule post
             * @property {string|null} ["delete"] HttpRule delete
             * @property {string|null} [patch] HttpRule patch
             * @property {google.api.ICustomHttpPattern|null} [custom] HttpRule custom
             * @property {string|null} [body] HttpRule body
             * @property {string|null} [response_body] HttpRule response_body
             * @property {Array.<google.api.IHttpRule>|null} [additional_bindings] HttpRule additional_bindings
             */

            /**
             * Constructs a new HttpRule.
             * @memberof google.api
             * @classdesc Represents a HttpRule.
             * @implements IHttpRule
             * @constructor
             * @param {google.api.IHttpRule=} [properties] Properties to set
             */
            function HttpRule(properties) {
                this.additional_bindings = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * HttpRule selector.
             * @member {string} selector
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.selector = "";

            /**
             * HttpRule get.
             * @member {string|null|undefined} get
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.get = null;

            /**
             * HttpRule put.
             * @member {string|null|undefined} put
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.put = null;

            /**
             * HttpRule post.
             * @member {string|null|undefined} post
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.post = null;

            /**
             * HttpRule delete.
             * @member {string|null|undefined} delete
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype["delete"] = null;

            /**
             * HttpRule patch.
             * @member {string|null|undefined} patch
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.patch = null;

            /**
             * HttpRule custom.
             * @member {google.api.ICustomHttpPattern|null|undefined} custom
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.custom = null;

            /**
             * HttpRule body.
             * @member {string} body
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.body = "";

            /**
             * HttpRule response_body.
             * @member {string} response_body
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.response_body = "";

            /**
             * HttpRule additional_bindings.
             * @member {Array.<google.api.IHttpRule>} additional_bindings
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.additional_bindings = $util.emptyArray;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * HttpRule pattern.
             * @member {"get"|"put"|"post"|"delete"|"patch"|"custom"|undefined} pattern
             * @memberof google.api.HttpRule
             * @instance
             */
            Object.defineProperty(HttpRule.prototype, "pattern", {
                get: $util.oneOfGetter($oneOfFields = ["get", "put", "post", "delete", "patch", "custom"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Encodes the specified HttpRule message. Does not implicitly {@link google.api.HttpRule.verify|verify} messages.
             * @function encode
             * @memberof google.api.HttpRule
             * @static
             * @param {google.api.IHttpRule} message HttpRule message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HttpRule.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.selector != null && Object.hasOwnProperty.call(message, "selector"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.selector);
                if (message.get != null && Object.hasOwnProperty.call(message, "get"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.get);
                if (message.put != null && Object.hasOwnProperty.call(message, "put"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.put);
                if (message.post != null && Object.hasOwnProperty.call(message, "post"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.post);
                if (message["delete"] != null && Object.hasOwnProperty.call(message, "delete"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message["delete"]);
                if (message.patch != null && Object.hasOwnProperty.call(message, "patch"))
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.patch);
                if (message.body != null && Object.hasOwnProperty.call(message, "body"))
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.body);
                if (message.custom != null && Object.hasOwnProperty.call(message, "custom"))
                    $root.google.api.CustomHttpPattern.encode(message.custom, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.additional_bindings != null && message.additional_bindings.length)
                    for (let i = 0; i < message.additional_bindings.length; ++i)
                        $root.google.api.HttpRule.encode(message.additional_bindings[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                if (message.response_body != null && Object.hasOwnProperty.call(message, "response_body"))
                    writer.uint32(/* id 12, wireType 2 =*/98).string(message.response_body);
                return writer;
            };

            /**
             * Encodes the specified HttpRule message, length delimited. Does not implicitly {@link google.api.HttpRule.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.api.HttpRule
             * @static
             * @param {google.api.IHttpRule} message HttpRule message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HttpRule.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a HttpRule message from the specified reader or buffer.
             * @function decode
             * @memberof google.api.HttpRule
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.api.HttpRule} HttpRule
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HttpRule.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.HttpRule();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.selector = reader.string();
                        break;
                    case 2:
                        message.get = reader.string();
                        break;
                    case 3:
                        message.put = reader.string();
                        break;
                    case 4:
                        message.post = reader.string();
                        break;
                    case 5:
                        message["delete"] = reader.string();
                        break;
                    case 6:
                        message.patch = reader.string();
                        break;
                    case 8:
                        message.custom = $root.google.api.CustomHttpPattern.decode(reader, reader.uint32());
                        break;
                    case 7:
                        message.body = reader.string();
                        break;
                    case 12:
                        message.response_body = reader.string();
                        break;
                    case 11:
                        if (!(message.additional_bindings && message.additional_bindings.length))
                            message.additional_bindings = [];
                        message.additional_bindings.push($root.google.api.HttpRule.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a HttpRule message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.api.HttpRule
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.api.HttpRule} HttpRule
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HttpRule.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a HttpRule message.
             * @function verify
             * @memberof google.api.HttpRule
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            HttpRule.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                let properties = {};
                if (message.selector != null && message.hasOwnProperty("selector"))
                    if (!$util.isString(message.selector))
                        return "selector: string expected";
                if (message.get != null && message.hasOwnProperty("get")) {
                    properties.pattern = 1;
                    if (!$util.isString(message.get))
                        return "get: string expected";
                }
                if (message.put != null && message.hasOwnProperty("put")) {
                    if (properties.pattern === 1)
                        return "pattern: multiple values";
                    properties.pattern = 1;
                    if (!$util.isString(message.put))
                        return "put: string expected";
                }
                if (message.post != null && message.hasOwnProperty("post")) {
                    if (properties.pattern === 1)
                        return "pattern: multiple values";
                    properties.pattern = 1;
                    if (!$util.isString(message.post))
                        return "post: string expected";
                }
                if (message["delete"] != null && message.hasOwnProperty("delete")) {
                    if (properties.pattern === 1)
                        return "pattern: multiple values";
                    properties.pattern = 1;
                    if (!$util.isString(message["delete"]))
                        return "delete: string expected";
                }
                if (message.patch != null && message.hasOwnProperty("patch")) {
                    if (properties.pattern === 1)
                        return "pattern: multiple values";
                    properties.pattern = 1;
                    if (!$util.isString(message.patch))
                        return "patch: string expected";
                }
                if (message.custom != null && message.hasOwnProperty("custom")) {
                    if (properties.pattern === 1)
                        return "pattern: multiple values";
                    properties.pattern = 1;
                    {
                        let error = $root.google.api.CustomHttpPattern.verify(message.custom);
                        if (error)
                            return "custom." + error;
                    }
                }
                if (message.body != null && message.hasOwnProperty("body"))
                    if (!$util.isString(message.body))
                        return "body: string expected";
                if (message.response_body != null && message.hasOwnProperty("response_body"))
                    if (!$util.isString(message.response_body))
                        return "response_body: string expected";
                if (message.additional_bindings != null && message.hasOwnProperty("additional_bindings")) {
                    if (!Array.isArray(message.additional_bindings))
                        return "additional_bindings: array expected";
                    for (let i = 0; i < message.additional_bindings.length; ++i) {
                        let error = $root.google.api.HttpRule.verify(message.additional_bindings[i]);
                        if (error)
                            return "additional_bindings." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a HttpRule message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.api.HttpRule
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.api.HttpRule} HttpRule
             */
            HttpRule.fromObject = function fromObject(object) {
                if (object instanceof $root.google.api.HttpRule)
                    return object;
                let message = new $root.google.api.HttpRule();
                if (object.selector != null)
                    message.selector = String(object.selector);
                if (object.get != null)
                    message.get = String(object.get);
                if (object.put != null)
                    message.put = String(object.put);
                if (object.post != null)
                    message.post = String(object.post);
                if (object["delete"] != null)
                    message["delete"] = String(object["delete"]);
                if (object.patch != null)
                    message.patch = String(object.patch);
                if (object.custom != null) {
                    if (typeof object.custom !== "object")
                        throw TypeError(".google.api.HttpRule.custom: object expected");
                    message.custom = $root.google.api.CustomHttpPattern.fromObject(object.custom);
                }
                if (object.body != null)
                    message.body = String(object.body);
                if (object.response_body != null)
                    message.response_body = String(object.response_body);
                if (object.additional_bindings) {
                    if (!Array.isArray(object.additional_bindings))
                        throw TypeError(".google.api.HttpRule.additional_bindings: array expected");
                    message.additional_bindings = [];
                    for (let i = 0; i < object.additional_bindings.length; ++i) {
                        if (typeof object.additional_bindings[i] !== "object")
                            throw TypeError(".google.api.HttpRule.additional_bindings: object expected");
                        message.additional_bindings[i] = $root.google.api.HttpRule.fromObject(object.additional_bindings[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a HttpRule message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.api.HttpRule
             * @static
             * @param {google.api.HttpRule} message HttpRule
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            HttpRule.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.additional_bindings = [];
                if (options.defaults) {
                    object.selector = "";
                    object.body = "";
                    object.response_body = "";
                }
                if (message.selector != null && message.hasOwnProperty("selector"))
                    object.selector = message.selector;
                if (message.get != null && message.hasOwnProperty("get")) {
                    object.get = message.get;
                    if (options.oneofs)
                        object.pattern = "get";
                }
                if (message.put != null && message.hasOwnProperty("put")) {
                    object.put = message.put;
                    if (options.oneofs)
                        object.pattern = "put";
                }
                if (message.post != null && message.hasOwnProperty("post")) {
                    object.post = message.post;
                    if (options.oneofs)
                        object.pattern = "post";
                }
                if (message["delete"] != null && message.hasOwnProperty("delete")) {
                    object["delete"] = message["delete"];
                    if (options.oneofs)
                        object.pattern = "delete";
                }
                if (message.patch != null && message.hasOwnProperty("patch")) {
                    object.patch = message.patch;
                    if (options.oneofs)
                        object.pattern = "patch";
                }
                if (message.body != null && message.hasOwnProperty("body"))
                    object.body = message.body;
                if (message.custom != null && message.hasOwnProperty("custom")) {
                    object.custom = $root.google.api.CustomHttpPattern.toObject(message.custom, options);
                    if (options.oneofs)
                        object.pattern = "custom";
                }
                if (message.additional_bindings && message.additional_bindings.length) {
                    object.additional_bindings = [];
                    for (let j = 0; j < message.additional_bindings.length; ++j)
                        object.additional_bindings[j] = $root.google.api.HttpRule.toObject(message.additional_bindings[j], options);
                }
                if (message.response_body != null && message.hasOwnProperty("response_body"))
                    object.response_body = message.response_body;
                return object;
            };

            /**
             * Converts this HttpRule to JSON.
             * @function toJSON
             * @memberof google.api.HttpRule
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            HttpRule.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return HttpRule;
        })();

        api.CustomHttpPattern = (function() {

            /**
             * Properties of a CustomHttpPattern.
             * @memberof google.api
             * @interface ICustomHttpPattern
             * @property {string|null} [kind] CustomHttpPattern kind
             * @property {string|null} [path] CustomHttpPattern path
             */

            /**
             * Constructs a new CustomHttpPattern.
             * @memberof google.api
             * @classdesc Represents a CustomHttpPattern.
             * @implements ICustomHttpPattern
             * @constructor
             * @param {google.api.ICustomHttpPattern=} [properties] Properties to set
             */
            function CustomHttpPattern(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CustomHttpPattern kind.
             * @member {string} kind
             * @memberof google.api.CustomHttpPattern
             * @instance
             */
            CustomHttpPattern.prototype.kind = "";

            /**
             * CustomHttpPattern path.
             * @member {string} path
             * @memberof google.api.CustomHttpPattern
             * @instance
             */
            CustomHttpPattern.prototype.path = "";

            /**
             * Encodes the specified CustomHttpPattern message. Does not implicitly {@link google.api.CustomHttpPattern.verify|verify} messages.
             * @function encode
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {google.api.ICustomHttpPattern} message CustomHttpPattern message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CustomHttpPattern.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.kind != null && Object.hasOwnProperty.call(message, "kind"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.kind);
                if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.path);
                return writer;
            };

            /**
             * Encodes the specified CustomHttpPattern message, length delimited. Does not implicitly {@link google.api.CustomHttpPattern.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {google.api.ICustomHttpPattern} message CustomHttpPattern message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CustomHttpPattern.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CustomHttpPattern message from the specified reader or buffer.
             * @function decode
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.api.CustomHttpPattern} CustomHttpPattern
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CustomHttpPattern.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.CustomHttpPattern();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.kind = reader.string();
                        break;
                    case 2:
                        message.path = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CustomHttpPattern message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.api.CustomHttpPattern} CustomHttpPattern
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CustomHttpPattern.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CustomHttpPattern message.
             * @function verify
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CustomHttpPattern.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.kind != null && message.hasOwnProperty("kind"))
                    if (!$util.isString(message.kind))
                        return "kind: string expected";
                if (message.path != null && message.hasOwnProperty("path"))
                    if (!$util.isString(message.path))
                        return "path: string expected";
                return null;
            };

            /**
             * Creates a CustomHttpPattern message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.api.CustomHttpPattern} CustomHttpPattern
             */
            CustomHttpPattern.fromObject = function fromObject(object) {
                if (object instanceof $root.google.api.CustomHttpPattern)
                    return object;
                let message = new $root.google.api.CustomHttpPattern();
                if (object.kind != null)
                    message.kind = String(object.kind);
                if (object.path != null)
                    message.path = String(object.path);
                return message;
            };

            /**
             * Creates a plain object from a CustomHttpPattern message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {google.api.CustomHttpPattern} message CustomHttpPattern
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CustomHttpPattern.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.kind = "";
                    object.path = "";
                }
                if (message.kind != null && message.hasOwnProperty("kind"))
                    object.kind = message.kind;
                if (message.path != null && message.hasOwnProperty("path"))
                    object.path = message.path;
                return object;
            };

            /**
             * Converts this CustomHttpPattern to JSON.
             * @function toJSON
             * @memberof google.api.CustomHttpPattern
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CustomHttpPattern.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return CustomHttpPattern;
        })();

        return api;
    })();

    return google;
})();

export const cosmos = $root.cosmos = (() => {

    /**
     * Namespace cosmos.
     * @exports cosmos
     * @namespace
     */
    const cosmos = {};

    cosmos.base = (function() {

        /**
         * Namespace base.
         * @memberof cosmos
         * @namespace
         */
        const base = {};

        base.v1beta1 = (function() {

            /**
             * Namespace v1beta1.
             * @memberof cosmos.base
             * @namespace
             */
            const v1beta1 = {};

            v1beta1.Coin = (function() {

                /**
                 * Properties of a Coin.
                 * @memberof cosmos.base.v1beta1
                 * @interface ICoin
                 * @property {string|null} [denom] Coin denom
                 * @property {string|null} [amount] Coin amount
                 */

                /**
                 * Constructs a new Coin.
                 * @memberof cosmos.base.v1beta1
                 * @classdesc Represents a Coin.
                 * @implements ICoin
                 * @constructor
                 * @param {cosmos.base.v1beta1.ICoin=} [properties] Properties to set
                 */
                function Coin(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Coin denom.
                 * @member {string} denom
                 * @memberof cosmos.base.v1beta1.Coin
                 * @instance
                 */
                Coin.prototype.denom = "";

                /**
                 * Coin amount.
                 * @member {string} amount
                 * @memberof cosmos.base.v1beta1.Coin
                 * @instance
                 */
                Coin.prototype.amount = "";

                /**
                 * Encodes the specified Coin message. Does not implicitly {@link cosmos.base.v1beta1.Coin.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.base.v1beta1.Coin
                 * @static
                 * @param {cosmos.base.v1beta1.ICoin} message Coin message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Coin.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.denom != null && Object.hasOwnProperty.call(message, "denom"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.denom);
                    if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.amount);
                    return writer;
                };

                /**
                 * Encodes the specified Coin message, length delimited. Does not implicitly {@link cosmos.base.v1beta1.Coin.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmos.base.v1beta1.Coin
                 * @static
                 * @param {cosmos.base.v1beta1.ICoin} message Coin message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Coin.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Coin message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.base.v1beta1.Coin
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmos.base.v1beta1.Coin} Coin
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Coin.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.base.v1beta1.Coin();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.denom = reader.string();
                            break;
                        case 2:
                            message.amount = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Coin message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmos.base.v1beta1.Coin
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmos.base.v1beta1.Coin} Coin
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Coin.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Coin message.
                 * @function verify
                 * @memberof cosmos.base.v1beta1.Coin
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Coin.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.denom != null && message.hasOwnProperty("denom"))
                        if (!$util.isString(message.denom))
                            return "denom: string expected";
                    if (message.amount != null && message.hasOwnProperty("amount"))
                        if (!$util.isString(message.amount))
                            return "amount: string expected";
                    return null;
                };

                /**
                 * Creates a Coin message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmos.base.v1beta1.Coin
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmos.base.v1beta1.Coin} Coin
                 */
                Coin.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmos.base.v1beta1.Coin)
                        return object;
                    let message = new $root.cosmos.base.v1beta1.Coin();
                    if (object.denom != null)
                        message.denom = String(object.denom);
                    if (object.amount != null)
                        message.amount = String(object.amount);
                    return message;
                };

                /**
                 * Creates a plain object from a Coin message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmos.base.v1beta1.Coin
                 * @static
                 * @param {cosmos.base.v1beta1.Coin} message Coin
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Coin.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.denom = "";
                        object.amount = "";
                    }
                    if (message.denom != null && message.hasOwnProperty("denom"))
                        object.denom = message.denom;
                    if (message.amount != null && message.hasOwnProperty("amount"))
                        object.amount = message.amount;
                    return object;
                };

                /**
                 * Converts this Coin to JSON.
                 * @function toJSON
                 * @memberof cosmos.base.v1beta1.Coin
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Coin.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Coin;
            })();

            v1beta1.DecCoin = (function() {

                /**
                 * Properties of a DecCoin.
                 * @memberof cosmos.base.v1beta1
                 * @interface IDecCoin
                 * @property {string|null} [denom] DecCoin denom
                 * @property {string|null} [amount] DecCoin amount
                 */

                /**
                 * Constructs a new DecCoin.
                 * @memberof cosmos.base.v1beta1
                 * @classdesc Represents a DecCoin.
                 * @implements IDecCoin
                 * @constructor
                 * @param {cosmos.base.v1beta1.IDecCoin=} [properties] Properties to set
                 */
                function DecCoin(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * DecCoin denom.
                 * @member {string} denom
                 * @memberof cosmos.base.v1beta1.DecCoin
                 * @instance
                 */
                DecCoin.prototype.denom = "";

                /**
                 * DecCoin amount.
                 * @member {string} amount
                 * @memberof cosmos.base.v1beta1.DecCoin
                 * @instance
                 */
                DecCoin.prototype.amount = "";

                /**
                 * Encodes the specified DecCoin message. Does not implicitly {@link cosmos.base.v1beta1.DecCoin.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.base.v1beta1.DecCoin
                 * @static
                 * @param {cosmos.base.v1beta1.IDecCoin} message DecCoin message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DecCoin.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.denom != null && Object.hasOwnProperty.call(message, "denom"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.denom);
                    if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.amount);
                    return writer;
                };

                /**
                 * Encodes the specified DecCoin message, length delimited. Does not implicitly {@link cosmos.base.v1beta1.DecCoin.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmos.base.v1beta1.DecCoin
                 * @static
                 * @param {cosmos.base.v1beta1.IDecCoin} message DecCoin message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DecCoin.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a DecCoin message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.base.v1beta1.DecCoin
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmos.base.v1beta1.DecCoin} DecCoin
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DecCoin.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.base.v1beta1.DecCoin();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.denom = reader.string();
                            break;
                        case 2:
                            message.amount = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a DecCoin message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmos.base.v1beta1.DecCoin
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmos.base.v1beta1.DecCoin} DecCoin
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DecCoin.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a DecCoin message.
                 * @function verify
                 * @memberof cosmos.base.v1beta1.DecCoin
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DecCoin.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.denom != null && message.hasOwnProperty("denom"))
                        if (!$util.isString(message.denom))
                            return "denom: string expected";
                    if (message.amount != null && message.hasOwnProperty("amount"))
                        if (!$util.isString(message.amount))
                            return "amount: string expected";
                    return null;
                };

                /**
                 * Creates a DecCoin message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmos.base.v1beta1.DecCoin
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmos.base.v1beta1.DecCoin} DecCoin
                 */
                DecCoin.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmos.base.v1beta1.DecCoin)
                        return object;
                    let message = new $root.cosmos.base.v1beta1.DecCoin();
                    if (object.denom != null)
                        message.denom = String(object.denom);
                    if (object.amount != null)
                        message.amount = String(object.amount);
                    return message;
                };

                /**
                 * Creates a plain object from a DecCoin message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmos.base.v1beta1.DecCoin
                 * @static
                 * @param {cosmos.base.v1beta1.DecCoin} message DecCoin
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DecCoin.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.denom = "";
                        object.amount = "";
                    }
                    if (message.denom != null && message.hasOwnProperty("denom"))
                        object.denom = message.denom;
                    if (message.amount != null && message.hasOwnProperty("amount"))
                        object.amount = message.amount;
                    return object;
                };

                /**
                 * Converts this DecCoin to JSON.
                 * @function toJSON
                 * @memberof cosmos.base.v1beta1.DecCoin
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DecCoin.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return DecCoin;
            })();

            v1beta1.IntProto = (function() {

                /**
                 * Properties of an IntProto.
                 * @memberof cosmos.base.v1beta1
                 * @interface IIntProto
                 * @property {string|null} [int] IntProto int
                 */

                /**
                 * Constructs a new IntProto.
                 * @memberof cosmos.base.v1beta1
                 * @classdesc Represents an IntProto.
                 * @implements IIntProto
                 * @constructor
                 * @param {cosmos.base.v1beta1.IIntProto=} [properties] Properties to set
                 */
                function IntProto(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * IntProto int.
                 * @member {string} int
                 * @memberof cosmos.base.v1beta1.IntProto
                 * @instance
                 */
                IntProto.prototype.int = "";

                /**
                 * Encodes the specified IntProto message. Does not implicitly {@link cosmos.base.v1beta1.IntProto.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.base.v1beta1.IntProto
                 * @static
                 * @param {cosmos.base.v1beta1.IIntProto} message IntProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                IntProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.int != null && Object.hasOwnProperty.call(message, "int"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.int);
                    return writer;
                };

                /**
                 * Encodes the specified IntProto message, length delimited. Does not implicitly {@link cosmos.base.v1beta1.IntProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmos.base.v1beta1.IntProto
                 * @static
                 * @param {cosmos.base.v1beta1.IIntProto} message IntProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                IntProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an IntProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.base.v1beta1.IntProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmos.base.v1beta1.IntProto} IntProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                IntProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.base.v1beta1.IntProto();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.int = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an IntProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmos.base.v1beta1.IntProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmos.base.v1beta1.IntProto} IntProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                IntProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an IntProto message.
                 * @function verify
                 * @memberof cosmos.base.v1beta1.IntProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                IntProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.int != null && message.hasOwnProperty("int"))
                        if (!$util.isString(message.int))
                            return "int: string expected";
                    return null;
                };

                /**
                 * Creates an IntProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmos.base.v1beta1.IntProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmos.base.v1beta1.IntProto} IntProto
                 */
                IntProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmos.base.v1beta1.IntProto)
                        return object;
                    let message = new $root.cosmos.base.v1beta1.IntProto();
                    if (object.int != null)
                        message.int = String(object.int);
                    return message;
                };

                /**
                 * Creates a plain object from an IntProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmos.base.v1beta1.IntProto
                 * @static
                 * @param {cosmos.base.v1beta1.IntProto} message IntProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                IntProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.int = "";
                    if (message.int != null && message.hasOwnProperty("int"))
                        object.int = message.int;
                    return object;
                };

                /**
                 * Converts this IntProto to JSON.
                 * @function toJSON
                 * @memberof cosmos.base.v1beta1.IntProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                IntProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return IntProto;
            })();

            v1beta1.DecProto = (function() {

                /**
                 * Properties of a DecProto.
                 * @memberof cosmos.base.v1beta1
                 * @interface IDecProto
                 * @property {string|null} [dec] DecProto dec
                 */

                /**
                 * Constructs a new DecProto.
                 * @memberof cosmos.base.v1beta1
                 * @classdesc Represents a DecProto.
                 * @implements IDecProto
                 * @constructor
                 * @param {cosmos.base.v1beta1.IDecProto=} [properties] Properties to set
                 */
                function DecProto(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * DecProto dec.
                 * @member {string} dec
                 * @memberof cosmos.base.v1beta1.DecProto
                 * @instance
                 */
                DecProto.prototype.dec = "";

                /**
                 * Encodes the specified DecProto message. Does not implicitly {@link cosmos.base.v1beta1.DecProto.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.base.v1beta1.DecProto
                 * @static
                 * @param {cosmos.base.v1beta1.IDecProto} message DecProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DecProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.dec != null && Object.hasOwnProperty.call(message, "dec"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.dec);
                    return writer;
                };

                /**
                 * Encodes the specified DecProto message, length delimited. Does not implicitly {@link cosmos.base.v1beta1.DecProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmos.base.v1beta1.DecProto
                 * @static
                 * @param {cosmos.base.v1beta1.IDecProto} message DecProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DecProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a DecProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.base.v1beta1.DecProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmos.base.v1beta1.DecProto} DecProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DecProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.base.v1beta1.DecProto();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.dec = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a DecProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmos.base.v1beta1.DecProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmos.base.v1beta1.DecProto} DecProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DecProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a DecProto message.
                 * @function verify
                 * @memberof cosmos.base.v1beta1.DecProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DecProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.dec != null && message.hasOwnProperty("dec"))
                        if (!$util.isString(message.dec))
                            return "dec: string expected";
                    return null;
                };

                /**
                 * Creates a DecProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmos.base.v1beta1.DecProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmos.base.v1beta1.DecProto} DecProto
                 */
                DecProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmos.base.v1beta1.DecProto)
                        return object;
                    let message = new $root.cosmos.base.v1beta1.DecProto();
                    if (object.dec != null)
                        message.dec = String(object.dec);
                    return message;
                };

                /**
                 * Creates a plain object from a DecProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmos.base.v1beta1.DecProto
                 * @static
                 * @param {cosmos.base.v1beta1.DecProto} message DecProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DecProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.dec = "";
                    if (message.dec != null && message.hasOwnProperty("dec"))
                        object.dec = message.dec;
                    return object;
                };

                /**
                 * Converts this DecProto to JSON.
                 * @function toJSON
                 * @memberof cosmos.base.v1beta1.DecProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DecProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return DecProto;
            })();

            return v1beta1;
        })();

        base.query = (function() {

            /**
             * Namespace query.
             * @memberof cosmos.base
             * @namespace
             */
            const query = {};

            query.v1beta1 = (function() {

                /**
                 * Namespace v1beta1.
                 * @memberof cosmos.base.query
                 * @namespace
                 */
                const v1beta1 = {};

                v1beta1.PageRequest = (function() {

                    /**
                     * Properties of a PageRequest.
                     * @memberof cosmos.base.query.v1beta1
                     * @interface IPageRequest
                     * @property {Uint8Array|null} [key] PageRequest key
                     * @property {Long|null} [offset] PageRequest offset
                     * @property {Long|null} [limit] PageRequest limit
                     * @property {boolean|null} [count_total] PageRequest count_total
                     */

                    /**
                     * Constructs a new PageRequest.
                     * @memberof cosmos.base.query.v1beta1
                     * @classdesc Represents a PageRequest.
                     * @implements IPageRequest
                     * @constructor
                     * @param {cosmos.base.query.v1beta1.IPageRequest=} [properties] Properties to set
                     */
                    function PageRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * PageRequest key.
                     * @member {Uint8Array} key
                     * @memberof cosmos.base.query.v1beta1.PageRequest
                     * @instance
                     */
                    PageRequest.prototype.key = $util.newBuffer([]);

                    /**
                     * PageRequest offset.
                     * @member {Long} offset
                     * @memberof cosmos.base.query.v1beta1.PageRequest
                     * @instance
                     */
                    PageRequest.prototype.offset = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * PageRequest limit.
                     * @member {Long} limit
                     * @memberof cosmos.base.query.v1beta1.PageRequest
                     * @instance
                     */
                    PageRequest.prototype.limit = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * PageRequest count_total.
                     * @member {boolean} count_total
                     * @memberof cosmos.base.query.v1beta1.PageRequest
                     * @instance
                     */
                    PageRequest.prototype.count_total = false;

                    /**
                     * Encodes the specified PageRequest message. Does not implicitly {@link cosmos.base.query.v1beta1.PageRequest.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.query.v1beta1.PageRequest
                     * @static
                     * @param {cosmos.base.query.v1beta1.IPageRequest} message PageRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PageRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.key);
                        if (message.offset != null && Object.hasOwnProperty.call(message, "offset"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.offset);
                        if (message.limit != null && Object.hasOwnProperty.call(message, "limit"))
                            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.limit);
                        if (message.count_total != null && Object.hasOwnProperty.call(message, "count_total"))
                            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.count_total);
                        return writer;
                    };

                    /**
                     * Encodes the specified PageRequest message, length delimited. Does not implicitly {@link cosmos.base.query.v1beta1.PageRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof cosmos.base.query.v1beta1.PageRequest
                     * @static
                     * @param {cosmos.base.query.v1beta1.IPageRequest} message PageRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PageRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a PageRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.query.v1beta1.PageRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {cosmos.base.query.v1beta1.PageRequest} PageRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PageRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.base.query.v1beta1.PageRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.key = reader.bytes();
                                break;
                            case 2:
                                message.offset = reader.uint64();
                                break;
                            case 3:
                                message.limit = reader.uint64();
                                break;
                            case 4:
                                message.count_total = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a PageRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof cosmos.base.query.v1beta1.PageRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {cosmos.base.query.v1beta1.PageRequest} PageRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PageRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a PageRequest message.
                     * @function verify
                     * @memberof cosmos.base.query.v1beta1.PageRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PageRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.key != null && message.hasOwnProperty("key"))
                            if (!(message.key && typeof message.key.length === "number" || $util.isString(message.key)))
                                return "key: buffer expected";
                        if (message.offset != null && message.hasOwnProperty("offset"))
                            if (!$util.isInteger(message.offset) && !(message.offset && $util.isInteger(message.offset.low) && $util.isInteger(message.offset.high)))
                                return "offset: integer|Long expected";
                        if (message.limit != null && message.hasOwnProperty("limit"))
                            if (!$util.isInteger(message.limit) && !(message.limit && $util.isInteger(message.limit.low) && $util.isInteger(message.limit.high)))
                                return "limit: integer|Long expected";
                        if (message.count_total != null && message.hasOwnProperty("count_total"))
                            if (typeof message.count_total !== "boolean")
                                return "count_total: boolean expected";
                        return null;
                    };

                    /**
                     * Creates a PageRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof cosmos.base.query.v1beta1.PageRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {cosmos.base.query.v1beta1.PageRequest} PageRequest
                     */
                    PageRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.cosmos.base.query.v1beta1.PageRequest)
                            return object;
                        let message = new $root.cosmos.base.query.v1beta1.PageRequest();
                        if (object.key != null)
                            if (typeof object.key === "string")
                                $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);
                            else if (object.key.length)
                                message.key = object.key;
                        if (object.offset != null)
                            if ($util.Long)
                                (message.offset = $util.Long.fromValue(object.offset)).unsigned = true;
                            else if (typeof object.offset === "string")
                                message.offset = parseInt(object.offset, 10);
                            else if (typeof object.offset === "number")
                                message.offset = object.offset;
                            else if (typeof object.offset === "object")
                                message.offset = new $util.LongBits(object.offset.low >>> 0, object.offset.high >>> 0).toNumber(true);
                        if (object.limit != null)
                            if ($util.Long)
                                (message.limit = $util.Long.fromValue(object.limit)).unsigned = true;
                            else if (typeof object.limit === "string")
                                message.limit = parseInt(object.limit, 10);
                            else if (typeof object.limit === "number")
                                message.limit = object.limit;
                            else if (typeof object.limit === "object")
                                message.limit = new $util.LongBits(object.limit.low >>> 0, object.limit.high >>> 0).toNumber(true);
                        if (object.count_total != null)
                            message.count_total = Boolean(object.count_total);
                        return message;
                    };

                    /**
                     * Creates a plain object from a PageRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof cosmos.base.query.v1beta1.PageRequest
                     * @static
                     * @param {cosmos.base.query.v1beta1.PageRequest} message PageRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PageRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.key = "";
                            else {
                                object.key = [];
                                if (options.bytes !== Array)
                                    object.key = $util.newBuffer(object.key);
                            }
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.offset = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.offset = options.longs === String ? "0" : 0;
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.limit = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.limit = options.longs === String ? "0" : 0;
                            object.count_total = false;
                        }
                        if (message.key != null && message.hasOwnProperty("key"))
                            object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;
                        if (message.offset != null && message.hasOwnProperty("offset"))
                            if (typeof message.offset === "number")
                                object.offset = options.longs === String ? String(message.offset) : message.offset;
                            else
                                object.offset = options.longs === String ? $util.Long.prototype.toString.call(message.offset) : options.longs === Number ? new $util.LongBits(message.offset.low >>> 0, message.offset.high >>> 0).toNumber(true) : message.offset;
                        if (message.limit != null && message.hasOwnProperty("limit"))
                            if (typeof message.limit === "number")
                                object.limit = options.longs === String ? String(message.limit) : message.limit;
                            else
                                object.limit = options.longs === String ? $util.Long.prototype.toString.call(message.limit) : options.longs === Number ? new $util.LongBits(message.limit.low >>> 0, message.limit.high >>> 0).toNumber(true) : message.limit;
                        if (message.count_total != null && message.hasOwnProperty("count_total"))
                            object.count_total = message.count_total;
                        return object;
                    };

                    /**
                     * Converts this PageRequest to JSON.
                     * @function toJSON
                     * @memberof cosmos.base.query.v1beta1.PageRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PageRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return PageRequest;
                })();

                v1beta1.PageResponse = (function() {

                    /**
                     * Properties of a PageResponse.
                     * @memberof cosmos.base.query.v1beta1
                     * @interface IPageResponse
                     * @property {Uint8Array|null} [next_key] PageResponse next_key
                     * @property {Long|null} [total] PageResponse total
                     */

                    /**
                     * Constructs a new PageResponse.
                     * @memberof cosmos.base.query.v1beta1
                     * @classdesc Represents a PageResponse.
                     * @implements IPageResponse
                     * @constructor
                     * @param {cosmos.base.query.v1beta1.IPageResponse=} [properties] Properties to set
                     */
                    function PageResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * PageResponse next_key.
                     * @member {Uint8Array} next_key
                     * @memberof cosmos.base.query.v1beta1.PageResponse
                     * @instance
                     */
                    PageResponse.prototype.next_key = $util.newBuffer([]);

                    /**
                     * PageResponse total.
                     * @member {Long} total
                     * @memberof cosmos.base.query.v1beta1.PageResponse
                     * @instance
                     */
                    PageResponse.prototype.total = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Encodes the specified PageResponse message. Does not implicitly {@link cosmos.base.query.v1beta1.PageResponse.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.query.v1beta1.PageResponse
                     * @static
                     * @param {cosmos.base.query.v1beta1.IPageResponse} message PageResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PageResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.next_key != null && Object.hasOwnProperty.call(message, "next_key"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.next_key);
                        if (message.total != null && Object.hasOwnProperty.call(message, "total"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.total);
                        return writer;
                    };

                    /**
                     * Encodes the specified PageResponse message, length delimited. Does not implicitly {@link cosmos.base.query.v1beta1.PageResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof cosmos.base.query.v1beta1.PageResponse
                     * @static
                     * @param {cosmos.base.query.v1beta1.IPageResponse} message PageResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PageResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a PageResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.query.v1beta1.PageResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {cosmos.base.query.v1beta1.PageResponse} PageResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PageResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.base.query.v1beta1.PageResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.next_key = reader.bytes();
                                break;
                            case 2:
                                message.total = reader.uint64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a PageResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof cosmos.base.query.v1beta1.PageResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {cosmos.base.query.v1beta1.PageResponse} PageResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PageResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a PageResponse message.
                     * @function verify
                     * @memberof cosmos.base.query.v1beta1.PageResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PageResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.next_key != null && message.hasOwnProperty("next_key"))
                            if (!(message.next_key && typeof message.next_key.length === "number" || $util.isString(message.next_key)))
                                return "next_key: buffer expected";
                        if (message.total != null && message.hasOwnProperty("total"))
                            if (!$util.isInteger(message.total) && !(message.total && $util.isInteger(message.total.low) && $util.isInteger(message.total.high)))
                                return "total: integer|Long expected";
                        return null;
                    };

                    /**
                     * Creates a PageResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof cosmos.base.query.v1beta1.PageResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {cosmos.base.query.v1beta1.PageResponse} PageResponse
                     */
                    PageResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.cosmos.base.query.v1beta1.PageResponse)
                            return object;
                        let message = new $root.cosmos.base.query.v1beta1.PageResponse();
                        if (object.next_key != null)
                            if (typeof object.next_key === "string")
                                $util.base64.decode(object.next_key, message.next_key = $util.newBuffer($util.base64.length(object.next_key)), 0);
                            else if (object.next_key.length)
                                message.next_key = object.next_key;
                        if (object.total != null)
                            if ($util.Long)
                                (message.total = $util.Long.fromValue(object.total)).unsigned = true;
                            else if (typeof object.total === "string")
                                message.total = parseInt(object.total, 10);
                            else if (typeof object.total === "number")
                                message.total = object.total;
                            else if (typeof object.total === "object")
                                message.total = new $util.LongBits(object.total.low >>> 0, object.total.high >>> 0).toNumber(true);
                        return message;
                    };

                    /**
                     * Creates a plain object from a PageResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof cosmos.base.query.v1beta1.PageResponse
                     * @static
                     * @param {cosmos.base.query.v1beta1.PageResponse} message PageResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PageResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.next_key = "";
                            else {
                                object.next_key = [];
                                if (options.bytes !== Array)
                                    object.next_key = $util.newBuffer(object.next_key);
                            }
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.total = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.total = options.longs === String ? "0" : 0;
                        }
                        if (message.next_key != null && message.hasOwnProperty("next_key"))
                            object.next_key = options.bytes === String ? $util.base64.encode(message.next_key, 0, message.next_key.length) : options.bytes === Array ? Array.prototype.slice.call(message.next_key) : message.next_key;
                        if (message.total != null && message.hasOwnProperty("total"))
                            if (typeof message.total === "number")
                                object.total = options.longs === String ? String(message.total) : message.total;
                            else
                                object.total = options.longs === String ? $util.Long.prototype.toString.call(message.total) : options.longs === Number ? new $util.LongBits(message.total.low >>> 0, message.total.high >>> 0).toNumber(true) : message.total;
                        return object;
                    };

                    /**
                     * Converts this PageResponse to JSON.
                     * @function toJSON
                     * @memberof cosmos.base.query.v1beta1.PageResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PageResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return PageResponse;
                })();

                return v1beta1;
            })();

            return query;
        })();

        return base;
    })();

    return cosmos;
})();

export { $root as default };
